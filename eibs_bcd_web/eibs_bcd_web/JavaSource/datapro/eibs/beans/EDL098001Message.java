package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EDL098001 physical file definition.
* 
* File level identifier is 1141008111356.
* Record format level identifier is 3B6C0DA96DFCD.
*/

public class EDL098001Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USERID",
                                     "H01PROGRM",
                                     "H01TIMSYS",
                                     "H01SCRCOD",
                                     "H01OPECOD",
                                     "H01FLGMAS",
                                     "H01FLGWK1",
                                     "H01FLGWK2",
                                     "H01FLGWK3",
                                     "E01TASBAP",
                                     "E01NUMDYP",
                                     "E01MODBAP",
                                     "E01PERBAP",
                                     "E01NUMEQP",
                                     "E01MODEQP",
                                     "E01TASEFP",
                                     "E01TASEQP"
                                   };
  final static String tnames[] = {
                                   "H01USERID",
                                   "H01PROGRM",
                                   "H01TIMSYS",
                                   "H01SCRCOD",
                                   "H01OPECOD",
                                   "H01FLGMAS",
                                   "H01FLGWK1",
                                   "H01FLGWK2",
                                   "H01FLGWK3",
                                   "E01TASBAP",
                                   "E01NUMDYP",
                                   "E01MODBAP",
                                   "E01PERBAP",
                                   "E01NUMEQP",
                                   "E01MODEQP",
                                   "E01TASEFP",
                                   "E01TASEQP"
                                 };
  final static String fid = "1141008111356";
  final static String rid = "3B6C0DA96DFCD";
  final static String fmtname = "EDL098001";
  final int FIELDCOUNT = 17;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USERID = null;
  private CharacterField fieldH01PROGRM = null;
  private CharacterField fieldH01TIMSYS = null;
  private CharacterField fieldH01SCRCOD = null;
  private CharacterField fieldH01OPECOD = null;
  private CharacterField fieldH01FLGMAS = null;
  private CharacterField fieldH01FLGWK1 = null;
  private CharacterField fieldH01FLGWK2 = null;
  private CharacterField fieldH01FLGWK3 = null;
  private DecimalField fieldE01TASBAP = null;
  private DecimalField fieldE01NUMDYP = null;
  private CharacterField fieldE01MODBAP = null;
  private DecimalField fieldE01PERBAP = null;
  private DecimalField fieldE01NUMEQP = null;
  private CharacterField fieldE01MODEQP = null;
  private DecimalField fieldE01TASEFP = null;
  private DecimalField fieldE01TASEQP = null;

  /**
  * Constructor for EDL098001Message.
  */
  public EDL098001Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 89;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USERID");
    fields[1] = fieldH01PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PROGRM");
    fields[2] = fieldH01TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIMSYS");
    fields[3] = fieldH01SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCRCOD");
    fields[4] = fieldH01OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPECOD");
    fields[5] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01FLGMAS");
    fields[6] = fieldH01FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01FLGWK1");
    fields[7] = fieldH01FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01FLGWK2");
    fields[8] = fieldH01FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01FLGWK3");
    fields[9] = fieldE01TASBAP =
    new DecimalField(message, HEADERSIZE + 42, 11, 6, "E01TASBAP");
    fields[10] = fieldE01NUMDYP =
    new DecimalField(message, HEADERSIZE + 53, 4, 0, "E01NUMDYP");
    fields[11] = fieldE01MODBAP =
    new CharacterField(message, HEADERSIZE + 57, 1, "E01MODBAP");
    fields[12] = fieldE01PERBAP =
    new DecimalField(message, HEADERSIZE + 58, 4, 0, "E01PERBAP");
    fields[13] = fieldE01NUMEQP =
    new DecimalField(message, HEADERSIZE + 62, 4, 0, "E01NUMEQP");
    fields[14] = fieldE01MODEQP =
    new CharacterField(message, HEADERSIZE + 66, 1, "E01MODEQP");
    fields[15] = fieldE01TASEFP =
    new DecimalField(message, HEADERSIZE + 67, 11, 6, "E01TASEFP");
    fields[16] = fieldE01TASEQP =
    new DecimalField(message, HEADERSIZE + 78, 11, 6, "E01TASEQP");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USERID using a String value.
  */
  public void setH01USERID(String newvalue)
  {
    fieldH01USERID.setString(newvalue);
  }

  /**
  * Get value of field H01USERID as a String.
  */
  public String getH01USERID()
  {
    return fieldH01USERID.getString();
  }

  /**
  * Set field H01PROGRM using a String value.
  */
  public void setH01PROGRM(String newvalue)
  {
    fieldH01PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H01PROGRM as a String.
  */
  public String getH01PROGRM()
  {
    return fieldH01PROGRM.getString();
  }

  /**
  * Set field H01TIMSYS using a String value.
  */
  public void setH01TIMSYS(String newvalue)
  {
    fieldH01TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H01TIMSYS as a String.
  */
  public String getH01TIMSYS()
  {
    return fieldH01TIMSYS.getString();
  }

  /**
  * Set field H01SCRCOD using a String value.
  */
  public void setH01SCRCOD(String newvalue)
  {
    fieldH01SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H01SCRCOD as a String.
  */
  public String getH01SCRCOD()
  {
    return fieldH01SCRCOD.getString();
  }

  /**
  * Set field H01OPECOD using a String value.
  */
  public void setH01OPECOD(String newvalue)
  {
    fieldH01OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H01OPECOD as a String.
  */
  public String getH01OPECOD()
  {
    return fieldH01OPECOD.getString();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

  /**
  * Set field H01FLGWK1 using a String value.
  */
  public void setH01FLGWK1(String newvalue)
  {
    fieldH01FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK1 as a String.
  */
  public String getH01FLGWK1()
  {
    return fieldH01FLGWK1.getString();
  }

  /**
  * Set field H01FLGWK2 using a String value.
  */
  public void setH01FLGWK2(String newvalue)
  {
    fieldH01FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK2 as a String.
  */
  public String getH01FLGWK2()
  {
    return fieldH01FLGWK2.getString();
  }

  /**
  * Set field H01FLGWK3 using a String value.
  */
  public void setH01FLGWK3(String newvalue)
  {
    fieldH01FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK3 as a String.
  */
  public String getH01FLGWK3()
  {
    return fieldH01FLGWK3.getString();
  }

  /**
  * Set field E01TASBAP using a String value.
  */
  public void setE01TASBAP(String newvalue)
  {
    fieldE01TASBAP.setString(newvalue);
  }

  /**
  * Get value of field E01TASBAP as a String.
  */
  public String getE01TASBAP()
  {
    return fieldE01TASBAP.getString();
  }

  /**
  * Set numeric field E01TASBAP using a BigDecimal value.
  */
  public void setE01TASBAP(BigDecimal newvalue)
  {
    fieldE01TASBAP.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01TASBAP as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01TASBAP()
  {
    return fieldE01TASBAP.getBigDecimal();
  }

  /**
  * Set field E01NUMDYP using a String value.
  */
  public void setE01NUMDYP(String newvalue)
  {
    fieldE01NUMDYP.setString(newvalue);
  }

  /**
  * Get value of field E01NUMDYP as a String.
  */
  public String getE01NUMDYP()
  {
    return fieldE01NUMDYP.getString();
  }

  /**
  * Set numeric field E01NUMDYP using a BigDecimal value.
  */
  public void setE01NUMDYP(BigDecimal newvalue)
  {
    fieldE01NUMDYP.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01NUMDYP as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01NUMDYP()
  {
    return fieldE01NUMDYP.getBigDecimal();
  }

  /**
  * Set field E01MODBAP using a String value.
  */
  public void setE01MODBAP(String newvalue)
  {
    fieldE01MODBAP.setString(newvalue);
  }

  /**
  * Get value of field E01MODBAP as a String.
  */
  public String getE01MODBAP()
  {
    return fieldE01MODBAP.getString();
  }

  /**
  * Set field E01PERBAP using a String value.
  */
  public void setE01PERBAP(String newvalue)
  {
    fieldE01PERBAP.setString(newvalue);
  }

  /**
  * Get value of field E01PERBAP as a String.
  */
  public String getE01PERBAP()
  {
    return fieldE01PERBAP.getString();
  }

  /**
  * Set numeric field E01PERBAP using a BigDecimal value.
  */
  public void setE01PERBAP(BigDecimal newvalue)
  {
    fieldE01PERBAP.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01PERBAP as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01PERBAP()
  {
    return fieldE01PERBAP.getBigDecimal();
  }

  /**
  * Set field E01NUMEQP using a String value.
  */
  public void setE01NUMEQP(String newvalue)
  {
    fieldE01NUMEQP.setString(newvalue);
  }

  /**
  * Get value of field E01NUMEQP as a String.
  */
  public String getE01NUMEQP()
  {
    return fieldE01NUMEQP.getString();
  }

  /**
  * Set numeric field E01NUMEQP using a BigDecimal value.
  */
  public void setE01NUMEQP(BigDecimal newvalue)
  {
    fieldE01NUMEQP.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01NUMEQP as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01NUMEQP()
  {
    return fieldE01NUMEQP.getBigDecimal();
  }

  /**
  * Set field E01MODEQP using a String value.
  */
  public void setE01MODEQP(String newvalue)
  {
    fieldE01MODEQP.setString(newvalue);
  }

  /**
  * Get value of field E01MODEQP as a String.
  */
  public String getE01MODEQP()
  {
    return fieldE01MODEQP.getString();
  }

  /**
  * Set field E01TASEFP using a String value.
  */
  public void setE01TASEFP(String newvalue)
  {
    fieldE01TASEFP.setString(newvalue);
  }

  /**
  * Get value of field E01TASEFP as a String.
  */
  public String getE01TASEFP()
  {
    return fieldE01TASEFP.getString();
  }

  /**
  * Set numeric field E01TASEFP using a BigDecimal value.
  */
  public void setE01TASEFP(BigDecimal newvalue)
  {
    fieldE01TASEFP.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01TASEFP as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01TASEFP()
  {
    return fieldE01TASEFP.getBigDecimal();
  }

  /**
  * Set field E01TASEQP using a String value.
  */
  public void setE01TASEQP(String newvalue)
  {
    fieldE01TASEQP.setString(newvalue);
  }

  /**
  * Get value of field E01TASEQP as a String.
  */
  public String getE01TASEQP()
  {
    return fieldE01TASEQP.getString();
  }

  /**
  * Set numeric field E01TASEQP using a BigDecimal value.
  */
  public void setE01TASEQP(BigDecimal newvalue)
  {
    fieldE01TASEQP.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01TASEQP as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01TASEQP()
  {
    return fieldE01TASEQP.getBigDecimal();
  }

}

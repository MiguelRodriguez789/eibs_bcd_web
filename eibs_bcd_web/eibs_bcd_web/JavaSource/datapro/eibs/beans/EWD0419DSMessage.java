package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0419DS physical file definition.
* 
* File level identifier is 1130611161247.
* Record format level identifier is 3A55A9832235D.
*/

public class EWD0419DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EWDACD",
                                     "EWDMVN",
                                     "EWDMVD",
                                     "EWDMVR",
                                     "EWDOPE"
                                   };
  final static String tnames[] = {
                                   "EWDACD",
                                   "EWDMVN",
                                   "EWDMVD",
                                   "EWDMVR",
                                   "EWDOPE"
                                 };
  final static String fid = "1130611161247";
  final static String rid = "3A55A9832235D";
  final static String fmtname = "EWD0419DS";
  final int FIELDCOUNT = 5;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldEWDACD = null;
  private CharacterField fieldEWDMVN = null;
  private CharacterField fieldEWDMVD = null;
  private CharacterField fieldEWDMVR = null;
  private CharacterField fieldEWDOPE = null;

  /**
  * Constructor for EWD0419DSMessage.
  */
  public EWD0419DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 58;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEWDACD =
    new CharacterField(message, HEADERSIZE + 0, 2, "EWDACD");
    fields[1] = fieldEWDMVN =
    new CharacterField(message, HEADERSIZE + 2, 4, "EWDMVN");
    fields[2] = fieldEWDMVD =
    new CharacterField(message, HEADERSIZE + 6, 45, "EWDMVD");
    fields[3] = fieldEWDMVR =
    new CharacterField(message, HEADERSIZE + 51, 6, "EWDMVR");
    fields[4] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 57, 1, "EWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EWDACD using a String value.
  */
  public void setEWDACD(String newvalue)
  {
    fieldEWDACD.setString(newvalue);
  }

  /**
  * Get value of field EWDACD as a String.
  */
  public String getEWDACD()
  {
    return fieldEWDACD.getString();
  }

  /**
  * Set field EWDMVN using a String value.
  */
  public void setEWDMVN(String newvalue)
  {
    fieldEWDMVN.setString(newvalue);
  }

  /**
  * Get value of field EWDMVN as a String.
  */
  public String getEWDMVN()
  {
    return fieldEWDMVN.getString();
  }

  /**
  * Set field EWDMVD using a String value.
  */
  public void setEWDMVD(String newvalue)
  {
    fieldEWDMVD.setString(newvalue);
  }

  /**
  * Get value of field EWDMVD as a String.
  */
  public String getEWDMVD()
  {
    return fieldEWDMVD.getString();
  }

  /**
  * Set field EWDMVR using a String value.
  */
  public void setEWDMVR(String newvalue)
  {
    fieldEWDMVR.setString(newvalue);
  }

  /**
  * Get value of field EWDMVR as a String.
  */
  public String getEWDMVR()
  {
    return fieldEWDMVR.getString();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

}

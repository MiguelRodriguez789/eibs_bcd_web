package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EDD096202 physical file definition.
* 
* File level identifier is 1180420032448.
* Record format level identifier is 3A799911D1F7F.
*/

public class EDD096202Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H02USERID",
                                     "H02PROGRM",
                                     "H02TIMSYS",
                                     "H02SCRCOD",
                                     "H02OPECOD",
                                     "H02FLGMAS",
                                     "H02FLGWK1",
                                     "H02FLGWK2",
                                     "H02FLGWK3",
                                     "E02CACBNK",
                                     "E02CACNCU",
                                     "E02CACTCA",
                                     "D02CACTCA",
                                     "E02CANCOM",
                                     "D02CANCOM",
                                     "E02CANCKN",
                                     "E02CANACK",
                                     "E02CANAMT",
                                     "E02NUMREC",
                                     "E02INDOPE"
                                   };
  final static String tnames[] = {
                                   "H02USERID",
                                   "H02PROGRM",
                                   "H02TIMSYS",
                                   "H02SCRCOD",
                                   "H02OPECOD",
                                   "H02FLGMAS",
                                   "H02FLGWK1",
                                   "H02FLGWK2",
                                   "H02FLGWK3",
                                   "E02CACBNK",
                                   "E02CACNCU",
                                   "E02CACTCA",
                                   "D02CACTCA",
                                   "E02CANCOM",
                                   "D02CANCOM",
                                   "E02CANCKN",
                                   "E02CANACK",
                                   "E02CANAMT",
                                   "E02NUMREC",
                                   "E02INDOPE"
                                 };
  final static String fid = "1180420032448";
  final static String rid = "3A799911D1F7F";
  final static String fmtname = "EDD096202";
  final int FIELDCOUNT = 20;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH02USERID = null;
  private CharacterField fieldH02PROGRM = null;
  private CharacterField fieldH02TIMSYS = null;
  private CharacterField fieldH02SCRCOD = null;
  private CharacterField fieldH02OPECOD = null;
  private CharacterField fieldH02FLGMAS = null;
  private CharacterField fieldH02FLGWK1 = null;
  private CharacterField fieldH02FLGWK2 = null;
  private CharacterField fieldH02FLGWK3 = null;
  private CharacterField fieldE02CACBNK = null;
  private DecimalField fieldE02CACNCU = null;
  private CharacterField fieldE02CACTCA = null;
  private CharacterField fieldD02CACTCA = null;
  private CharacterField fieldE02CANCOM = null;
  private CharacterField fieldD02CANCOM = null;
  private DecimalField fieldE02CANCKN = null;
  private DecimalField fieldE02CANACK = null;
  private DecimalField fieldE02CANAMT = null;
  private DecimalField fieldE02NUMREC = null;
  private CharacterField fieldE02INDOPE = null;

  /**
  * Constructor for EDD096202Message.
  */
  public EDD096202Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 208;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH02USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H02USERID");
    fields[1] = fieldH02PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H02PROGRM");
    fields[2] = fieldH02TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H02TIMSYS");
    fields[3] = fieldH02SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H02SCRCOD");
    fields[4] = fieldH02OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H02OPECOD");
    fields[5] = fieldH02FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H02FLGMAS");
    fields[6] = fieldH02FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H02FLGWK1");
    fields[7] = fieldH02FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H02FLGWK2");
    fields[8] = fieldH02FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H02FLGWK3");
    fields[9] = fieldE02CACBNK =
    new CharacterField(message, HEADERSIZE + 42, 2, "E02CACBNK");
    fields[10] = fieldE02CACNCU =
    new DecimalField(message, HEADERSIZE + 44, 13, 0, "E02CACNCU");
    fields[11] = fieldE02CACTCA =
    new CharacterField(message, HEADERSIZE + 57, 2, "E02CACTCA");
    fields[12] = fieldD02CACTCA =
    new CharacterField(message, HEADERSIZE + 59, 45, "D02CACTCA");
    fields[13] = fieldE02CANCOM =
    new CharacterField(message, HEADERSIZE + 104, 4, "E02CANCOM");
    fields[14] = fieldD02CANCOM =
    new CharacterField(message, HEADERSIZE + 108, 45, "D02CANCOM");
    fields[15] = fieldE02CANCKN =
    new DecimalField(message, HEADERSIZE + 153, 12, 0, "E02CANCKN");
    fields[16] = fieldE02CANACK =
    new DecimalField(message, HEADERSIZE + 165, 17, 0, "E02CANACK");
    fields[17] = fieldE02CANAMT =
    new DecimalField(message, HEADERSIZE + 182, 17, 2, "E02CANAMT");
    fields[18] = fieldE02NUMREC =
    new DecimalField(message, HEADERSIZE + 199, 8, 0, "E02NUMREC");
    fields[19] = fieldE02INDOPE =
    new CharacterField(message, HEADERSIZE + 207, 1, "E02INDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H02USERID using a String value.
  */
  public void setH02USERID(String newvalue)
  {
    fieldH02USERID.setString(newvalue);
  }

  /**
  * Get value of field H02USERID as a String.
  */
  public String getH02USERID()
  {
    return fieldH02USERID.getString();
  }

  /**
  * Set field H02PROGRM using a String value.
  */
  public void setH02PROGRM(String newvalue)
  {
    fieldH02PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H02PROGRM as a String.
  */
  public String getH02PROGRM()
  {
    return fieldH02PROGRM.getString();
  }

  /**
  * Set field H02TIMSYS using a String value.
  */
  public void setH02TIMSYS(String newvalue)
  {
    fieldH02TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H02TIMSYS as a String.
  */
  public String getH02TIMSYS()
  {
    return fieldH02TIMSYS.getString();
  }

  /**
  * Set field H02SCRCOD using a String value.
  */
  public void setH02SCRCOD(String newvalue)
  {
    fieldH02SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H02SCRCOD as a String.
  */
  public String getH02SCRCOD()
  {
    return fieldH02SCRCOD.getString();
  }

  /**
  * Set field H02OPECOD using a String value.
  */
  public void setH02OPECOD(String newvalue)
  {
    fieldH02OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H02OPECOD as a String.
  */
  public String getH02OPECOD()
  {
    return fieldH02OPECOD.getString();
  }

  /**
  * Set field H02FLGMAS using a String value.
  */
  public void setH02FLGMAS(String newvalue)
  {
    fieldH02FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H02FLGMAS as a String.
  */
  public String getH02FLGMAS()
  {
    return fieldH02FLGMAS.getString();
  }

  /**
  * Set field H02FLGWK1 using a String value.
  */
  public void setH02FLGWK1(String newvalue)
  {
    fieldH02FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK1 as a String.
  */
  public String getH02FLGWK1()
  {
    return fieldH02FLGWK1.getString();
  }

  /**
  * Set field H02FLGWK2 using a String value.
  */
  public void setH02FLGWK2(String newvalue)
  {
    fieldH02FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK2 as a String.
  */
  public String getH02FLGWK2()
  {
    return fieldH02FLGWK2.getString();
  }

  /**
  * Set field H02FLGWK3 using a String value.
  */
  public void setH02FLGWK3(String newvalue)
  {
    fieldH02FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK3 as a String.
  */
  public String getH02FLGWK3()
  {
    return fieldH02FLGWK3.getString();
  }

  /**
  * Set field E02CACBNK using a String value.
  */
  public void setE02CACBNK(String newvalue)
  {
    fieldE02CACBNK.setString(newvalue);
  }

  /**
  * Get value of field E02CACBNK as a String.
  */
  public String getE02CACBNK()
  {
    return fieldE02CACBNK.getString();
  }

  /**
  * Set field E02CACNCU using a String value.
  */
  public void setE02CACNCU(String newvalue)
  {
    fieldE02CACNCU.setString(newvalue);
  }

  /**
  * Get value of field E02CACNCU as a String.
  */
  public String getE02CACNCU()
  {
    return fieldE02CACNCU.getString();
  }

  /**
  * Set numeric field E02CACNCU using a BigDecimal value.
  */
  public void setE02CACNCU(BigDecimal newvalue)
  {
    fieldE02CACNCU.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02CACNCU as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02CACNCU()
  {
    return fieldE02CACNCU.getBigDecimal();
  }

  /**
  * Set field E02CACTCA using a String value.
  */
  public void setE02CACTCA(String newvalue)
  {
    fieldE02CACTCA.setString(newvalue);
  }

  /**
  * Get value of field E02CACTCA as a String.
  */
  public String getE02CACTCA()
  {
    return fieldE02CACTCA.getString();
  }

  /**
  * Set field D02CACTCA using a String value.
  */
  public void setD02CACTCA(String newvalue)
  {
    fieldD02CACTCA.setString(newvalue);
  }

  /**
  * Get value of field D02CACTCA as a String.
  */
  public String getD02CACTCA()
  {
    return fieldD02CACTCA.getString();
  }

  /**
  * Set field E02CANCOM using a String value.
  */
  public void setE02CANCOM(String newvalue)
  {
    fieldE02CANCOM.setString(newvalue);
  }

  /**
  * Get value of field E02CANCOM as a String.
  */
  public String getE02CANCOM()
  {
    return fieldE02CANCOM.getString();
  }

  /**
  * Set field D02CANCOM using a String value.
  */
  public void setD02CANCOM(String newvalue)
  {
    fieldD02CANCOM.setString(newvalue);
  }

  /**
  * Get value of field D02CANCOM as a String.
  */
  public String getD02CANCOM()
  {
    return fieldD02CANCOM.getString();
  }

  /**
  * Set field E02CANCKN using a String value.
  */
  public void setE02CANCKN(String newvalue)
  {
    fieldE02CANCKN.setString(newvalue);
  }

  /**
  * Get value of field E02CANCKN as a String.
  */
  public String getE02CANCKN()
  {
    return fieldE02CANCKN.getString();
  }

  /**
  * Set numeric field E02CANCKN using a BigDecimal value.
  */
  public void setE02CANCKN(BigDecimal newvalue)
  {
    fieldE02CANCKN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02CANCKN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02CANCKN()
  {
    return fieldE02CANCKN.getBigDecimal();
  }

  /**
  * Set field E02CANACK using a String value.
  */
  public void setE02CANACK(String newvalue)
  {
    fieldE02CANACK.setString(newvalue);
  }

  /**
  * Get value of field E02CANACK as a String.
  */
  public String getE02CANACK()
  {
    return fieldE02CANACK.getString();
  }

  /**
  * Set numeric field E02CANACK using a BigDecimal value.
  */
  public void setE02CANACK(BigDecimal newvalue)
  {
    fieldE02CANACK.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02CANACK as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02CANACK()
  {
    return fieldE02CANACK.getBigDecimal();
  }

  /**
  * Set field E02CANAMT using a String value.
  */
  public void setE02CANAMT(String newvalue)
  {
    fieldE02CANAMT.setString(newvalue);
  }

  /**
  * Get value of field E02CANAMT as a String.
  */
  public String getE02CANAMT()
  {
    return fieldE02CANAMT.getString();
  }

  /**
  * Set numeric field E02CANAMT using a BigDecimal value.
  */
  public void setE02CANAMT(BigDecimal newvalue)
  {
    fieldE02CANAMT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02CANAMT as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02CANAMT()
  {
    return fieldE02CANAMT.getBigDecimal();
  }

  /**
  * Set field E02NUMREC using a String value.
  */
  public void setE02NUMREC(String newvalue)
  {
    fieldE02NUMREC.setString(newvalue);
  }

  /**
  * Get value of field E02NUMREC as a String.
  */
  public String getE02NUMREC()
  {
    return fieldE02NUMREC.getString();
  }

  /**
  * Set numeric field E02NUMREC using a BigDecimal value.
  */
  public void setE02NUMREC(BigDecimal newvalue)
  {
    fieldE02NUMREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02NUMREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02NUMREC()
  {
    return fieldE02NUMREC.getBigDecimal();
  }

  /**
  * Set field E02INDOPE using a String value.
  */
  public void setE02INDOPE(String newvalue)
  {
    fieldE02INDOPE.setString(newvalue);
  }

  /**
  * Get value of field E02INDOPE as a String.
  */
  public String getE02INDOPE()
  {
    return fieldE02INDOPE.getString();
  }

}

package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0418DS physical file definition.
* 
* File level identifier is 1130611113508.
* Record format level identifier is 5210282A03CFB.
*/

public class EWD0418DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EWDCOD",
                                     "EWDDSC",
                                     "EWDPRG",
                                     "EWDSTS",
                                     "EWDAGE",
                                     "EWDUSR",
                                     "EWDOPE"
                                   };
  final static String tnames[] = {
                                   "EWDCOD",
                                   "EWDDSC",
                                   "EWDPRG",
                                   "EWDSTS",
                                   "EWDAGE",
                                   "EWDUSR",
                                   "EWDOPE"
                                 };
  final static String fid = "1130611113508";
  final static String rid = "5210282A03CFB";
  final static String fmtname = "EWD0418DS";
  final int FIELDCOUNT = 7;
  private static Hashtable tlookup = new Hashtable();
  private DecimalField fieldEWDCOD = null;
  private CharacterField fieldEWDDSC = null;
  private CharacterField fieldEWDPRG = null;
  private CharacterField fieldEWDSTS = null;
  private CharacterField fieldEWDAGE = null;
  private CharacterField fieldEWDUSR = null;
  private CharacterField fieldEWDOPE = null;

  /**
  * Constructor for EWD0418DSMessage.
  */
  public EWD0418DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 63;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEWDCOD =
    new DecimalField(message, HEADERSIZE + 0, 4, 0, "EWDCOD");
    fields[1] = fieldEWDDSC =
    new CharacterField(message, HEADERSIZE + 4, 45, "EWDDSC");
    fields[2] = fieldEWDPRG =
    new CharacterField(message, HEADERSIZE + 49, 10, "EWDPRG");
    fields[3] = fieldEWDSTS =
    new CharacterField(message, HEADERSIZE + 59, 1, "EWDSTS");
    fields[4] = fieldEWDAGE =
    new CharacterField(message, HEADERSIZE + 60, 1, "EWDAGE");
    fields[5] = fieldEWDUSR =
    new CharacterField(message, HEADERSIZE + 61, 1, "EWDUSR");
    fields[6] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 62, 1, "EWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EWDCOD using a String value.
  */
  public void setEWDCOD(String newvalue)
  {
    fieldEWDCOD.setString(newvalue);
  }

  /**
  * Get value of field EWDCOD as a String.
  */
  public String getEWDCOD()
  {
    return fieldEWDCOD.getString();
  }

  /**
  * Set numeric field EWDCOD using a BigDecimal value.
  */
  public void setEWDCOD(BigDecimal newvalue)
  {
    fieldEWDCOD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDCOD as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDCOD()
  {
    return fieldEWDCOD.getBigDecimal();
  }

  /**
  * Set field EWDDSC using a String value.
  */
  public void setEWDDSC(String newvalue)
  {
    fieldEWDDSC.setString(newvalue);
  }

  /**
  * Get value of field EWDDSC as a String.
  */
  public String getEWDDSC()
  {
    return fieldEWDDSC.getString();
  }

  /**
  * Set field EWDPRG using a String value.
  */
  public void setEWDPRG(String newvalue)
  {
    fieldEWDPRG.setString(newvalue);
  }

  /**
  * Get value of field EWDPRG as a String.
  */
  public String getEWDPRG()
  {
    return fieldEWDPRG.getString();
  }

  /**
  * Set field EWDSTS using a String value.
  */
  public void setEWDSTS(String newvalue)
  {
    fieldEWDSTS.setString(newvalue);
  }

  /**
  * Get value of field EWDSTS as a String.
  */
  public String getEWDSTS()
  {
    return fieldEWDSTS.getString();
  }

  /**
  * Set field EWDAGE using a String value.
  */
  public void setEWDAGE(String newvalue)
  {
    fieldEWDAGE.setString(newvalue);
  }

  /**
  * Get value of field EWDAGE as a String.
  */
  public String getEWDAGE()
  {
    return fieldEWDAGE.getString();
  }

  /**
  * Set field EWDUSR using a String value.
  */
  public void setEWDUSR(String newvalue)
  {
    fieldEWDUSR.setString(newvalue);
  }

  /**
  * Get value of field EWDUSR as a String.
  */
  public String getEWDUSR()
  {
    return fieldEWDUSR.getString();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

}

package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EDD081201 physical file definition.
* 
* File level identifier is 1130611112902.
* Record format level identifier is 3EB4EAEAE8AC5.
*/

public class EDD081201Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USERID",
                                     "H01PROGRM",
                                     "H01TIMSYS",
                                     "H01SCRCOD",
                                     "H01OPECOD",
                                     "H01FLGMAS",
                                     "H01FLGWK1",
                                     "H01FLGWK2",
                                     "H01FLGWK3",
                                     "E01MDEBNK",
                                     "E01MDEBRN",
                                     "E01MDEACC",
                                     "E01MDECUN",
                                     "E01MDENA1",
                                     "E01MDESTS",
                                     "E01MDELMM",
                                     "E01MDELMD",
                                     "E01MDELMY",
                                     "E01MDELMT",
                                     "E01MDELMU"
                                   };
  final static String tnames[] = {
                                   "H01USERID",
                                   "H01PROGRM",
                                   "H01TIMSYS",
                                   "H01SCRCOD",
                                   "H01OPECOD",
                                   "H01FLGMAS",
                                   "H01FLGWK1",
                                   "H01FLGWK2",
                                   "H01FLGWK3",
                                   "E01MDEBNK",
                                   "E01MDEBRN",
                                   "E01MDEACC",
                                   "E01MDECUN",
                                   "E01MDENA1",
                                   "E01MDESTS",
                                   "E01MDELMM",
                                   "E01MDELMD",
                                   "E01MDELMY",
                                   "E01MDELMT",
                                   "E01MDELMU"
                                 };
  final static String fid = "1130611112902";
  final static String rid = "3EB4EAEAE8AC5";
  final static String fmtname = "EDD081201";
  final int FIELDCOUNT = 20;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USERID = null;
  private CharacterField fieldH01PROGRM = null;
  private CharacterField fieldH01TIMSYS = null;
  private CharacterField fieldH01SCRCOD = null;
  private CharacterField fieldH01OPECOD = null;
  private CharacterField fieldH01FLGMAS = null;
  private CharacterField fieldH01FLGWK1 = null;
  private CharacterField fieldH01FLGWK2 = null;
  private CharacterField fieldH01FLGWK3 = null;
  private CharacterField fieldE01MDEBNK = null;
  private DecimalField fieldE01MDEBRN = null;
  private DecimalField fieldE01MDEACC = null;
  private DecimalField fieldE01MDECUN = null;
  private CharacterField fieldE01MDENA1 = null;
  private CharacterField fieldE01MDESTS = null;
  private DecimalField fieldE01MDELMM = null;
  private DecimalField fieldE01MDELMD = null;
  private DecimalField fieldE01MDELMY = null;
  private CharacterField fieldE01MDELMT = null;
  private CharacterField fieldE01MDELMU = null;

  /**
  * Constructor for EDD081201Message.
  */
  public EDD081201Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 180;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USERID");
    fields[1] = fieldH01PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PROGRM");
    fields[2] = fieldH01TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIMSYS");
    fields[3] = fieldH01SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCRCOD");
    fields[4] = fieldH01OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPECOD");
    fields[5] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01FLGMAS");
    fields[6] = fieldH01FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01FLGWK1");
    fields[7] = fieldH01FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01FLGWK2");
    fields[8] = fieldH01FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01FLGWK3");
    fields[9] = fieldE01MDEBNK =
    new CharacterField(message, HEADERSIZE + 42, 2, "E01MDEBNK");
    fields[10] = fieldE01MDEBRN =
    new DecimalField(message, HEADERSIZE + 44, 5, 0, "E01MDEBRN");
    fields[11] = fieldE01MDEACC =
    new DecimalField(message, HEADERSIZE + 49, 13, 0, "E01MDEACC");
    fields[12] = fieldE01MDECUN =
    new DecimalField(message, HEADERSIZE + 62, 10, 0, "E01MDECUN");
    fields[13] = fieldE01MDENA1 =
    new CharacterField(message, HEADERSIZE + 72, 60, "E01MDENA1");
    fields[14] = fieldE01MDESTS =
    new CharacterField(message, HEADERSIZE + 132, 1, "E01MDESTS");
    fields[15] = fieldE01MDELMM =
    new DecimalField(message, HEADERSIZE + 133, 3, 0, "E01MDELMM");
    fields[16] = fieldE01MDELMD =
    new DecimalField(message, HEADERSIZE + 136, 3, 0, "E01MDELMD");
    fields[17] = fieldE01MDELMY =
    new DecimalField(message, HEADERSIZE + 139, 5, 0, "E01MDELMY");
    fields[18] = fieldE01MDELMT =
    new CharacterField(message, HEADERSIZE + 144, 26, "E01MDELMT");
    fields[19] = fieldE01MDELMU =
    new CharacterField(message, HEADERSIZE + 170, 10, "E01MDELMU");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USERID using a String value.
  */
  public void setH01USERID(String newvalue)
  {
    fieldH01USERID.setString(newvalue);
  }

  /**
  * Get value of field H01USERID as a String.
  */
  public String getH01USERID()
  {
    return fieldH01USERID.getString();
  }

  /**
  * Set field H01PROGRM using a String value.
  */
  public void setH01PROGRM(String newvalue)
  {
    fieldH01PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H01PROGRM as a String.
  */
  public String getH01PROGRM()
  {
    return fieldH01PROGRM.getString();
  }

  /**
  * Set field H01TIMSYS using a String value.
  */
  public void setH01TIMSYS(String newvalue)
  {
    fieldH01TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H01TIMSYS as a String.
  */
  public String getH01TIMSYS()
  {
    return fieldH01TIMSYS.getString();
  }

  /**
  * Set field H01SCRCOD using a String value.
  */
  public void setH01SCRCOD(String newvalue)
  {
    fieldH01SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H01SCRCOD as a String.
  */
  public String getH01SCRCOD()
  {
    return fieldH01SCRCOD.getString();
  }

  /**
  * Set field H01OPECOD using a String value.
  */
  public void setH01OPECOD(String newvalue)
  {
    fieldH01OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H01OPECOD as a String.
  */
  public String getH01OPECOD()
  {
    return fieldH01OPECOD.getString();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

  /**
  * Set field H01FLGWK1 using a String value.
  */
  public void setH01FLGWK1(String newvalue)
  {
    fieldH01FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK1 as a String.
  */
  public String getH01FLGWK1()
  {
    return fieldH01FLGWK1.getString();
  }

  /**
  * Set field H01FLGWK2 using a String value.
  */
  public void setH01FLGWK2(String newvalue)
  {
    fieldH01FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK2 as a String.
  */
  public String getH01FLGWK2()
  {
    return fieldH01FLGWK2.getString();
  }

  /**
  * Set field H01FLGWK3 using a String value.
  */
  public void setH01FLGWK3(String newvalue)
  {
    fieldH01FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK3 as a String.
  */
  public String getH01FLGWK3()
  {
    return fieldH01FLGWK3.getString();
  }

  /**
  * Set field E01MDEBNK using a String value.
  */
  public void setE01MDEBNK(String newvalue)
  {
    fieldE01MDEBNK.setString(newvalue);
  }

  /**
  * Get value of field E01MDEBNK as a String.
  */
  public String getE01MDEBNK()
  {
    return fieldE01MDEBNK.getString();
  }

  /**
  * Set field E01MDEBRN using a String value.
  */
  public void setE01MDEBRN(String newvalue)
  {
    fieldE01MDEBRN.setString(newvalue);
  }

  /**
  * Get value of field E01MDEBRN as a String.
  */
  public String getE01MDEBRN()
  {
    return fieldE01MDEBRN.getString();
  }

  /**
  * Set numeric field E01MDEBRN using a BigDecimal value.
  */
  public void setE01MDEBRN(BigDecimal newvalue)
  {
    fieldE01MDEBRN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01MDEBRN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01MDEBRN()
  {
    return fieldE01MDEBRN.getBigDecimal();
  }

  /**
  * Set field E01MDEACC using a String value.
  */
  public void setE01MDEACC(String newvalue)
  {
    fieldE01MDEACC.setString(newvalue);
  }

  /**
  * Get value of field E01MDEACC as a String.
  */
  public String getE01MDEACC()
  {
    return fieldE01MDEACC.getString();
  }

  /**
  * Set numeric field E01MDEACC using a BigDecimal value.
  */
  public void setE01MDEACC(BigDecimal newvalue)
  {
    fieldE01MDEACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01MDEACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01MDEACC()
  {
    return fieldE01MDEACC.getBigDecimal();
  }

  /**
  * Set field E01MDECUN using a String value.
  */
  public void setE01MDECUN(String newvalue)
  {
    fieldE01MDECUN.setString(newvalue);
  }

  /**
  * Get value of field E01MDECUN as a String.
  */
  public String getE01MDECUN()
  {
    return fieldE01MDECUN.getString();
  }

  /**
  * Set numeric field E01MDECUN using a BigDecimal value.
  */
  public void setE01MDECUN(BigDecimal newvalue)
  {
    fieldE01MDECUN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01MDECUN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01MDECUN()
  {
    return fieldE01MDECUN.getBigDecimal();
  }

  /**
  * Set field E01MDENA1 using a String value.
  */
  public void setE01MDENA1(String newvalue)
  {
    fieldE01MDENA1.setString(newvalue);
  }

  /**
  * Get value of field E01MDENA1 as a String.
  */
  public String getE01MDENA1()
  {
    return fieldE01MDENA1.getString();
  }

  /**
  * Set field E01MDESTS using a String value.
  */
  public void setE01MDESTS(String newvalue)
  {
    fieldE01MDESTS.setString(newvalue);
  }

  /**
  * Get value of field E01MDESTS as a String.
  */
  public String getE01MDESTS()
  {
    return fieldE01MDESTS.getString();
  }

  /**
  * Set field E01MDELMM using a String value.
  */
  public void setE01MDELMM(String newvalue)
  {
    fieldE01MDELMM.setString(newvalue);
  }

  /**
  * Get value of field E01MDELMM as a String.
  */
  public String getE01MDELMM()
  {
    return fieldE01MDELMM.getString();
  }

  /**
  * Set numeric field E01MDELMM using a BigDecimal value.
  */
  public void setE01MDELMM(BigDecimal newvalue)
  {
    fieldE01MDELMM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01MDELMM as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01MDELMM()
  {
    return fieldE01MDELMM.getBigDecimal();
  }

  /**
  * Set field E01MDELMD using a String value.
  */
  public void setE01MDELMD(String newvalue)
  {
    fieldE01MDELMD.setString(newvalue);
  }

  /**
  * Get value of field E01MDELMD as a String.
  */
  public String getE01MDELMD()
  {
    return fieldE01MDELMD.getString();
  }

  /**
  * Set numeric field E01MDELMD using a BigDecimal value.
  */
  public void setE01MDELMD(BigDecimal newvalue)
  {
    fieldE01MDELMD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01MDELMD as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01MDELMD()
  {
    return fieldE01MDELMD.getBigDecimal();
  }

  /**
  * Set field E01MDELMY using a String value.
  */
  public void setE01MDELMY(String newvalue)
  {
    fieldE01MDELMY.setString(newvalue);
  }

  /**
  * Get value of field E01MDELMY as a String.
  */
  public String getE01MDELMY()
  {
    return fieldE01MDELMY.getString();
  }

  /**
  * Set numeric field E01MDELMY using a BigDecimal value.
  */
  public void setE01MDELMY(BigDecimal newvalue)
  {
    fieldE01MDELMY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01MDELMY as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01MDELMY()
  {
    return fieldE01MDELMY.getBigDecimal();
  }

  /**
  * Set field E01MDELMT using a String value.
  */
  public void setE01MDELMT(String newvalue)
  {
    fieldE01MDELMT.setString(newvalue);
  }

  /**
  * Get value of field E01MDELMT as a String.
  */
  public String getE01MDELMT()
  {
    return fieldE01MDELMT.getString();
  }

  /**
  * Set field E01MDELMU using a String value.
  */
  public void setE01MDELMU(String newvalue)
  {
    fieldE01MDELMU.setString(newvalue);
  }

  /**
  * Get value of field E01MDELMU as a String.
  */
  public String getE01MDELMU()
  {
    return fieldE01MDELMU.getString();
  }

}

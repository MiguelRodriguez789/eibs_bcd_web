package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EFRM00045 physical file definition.
* 
* File level identifier is 1110819094850.
* Record format level identifier is 32D7878D92FA7.
*/

public class EFRM00045Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H45USERID",
                                     "H45PROGRM",
                                     "H45TIMSYS",
                                     "H45SCRCOD",
                                     "H45OPECOD",
                                     "H45FLGMAS",
                                     "H45FLGWK1",
                                     "H45FLGWK2",
                                     "H45FLGWK3",
                                     "E45OFFDN",
                                     "E45OFFISD",
                                     "E45OFFISM",
                                     "E45OFFISY",
                                     "E45OFFMAD",
                                     "E45OFFMAM",
                                     "E45OFFMAY",
                                     "E45OFFDSC",
                                     "E45OFFCUC",
                                     "E45OFFCUP",
                                     "E45OFFCUH",
                                     "E45OFFAMN",
                                     "E45OFFCOM"
                                   };
  final static String tnames[] = {
                                   "H45USERID",
                                   "H45PROGRM",
                                   "H45TIMSYS",
                                   "H45SCRCOD",
                                   "H45OPECOD",
                                   "H45FLGMAS",
                                   "H45FLGWK1",
                                   "H45FLGWK2",
                                   "H45FLGWK3",
                                   "E45OFFDN",
                                   "E45OFFISD",
                                   "E45OFFISM",
                                   "E45OFFISY",
                                   "E45OFFMAD",
                                   "E45OFFMAM",
                                   "E45OFFMAY",
                                   "E45OFFDSC",
                                   "E45OFFCUC",
                                   "E45OFFCUP",
                                   "E45OFFCUH",
                                   "E45OFFAMN",
                                   "E45OFFCOM"
                                 };
  final static String fid = "1110819094850";
  final static String rid = "32D7878D92FA7";
  final static String fmtname = "EFRM00045";
  final int FIELDCOUNT = 22;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH45USERID = null;
  private CharacterField fieldH45PROGRM = null;
  private CharacterField fieldH45TIMSYS = null;
  private CharacterField fieldH45SCRCOD = null;
  private CharacterField fieldH45OPECOD = null;
  private CharacterField fieldH45FLGMAS = null;
  private CharacterField fieldH45FLGWK1 = null;
  private CharacterField fieldH45FLGWK2 = null;
  private CharacterField fieldH45FLGWK3 = null;
  private CharacterField fieldE45OFFDN = null;
  private DecimalField fieldE45OFFISD = null;
  private DecimalField fieldE45OFFISM = null;
  private DecimalField fieldE45OFFISY = null;
  private DecimalField fieldE45OFFMAD = null;
  private DecimalField fieldE45OFFMAM = null;
  private DecimalField fieldE45OFFMAY = null;
  private CharacterField fieldE45OFFDSC = null;
  private DecimalField fieldE45OFFCUC = null;
  private CharacterField fieldE45OFFCUP = null;
  private CharacterField fieldE45OFFCUH = null;
  private DecimalField fieldE45OFFAMN = null;
  private DecimalField fieldE45OFFCOM = null;

  /**
  * Constructor for EFRM00045Message.
  */
  public EFRM00045Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 184;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH45USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H45USERID");
    fields[1] = fieldH45PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H45PROGRM");
    fields[2] = fieldH45TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H45TIMSYS");
    fields[3] = fieldH45SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H45SCRCOD");
    fields[4] = fieldH45OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H45OPECOD");
    fields[5] = fieldH45FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H45FLGMAS");
    fields[6] = fieldH45FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H45FLGWK1");
    fields[7] = fieldH45FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H45FLGWK2");
    fields[8] = fieldH45FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H45FLGWK3");
    fields[9] = fieldE45OFFDN =
    new CharacterField(message, HEADERSIZE + 42, 30, "E45OFFDN");
    fields[10] = fieldE45OFFISD =
    new DecimalField(message, HEADERSIZE + 72, 3, 0, "E45OFFISD");
    fields[11] = fieldE45OFFISM =
    new DecimalField(message, HEADERSIZE + 75, 3, 0, "E45OFFISM");
    fields[12] = fieldE45OFFISY =
    new DecimalField(message, HEADERSIZE + 78, 3, 0, "E45OFFISY");
    fields[13] = fieldE45OFFMAD =
    new DecimalField(message, HEADERSIZE + 81, 3, 0, "E45OFFMAD");
    fields[14] = fieldE45OFFMAM =
    new DecimalField(message, HEADERSIZE + 84, 3, 0, "E45OFFMAM");
    fields[15] = fieldE45OFFMAY =
    new DecimalField(message, HEADERSIZE + 87, 3, 0, "E45OFFMAY");
    fields[16] = fieldE45OFFDSC =
    new CharacterField(message, HEADERSIZE + 90, 30, "E45OFFDSC");
    fields[17] = fieldE45OFFCUC =
    new DecimalField(message, HEADERSIZE + 120, 10, 0, "E45OFFCUC");
    fields[18] = fieldE45OFFCUP =
    new CharacterField(message, HEADERSIZE + 130, 10, "E45OFFCUP");
    fields[19] = fieldE45OFFCUH =
    new CharacterField(message, HEADERSIZE + 140, 10, "E45OFFCUH");
    fields[20] = fieldE45OFFAMN =
    new DecimalField(message, HEADERSIZE + 150, 17, 2, "E45OFFAMN");
    fields[21] = fieldE45OFFCOM =
    new DecimalField(message, HEADERSIZE + 167, 17, 2, "E45OFFCOM");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H45USERID using a String value.
  */
  public void setH45USERID(String newvalue)
  {
    fieldH45USERID.setString(newvalue);
  }

  /**
  * Get value of field H45USERID as a String.
  */
  public String getH45USERID()
  {
    return fieldH45USERID.getString();
  }

  /**
  * Set field H45PROGRM using a String value.
  */
  public void setH45PROGRM(String newvalue)
  {
    fieldH45PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H45PROGRM as a String.
  */
  public String getH45PROGRM()
  {
    return fieldH45PROGRM.getString();
  }

  /**
  * Set field H45TIMSYS using a String value.
  */
  public void setH45TIMSYS(String newvalue)
  {
    fieldH45TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H45TIMSYS as a String.
  */
  public String getH45TIMSYS()
  {
    return fieldH45TIMSYS.getString();
  }

  /**
  * Set field H45SCRCOD using a String value.
  */
  public void setH45SCRCOD(String newvalue)
  {
    fieldH45SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H45SCRCOD as a String.
  */
  public String getH45SCRCOD()
  {
    return fieldH45SCRCOD.getString();
  }

  /**
  * Set field H45OPECOD using a String value.
  */
  public void setH45OPECOD(String newvalue)
  {
    fieldH45OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H45OPECOD as a String.
  */
  public String getH45OPECOD()
  {
    return fieldH45OPECOD.getString();
  }

  /**
  * Set field H45FLGMAS using a String value.
  */
  public void setH45FLGMAS(String newvalue)
  {
    fieldH45FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H45FLGMAS as a String.
  */
  public String getH45FLGMAS()
  {
    return fieldH45FLGMAS.getString();
  }

  /**
  * Set field H45FLGWK1 using a String value.
  */
  public void setH45FLGWK1(String newvalue)
  {
    fieldH45FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H45FLGWK1 as a String.
  */
  public String getH45FLGWK1()
  {
    return fieldH45FLGWK1.getString();
  }

  /**
  * Set field H45FLGWK2 using a String value.
  */
  public void setH45FLGWK2(String newvalue)
  {
    fieldH45FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H45FLGWK2 as a String.
  */
  public String getH45FLGWK2()
  {
    return fieldH45FLGWK2.getString();
  }

  /**
  * Set field H45FLGWK3 using a String value.
  */
  public void setH45FLGWK3(String newvalue)
  {
    fieldH45FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H45FLGWK3 as a String.
  */
  public String getH45FLGWK3()
  {
    return fieldH45FLGWK3.getString();
  }

  /**
  * Set field E45OFFDN using a String value.
  */
  public void setE45OFFDN(String newvalue)
  {
    fieldE45OFFDN.setString(newvalue);
  }

  /**
  * Get value of field E45OFFDN as a String.
  */
  public String getE45OFFDN()
  {
    return fieldE45OFFDN.getString();
  }

  /**
  * Set field E45OFFISD using a String value.
  */
  public void setE45OFFISD(String newvalue)
  {
    fieldE45OFFISD.setString(newvalue);
  }

  /**
  * Get value of field E45OFFISD as a String.
  */
  public String getE45OFFISD()
  {
    return fieldE45OFFISD.getString();
  }

  /**
  * Set numeric field E45OFFISD using a BigDecimal value.
  */
  public void setE45OFFISD(BigDecimal newvalue)
  {
    fieldE45OFFISD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E45OFFISD as a BigDecimal.
  */
  public BigDecimal getBigDecimalE45OFFISD()
  {
    return fieldE45OFFISD.getBigDecimal();
  }

  /**
  * Set field E45OFFISM using a String value.
  */
  public void setE45OFFISM(String newvalue)
  {
    fieldE45OFFISM.setString(newvalue);
  }

  /**
  * Get value of field E45OFFISM as a String.
  */
  public String getE45OFFISM()
  {
    return fieldE45OFFISM.getString();
  }

  /**
  * Set numeric field E45OFFISM using a BigDecimal value.
  */
  public void setE45OFFISM(BigDecimal newvalue)
  {
    fieldE45OFFISM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E45OFFISM as a BigDecimal.
  */
  public BigDecimal getBigDecimalE45OFFISM()
  {
    return fieldE45OFFISM.getBigDecimal();
  }

  /**
  * Set field E45OFFISY using a String value.
  */
  public void setE45OFFISY(String newvalue)
  {
    fieldE45OFFISY.setString(newvalue);
  }

  /**
  * Get value of field E45OFFISY as a String.
  */
  public String getE45OFFISY()
  {
    return fieldE45OFFISY.getString();
  }

  /**
  * Set numeric field E45OFFISY using a BigDecimal value.
  */
  public void setE45OFFISY(BigDecimal newvalue)
  {
    fieldE45OFFISY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E45OFFISY as a BigDecimal.
  */
  public BigDecimal getBigDecimalE45OFFISY()
  {
    return fieldE45OFFISY.getBigDecimal();
  }

  /**
  * Set field E45OFFMAD using a String value.
  */
  public void setE45OFFMAD(String newvalue)
  {
    fieldE45OFFMAD.setString(newvalue);
  }

  /**
  * Get value of field E45OFFMAD as a String.
  */
  public String getE45OFFMAD()
  {
    return fieldE45OFFMAD.getString();
  }

  /**
  * Set numeric field E45OFFMAD using a BigDecimal value.
  */
  public void setE45OFFMAD(BigDecimal newvalue)
  {
    fieldE45OFFMAD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E45OFFMAD as a BigDecimal.
  */
  public BigDecimal getBigDecimalE45OFFMAD()
  {
    return fieldE45OFFMAD.getBigDecimal();
  }

  /**
  * Set field E45OFFMAM using a String value.
  */
  public void setE45OFFMAM(String newvalue)
  {
    fieldE45OFFMAM.setString(newvalue);
  }

  /**
  * Get value of field E45OFFMAM as a String.
  */
  public String getE45OFFMAM()
  {
    return fieldE45OFFMAM.getString();
  }

  /**
  * Set numeric field E45OFFMAM using a BigDecimal value.
  */
  public void setE45OFFMAM(BigDecimal newvalue)
  {
    fieldE45OFFMAM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E45OFFMAM as a BigDecimal.
  */
  public BigDecimal getBigDecimalE45OFFMAM()
  {
    return fieldE45OFFMAM.getBigDecimal();
  }

  /**
  * Set field E45OFFMAY using a String value.
  */
  public void setE45OFFMAY(String newvalue)
  {
    fieldE45OFFMAY.setString(newvalue);
  }

  /**
  * Get value of field E45OFFMAY as a String.
  */
  public String getE45OFFMAY()
  {
    return fieldE45OFFMAY.getString();
  }

  /**
  * Set numeric field E45OFFMAY using a BigDecimal value.
  */
  public void setE45OFFMAY(BigDecimal newvalue)
  {
    fieldE45OFFMAY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E45OFFMAY as a BigDecimal.
  */
  public BigDecimal getBigDecimalE45OFFMAY()
  {
    return fieldE45OFFMAY.getBigDecimal();
  }

  /**
  * Set field E45OFFDSC using a String value.
  */
  public void setE45OFFDSC(String newvalue)
  {
    fieldE45OFFDSC.setString(newvalue);
  }

  /**
  * Get value of field E45OFFDSC as a String.
  */
  public String getE45OFFDSC()
  {
    return fieldE45OFFDSC.getString();
  }

  /**
  * Set field E45OFFCUC using a String value.
  */
  public void setE45OFFCUC(String newvalue)
  {
    fieldE45OFFCUC.setString(newvalue);
  }

  /**
  * Get value of field E45OFFCUC as a String.
  */
  public String getE45OFFCUC()
  {
    return fieldE45OFFCUC.getString();
  }

  /**
  * Set numeric field E45OFFCUC using a BigDecimal value.
  */
  public void setE45OFFCUC(BigDecimal newvalue)
  {
    fieldE45OFFCUC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E45OFFCUC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE45OFFCUC()
  {
    return fieldE45OFFCUC.getBigDecimal();
  }

  /**
  * Set field E45OFFCUP using a String value.
  */
  public void setE45OFFCUP(String newvalue)
  {
    fieldE45OFFCUP.setString(newvalue);
  }

  /**
  * Get value of field E45OFFCUP as a String.
  */
  public String getE45OFFCUP()
  {
    return fieldE45OFFCUP.getString();
  }

  /**
  * Set field E45OFFCUH using a String value.
  */
  public void setE45OFFCUH(String newvalue)
  {
    fieldE45OFFCUH.setString(newvalue);
  }

  /**
  * Get value of field E45OFFCUH as a String.
  */
  public String getE45OFFCUH()
  {
    return fieldE45OFFCUH.getString();
  }

  /**
  * Set field E45OFFAMN using a String value.
  */
  public void setE45OFFAMN(String newvalue)
  {
    fieldE45OFFAMN.setString(newvalue);
  }

  /**
  * Get value of field E45OFFAMN as a String.
  */
  public String getE45OFFAMN()
  {
    return fieldE45OFFAMN.getString();
  }

  /**
  * Set numeric field E45OFFAMN using a BigDecimal value.
  */
  public void setE45OFFAMN(BigDecimal newvalue)
  {
    fieldE45OFFAMN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E45OFFAMN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE45OFFAMN()
  {
    return fieldE45OFFAMN.getBigDecimal();
  }

  /**
  * Set field E45OFFCOM using a String value.
  */
  public void setE45OFFCOM(String newvalue)
  {
    fieldE45OFFCOM.setString(newvalue);
  }

  /**
  * Get value of field E45OFFCOM as a String.
  */
  public String getE45OFFCOM()
  {
    return fieldE45OFFCOM.getString();
  }

  /**
  * Set numeric field E45OFFCOM using a BigDecimal value.
  */
  public void setE45OFFCOM(BigDecimal newvalue)
  {
    fieldE45OFFCOM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E45OFFCOM as a BigDecimal.
  */
  public BigDecimal getBigDecimalE45OFFCOM()
  {
    return fieldE45OFFCOM.getBigDecimal();
  }

}

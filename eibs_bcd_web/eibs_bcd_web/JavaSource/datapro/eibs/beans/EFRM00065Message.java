package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EFRM00065 physical file definition.
* 
* File level identifier is 1170202115307.
* Record format level identifier is 3E0672614CE27.
*/

public class EFRM00065Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "E65SGRNUM",
                                     "E65SGRCUN",
                                     "E65SGRPLZ",
                                     "E65SGRCNM",
                                     "E65SGRSCD",
                                     "E65SGRSNM",
                                     "E65SGRFTS",
                                     "E65SGRDTS",
                                     "E65SGRPLN",
                                     "E65SGRMTP",
                                     "E65FLGMAS"
                                   };
  final static String tnames[] = {
                                   "Num.Propuesta",
                                   "Num.Cliente",
                                   "Num.Poliza",
                                   "Nombre.Compania",
                                   "Codigo.Seguro",
                                   "Nombre.Seguro",
                                   "Tipo.Seguros",
                                   "Desc.TipoSeg",
                                   "numero.Plan",
                                   "Monto.Prima",
                                   "*flgMas"
                                 };
  final static String fid = "1170202115307";
  final static String rid = "3E0672614CE27";
  final static String fmtname = "EFRM00065";
  final int FIELDCOUNT = 11;
  private static Hashtable tlookup = new Hashtable();
  private DecimalField fieldE65SGRNUM = null;
  private DecimalField fieldE65SGRCUN = null;
  private CharacterField fieldE65SGRPLZ = null;
  private CharacterField fieldE65SGRCNM = null;
  private CharacterField fieldE65SGRSCD = null;
  private CharacterField fieldE65SGRSNM = null;
  private CharacterField fieldE65SGRFTS = null;
  private CharacterField fieldE65SGRDTS = null;
  private DecimalField fieldE65SGRPLN = null;
  private DecimalField fieldE65SGRMTP = null;
  private CharacterField fieldE65FLGMAS = null;

  /**
  * Constructor for EFRM00065Message.
  */
  public EFRM00065Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 184;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldE65SGRNUM =
    new DecimalField(message, HEADERSIZE + 0, 13, 0, "Num.Propuesta");
    fields[1] = fieldE65SGRCUN =
    new DecimalField(message, HEADERSIZE + 13, 10, 0, "Num.Cliente");
    fields[2] = fieldE65SGRPLZ =
    new CharacterField(message, HEADERSIZE + 23, 20, "Num.Poliza");
    fields[3] = fieldE65SGRCNM =
    new CharacterField(message, HEADERSIZE + 43, 45, "Nombre.Compania");
    fields[4] = fieldE65SGRSCD =
    new CharacterField(message, HEADERSIZE + 88, 4, "Codigo.Seguro");
    fields[5] = fieldE65SGRSNM =
    new CharacterField(message, HEADERSIZE + 92, 45, "Nombre.Seguro");
    fields[6] = fieldE65SGRFTS =
    new CharacterField(message, HEADERSIZE + 137, 1, "Tipo.Seguros");
    fields[7] = fieldE65SGRDTS =
    new CharacterField(message, HEADERSIZE + 138, 25, "Desc.TipoSeg");
    fields[8] = fieldE65SGRPLN =
    new DecimalField(message, HEADERSIZE + 163, 3, 0, "numero.Plan");
    fields[9] = fieldE65SGRMTP =
    new DecimalField(message, HEADERSIZE + 166, 17, 2, "Monto.Prima");
    fields[10] = fieldE65FLGMAS =
    new CharacterField(message, HEADERSIZE + 183, 1, "*flgMas");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field E65SGRNUM using a String value.
  */
  public void setE65SGRNUM(String newvalue)
  {
    fieldE65SGRNUM.setString(newvalue);
  }

  /**
  * Get value of field E65SGRNUM as a String.
  */
  public String getE65SGRNUM()
  {
    return fieldE65SGRNUM.getString();
  }

  /**
  * Set numeric field E65SGRNUM using a BigDecimal value.
  */
  public void setE65SGRNUM(BigDecimal newvalue)
  {
    fieldE65SGRNUM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E65SGRNUM as a BigDecimal.
  */
  public BigDecimal getBigDecimalE65SGRNUM()
  {
    return fieldE65SGRNUM.getBigDecimal();
  }

  /**
  * Set field E65SGRCUN using a String value.
  */
  public void setE65SGRCUN(String newvalue)
  {
    fieldE65SGRCUN.setString(newvalue);
  }

  /**
  * Get value of field E65SGRCUN as a String.
  */
  public String getE65SGRCUN()
  {
    return fieldE65SGRCUN.getString();
  }

  /**
  * Set numeric field E65SGRCUN using a BigDecimal value.
  */
  public void setE65SGRCUN(BigDecimal newvalue)
  {
    fieldE65SGRCUN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E65SGRCUN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE65SGRCUN()
  {
    return fieldE65SGRCUN.getBigDecimal();
  }

  /**
  * Set field E65SGRPLZ using a String value.
  */
  public void setE65SGRPLZ(String newvalue)
  {
    fieldE65SGRPLZ.setString(newvalue);
  }

  /**
  * Get value of field E65SGRPLZ as a String.
  */
  public String getE65SGRPLZ()
  {
    return fieldE65SGRPLZ.getString();
  }

  /**
  * Set field E65SGRCNM using a String value.
  */
  public void setE65SGRCNM(String newvalue)
  {
    fieldE65SGRCNM.setString(newvalue);
  }

  /**
  * Get value of field E65SGRCNM as a String.
  */
  public String getE65SGRCNM()
  {
    return fieldE65SGRCNM.getString();
  }

  /**
  * Set field E65SGRSCD using a String value.
  */
  public void setE65SGRSCD(String newvalue)
  {
    fieldE65SGRSCD.setString(newvalue);
  }

  /**
  * Get value of field E65SGRSCD as a String.
  */
  public String getE65SGRSCD()
  {
    return fieldE65SGRSCD.getString();
  }

  /**
  * Set field E65SGRSNM using a String value.
  */
  public void setE65SGRSNM(String newvalue)
  {
    fieldE65SGRSNM.setString(newvalue);
  }

  /**
  * Get value of field E65SGRSNM as a String.
  */
  public String getE65SGRSNM()
  {
    return fieldE65SGRSNM.getString();
  }

  /**
  * Set field E65SGRFTS using a String value.
  */
  public void setE65SGRFTS(String newvalue)
  {
    fieldE65SGRFTS.setString(newvalue);
  }

  /**
  * Get value of field E65SGRFTS as a String.
  */
  public String getE65SGRFTS()
  {
    return fieldE65SGRFTS.getString();
  }

  /**
  * Set field E65SGRDTS using a String value.
  */
  public void setE65SGRDTS(String newvalue)
  {
    fieldE65SGRDTS.setString(newvalue);
  }

  /**
  * Get value of field E65SGRDTS as a String.
  */
  public String getE65SGRDTS()
  {
    return fieldE65SGRDTS.getString();
  }

  /**
  * Set field E65SGRPLN using a String value.
  */
  public void setE65SGRPLN(String newvalue)
  {
    fieldE65SGRPLN.setString(newvalue);
  }

  /**
  * Get value of field E65SGRPLN as a String.
  */
  public String getE65SGRPLN()
  {
    return fieldE65SGRPLN.getString();
  }

  /**
  * Set numeric field E65SGRPLN using a BigDecimal value.
  */
  public void setE65SGRPLN(BigDecimal newvalue)
  {
    fieldE65SGRPLN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E65SGRPLN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE65SGRPLN()
  {
    return fieldE65SGRPLN.getBigDecimal();
  }

  /**
  * Set field E65SGRMTP using a String value.
  */
  public void setE65SGRMTP(String newvalue)
  {
    fieldE65SGRMTP.setString(newvalue);
  }

  /**
  * Get value of field E65SGRMTP as a String.
  */
  public String getE65SGRMTP()
  {
    return fieldE65SGRMTP.getString();
  }

  /**
  * Set numeric field E65SGRMTP using a BigDecimal value.
  */
  public void setE65SGRMTP(BigDecimal newvalue)
  {
    fieldE65SGRMTP.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E65SGRMTP as a BigDecimal.
  */
  public BigDecimal getBigDecimalE65SGRMTP()
  {
    return fieldE65SGRMTP.getBigDecimal();
  }

  /**
  * Set field E65FLGMAS using a String value.
  */
  public void setE65FLGMAS(String newvalue)
  {
    fieldE65FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field E65FLGMAS as a String.
  */
  public String getE65FLGMAS()
  {
    return fieldE65FLGMAS.getString();
  }

}

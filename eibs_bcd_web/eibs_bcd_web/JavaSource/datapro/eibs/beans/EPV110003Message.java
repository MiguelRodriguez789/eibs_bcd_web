package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EPV110003 physical file definition.
* 
* File level identifier is 1161101130721.
* Record format level identifier is 32B5EC6CA897F.
*/

public class EPV110003Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H03USERID",
                                     "H03PROGRM",
                                     "H03TIMSYS",
                                     "H03SCRCOD",
                                     "H03OPECOD",
                                     "H03FLGMAS",
                                     "H03FLGWK1",
                                     "H03FLGWK2",
                                     "H03FLGWK3",
                                     "E03ORGBNK",
                                     "E03ORGCCY",
                                     "E03ORGAMT",
                                     "E03ORGEXR",
                                     "E03PURSAL",
                                     "E03DSTBNK",
                                     "E03DSTCCY",
                                     "E03DSTAMT",
                                     "E03DSTEXR",
                                     "E03BSEAMT",
                                     "E03RTETYP"
                                   };
  final static String tnames[] = {
                                   "H03USERID",
                                   "H03PROGRM",
                                   "H03TIMSYS",
                                   "H03SCRCOD",
                                   "H03OPECOD",
                                   "H03FLGMAS",
                                   "H03FLGWK1",
                                   "H03FLGWK2",
                                   "H03FLGWK3",
                                   "E03ORGBNK",
                                   "E03ORGCCY",
                                   "E03ORGAMT",
                                   "E03ORGEXR",
                                   "E03PURSAL",
                                   "E03DSTBNK",
                                   "E03DSTCCY",
                                   "E03DSTAMT",
                                   "E03DSTEXR",
                                   "E03BSEAMT",
                                   "E03RTETYP"
                                 };
  final static String fid = "1161101130721";
  final static String rid = "32B5EC6CA897F";
  final static String fmtname = "EPV110003";
  final int FIELDCOUNT = 20;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH03USERID = null;
  private CharacterField fieldH03PROGRM = null;
  private CharacterField fieldH03TIMSYS = null;
  private CharacterField fieldH03SCRCOD = null;
  private CharacterField fieldH03OPECOD = null;
  private CharacterField fieldH03FLGMAS = null;
  private CharacterField fieldH03FLGWK1 = null;
  private CharacterField fieldH03FLGWK2 = null;
  private CharacterField fieldH03FLGWK3 = null;
  private CharacterField fieldE03ORGBNK = null;
  private CharacterField fieldE03ORGCCY = null;
  private DecimalField fieldE03ORGAMT = null;
  private DecimalField fieldE03ORGEXR = null;
  private CharacterField fieldE03PURSAL = null;
  private CharacterField fieldE03DSTBNK = null;
  private CharacterField fieldE03DSTCCY = null;
  private DecimalField fieldE03DSTAMT = null;
  private DecimalField fieldE03DSTEXR = null;
  private DecimalField fieldE03BSEAMT = null;
  private CharacterField fieldE03RTETYP = null;

  /**
  * Constructor for EPV110003Message.
  */
  public EPV110003Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 131;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH03USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H03USERID");
    fields[1] = fieldH03PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H03PROGRM");
    fields[2] = fieldH03TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H03TIMSYS");
    fields[3] = fieldH03SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H03SCRCOD");
    fields[4] = fieldH03OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H03OPECOD");
    fields[5] = fieldH03FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H03FLGMAS");
    fields[6] = fieldH03FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H03FLGWK1");
    fields[7] = fieldH03FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H03FLGWK2");
    fields[8] = fieldH03FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H03FLGWK3");
    fields[9] = fieldE03ORGBNK =
    new CharacterField(message, HEADERSIZE + 42, 2, "E03ORGBNK");
    fields[10] = fieldE03ORGCCY =
    new CharacterField(message, HEADERSIZE + 44, 3, "E03ORGCCY");
    fields[11] = fieldE03ORGAMT =
    new DecimalField(message, HEADERSIZE + 47, 17, 2, "E03ORGAMT");
    fields[12] = fieldE03ORGEXR =
    new DecimalField(message, HEADERSIZE + 64, 13, 6, "E03ORGEXR");
    fields[13] = fieldE03PURSAL =
    new CharacterField(message, HEADERSIZE + 77, 1, "E03PURSAL");
    fields[14] = fieldE03DSTBNK =
    new CharacterField(message, HEADERSIZE + 78, 2, "E03DSTBNK");
    fields[15] = fieldE03DSTCCY =
    new CharacterField(message, HEADERSIZE + 80, 3, "E03DSTCCY");
    fields[16] = fieldE03DSTAMT =
    new DecimalField(message, HEADERSIZE + 83, 17, 2, "E03DSTAMT");
    fields[17] = fieldE03DSTEXR =
    new DecimalField(message, HEADERSIZE + 100, 13, 6, "E03DSTEXR");
    fields[18] = fieldE03BSEAMT =
    new DecimalField(message, HEADERSIZE + 113, 17, 2, "E03BSEAMT");
    fields[19] = fieldE03RTETYP =
    new CharacterField(message, HEADERSIZE + 130, 1, "E03RTETYP");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H03USERID using a String value.
  */
  public void setH03USERID(String newvalue)
  {
    fieldH03USERID.setString(newvalue);
  }

  /**
  * Get value of field H03USERID as a String.
  */
  public String getH03USERID()
  {
    return fieldH03USERID.getString();
  }

  /**
  * Set field H03PROGRM using a String value.
  */
  public void setH03PROGRM(String newvalue)
  {
    fieldH03PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H03PROGRM as a String.
  */
  public String getH03PROGRM()
  {
    return fieldH03PROGRM.getString();
  }

  /**
  * Set field H03TIMSYS using a String value.
  */
  public void setH03TIMSYS(String newvalue)
  {
    fieldH03TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H03TIMSYS as a String.
  */
  public String getH03TIMSYS()
  {
    return fieldH03TIMSYS.getString();
  }

  /**
  * Set field H03SCRCOD using a String value.
  */
  public void setH03SCRCOD(String newvalue)
  {
    fieldH03SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H03SCRCOD as a String.
  */
  public String getH03SCRCOD()
  {
    return fieldH03SCRCOD.getString();
  }

  /**
  * Set field H03OPECOD using a String value.
  */
  public void setH03OPECOD(String newvalue)
  {
    fieldH03OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H03OPECOD as a String.
  */
  public String getH03OPECOD()
  {
    return fieldH03OPECOD.getString();
  }

  /**
  * Set field H03FLGMAS using a String value.
  */
  public void setH03FLGMAS(String newvalue)
  {
    fieldH03FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H03FLGMAS as a String.
  */
  public String getH03FLGMAS()
  {
    return fieldH03FLGMAS.getString();
  }

  /**
  * Set field H03FLGWK1 using a String value.
  */
  public void setH03FLGWK1(String newvalue)
  {
    fieldH03FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H03FLGWK1 as a String.
  */
  public String getH03FLGWK1()
  {
    return fieldH03FLGWK1.getString();
  }

  /**
  * Set field H03FLGWK2 using a String value.
  */
  public void setH03FLGWK2(String newvalue)
  {
    fieldH03FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H03FLGWK2 as a String.
  */
  public String getH03FLGWK2()
  {
    return fieldH03FLGWK2.getString();
  }

  /**
  * Set field H03FLGWK3 using a String value.
  */
  public void setH03FLGWK3(String newvalue)
  {
    fieldH03FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H03FLGWK3 as a String.
  */
  public String getH03FLGWK3()
  {
    return fieldH03FLGWK3.getString();
  }

  /**
  * Set field E03ORGBNK using a String value.
  */
  public void setE03ORGBNK(String newvalue)
  {
    fieldE03ORGBNK.setString(newvalue);
  }

  /**
  * Get value of field E03ORGBNK as a String.
  */
  public String getE03ORGBNK()
  {
    return fieldE03ORGBNK.getString();
  }

  /**
  * Set field E03ORGCCY using a String value.
  */
  public void setE03ORGCCY(String newvalue)
  {
    fieldE03ORGCCY.setString(newvalue);
  }

  /**
  * Get value of field E03ORGCCY as a String.
  */
  public String getE03ORGCCY()
  {
    return fieldE03ORGCCY.getString();
  }

  /**
  * Set field E03ORGAMT using a String value.
  */
  public void setE03ORGAMT(String newvalue)
  {
    fieldE03ORGAMT.setString(newvalue);
  }

  /**
  * Get value of field E03ORGAMT as a String.
  */
  public String getE03ORGAMT()
  {
    return fieldE03ORGAMT.getString();
  }

  /**
  * Set numeric field E03ORGAMT using a BigDecimal value.
  */
  public void setE03ORGAMT(BigDecimal newvalue)
  {
    fieldE03ORGAMT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E03ORGAMT as a BigDecimal.
  */
  public BigDecimal getBigDecimalE03ORGAMT()
  {
    return fieldE03ORGAMT.getBigDecimal();
  }

  /**
  * Set field E03ORGEXR using a String value.
  */
  public void setE03ORGEXR(String newvalue)
  {
    fieldE03ORGEXR.setString(newvalue);
  }

  /**
  * Get value of field E03ORGEXR as a String.
  */
  public String getE03ORGEXR()
  {
    return fieldE03ORGEXR.getString();
  }

  /**
  * Set numeric field E03ORGEXR using a BigDecimal value.
  */
  public void setE03ORGEXR(BigDecimal newvalue)
  {
    fieldE03ORGEXR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E03ORGEXR as a BigDecimal.
  */
  public BigDecimal getBigDecimalE03ORGEXR()
  {
    return fieldE03ORGEXR.getBigDecimal();
  }

  /**
  * Set field E03PURSAL using a String value.
  */
  public void setE03PURSAL(String newvalue)
  {
    fieldE03PURSAL.setString(newvalue);
  }

  /**
  * Get value of field E03PURSAL as a String.
  */
  public String getE03PURSAL()
  {
    return fieldE03PURSAL.getString();
  }

  /**
  * Set field E03DSTBNK using a String value.
  */
  public void setE03DSTBNK(String newvalue)
  {
    fieldE03DSTBNK.setString(newvalue);
  }

  /**
  * Get value of field E03DSTBNK as a String.
  */
  public String getE03DSTBNK()
  {
    return fieldE03DSTBNK.getString();
  }

  /**
  * Set field E03DSTCCY using a String value.
  */
  public void setE03DSTCCY(String newvalue)
  {
    fieldE03DSTCCY.setString(newvalue);
  }

  /**
  * Get value of field E03DSTCCY as a String.
  */
  public String getE03DSTCCY()
  {
    return fieldE03DSTCCY.getString();
  }

  /**
  * Set field E03DSTAMT using a String value.
  */
  public void setE03DSTAMT(String newvalue)
  {
    fieldE03DSTAMT.setString(newvalue);
  }

  /**
  * Get value of field E03DSTAMT as a String.
  */
  public String getE03DSTAMT()
  {
    return fieldE03DSTAMT.getString();
  }

  /**
  * Set numeric field E03DSTAMT using a BigDecimal value.
  */
  public void setE03DSTAMT(BigDecimal newvalue)
  {
    fieldE03DSTAMT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E03DSTAMT as a BigDecimal.
  */
  public BigDecimal getBigDecimalE03DSTAMT()
  {
    return fieldE03DSTAMT.getBigDecimal();
  }

  /**
  * Set field E03DSTEXR using a String value.
  */
  public void setE03DSTEXR(String newvalue)
  {
    fieldE03DSTEXR.setString(newvalue);
  }

  /**
  * Get value of field E03DSTEXR as a String.
  */
  public String getE03DSTEXR()
  {
    return fieldE03DSTEXR.getString();
  }

  /**
  * Set numeric field E03DSTEXR using a BigDecimal value.
  */
  public void setE03DSTEXR(BigDecimal newvalue)
  {
    fieldE03DSTEXR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E03DSTEXR as a BigDecimal.
  */
  public BigDecimal getBigDecimalE03DSTEXR()
  {
    return fieldE03DSTEXR.getBigDecimal();
  }

  /**
  * Set field E03BSEAMT using a String value.
  */
  public void setE03BSEAMT(String newvalue)
  {
    fieldE03BSEAMT.setString(newvalue);
  }

  /**
  * Get value of field E03BSEAMT as a String.
  */
  public String getE03BSEAMT()
  {
    return fieldE03BSEAMT.getString();
  }

  /**
  * Set numeric field E03BSEAMT using a BigDecimal value.
  */
  public void setE03BSEAMT(BigDecimal newvalue)
  {
    fieldE03BSEAMT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E03BSEAMT as a BigDecimal.
  */
  public BigDecimal getBigDecimalE03BSEAMT()
  {
    return fieldE03BSEAMT.getBigDecimal();
  }

  /**
  * Set field E03RTETYP using a String value.
  */
  public void setE03RTETYP(String newvalue)
  {
    fieldE03RTETYP.setString(newvalue);
  }

  /**
  * Get value of field E03RTETYP as a String.
  */
  public String getE03RTETYP()
  {
    return fieldE03RTETYP.getString();
  }

}

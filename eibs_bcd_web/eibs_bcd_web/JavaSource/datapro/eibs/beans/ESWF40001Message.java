package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ESWF40001 physical file definition.
* 
* File level identifier is 1160712124105.
* Record format level identifier is 369491A80EB02.
*/

public class ESWF40001Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USERID",
                                     "H01PROGRM",
                                     "H01TIMSYS",
                                     "H01SCRCOD",
                                     "H01OPECOD",
                                     "H01FLGMAS",
                                     "H01FLGWK1",
                                     "H01FLGWK2",
                                     "H01FLGWK3",
                                     "E01LCOACC",
                                     "E01LCOSEQ",
                                     "E01LCOREF",
                                     "E01LCORLR",
                                     "E01LCOUSR",
                                     "E01LCOSRI",
                                     "E01LCOFMT",
                                     "E01LCOMDM",
                                     "E01LCOMDD",
                                     "E01LCOMDY",
                                     "E01LCOSTS",
                                     "E01MSGTXT"
                                   };
  final static String tnames[] = {
                                   "H01USERID",
                                   "H01PROGRM",
                                   "H01TIMSYS",
                                   "H01SCRCOD",
                                   "H01OPECOD",
                                   "H01FLGMAS",
                                   "H01FLGWK1",
                                   "H01FLGWK2",
                                   "H01FLGWK3",
                                   "E01LCOACC",
                                   "E01LCOSEQ",
                                   "E01LCOREF",
                                   "E01LCORLR",
                                   "E01LCOUSR",
                                   "E01LCOSRI",
                                   "E01LCOFMT",
                                   "E01LCOMDM",
                                   "E01LCOMDD",
                                   "E01LCOMDY",
                                   "E01LCOSTS",
                                   "E01MSGTXT"
                                 };
  final static String fid = "1160712124105";
  final static String rid = "369491A80EB02";
  final static String fmtname = "ESWF40001";
  final int FIELDCOUNT = 21;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USERID = null;
  private CharacterField fieldH01PROGRM = null;
  private CharacterField fieldH01TIMSYS = null;
  private CharacterField fieldH01SCRCOD = null;
  private CharacterField fieldH01OPECOD = null;
  private CharacterField fieldH01FLGMAS = null;
  private CharacterField fieldH01FLGWK1 = null;
  private CharacterField fieldH01FLGWK2 = null;
  private CharacterField fieldH01FLGWK3 = null;
  private DecimalField fieldE01LCOACC = null;
  private DecimalField fieldE01LCOSEQ = null;
  private CharacterField fieldE01LCOREF = null;
  private CharacterField fieldE01LCORLR = null;
  private CharacterField fieldE01LCOUSR = null;
  private CharacterField fieldE01LCOSRI = null;
  private DecimalField fieldE01LCOFMT = null;
  private DecimalField fieldE01LCOMDM = null;
  private DecimalField fieldE01LCOMDD = null;
  private DecimalField fieldE01LCOMDY = null;
  private CharacterField fieldE01LCOSTS = null;
  private CharacterField fieldE01MSGTXT = null;

  /**
  * Constructor for ESWF40001Message.
  */
  public ESWF40001Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 641;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USERID");
    fields[1] = fieldH01PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PROGRM");
    fields[2] = fieldH01TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIMSYS");
    fields[3] = fieldH01SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCRCOD");
    fields[4] = fieldH01OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPECOD");
    fields[5] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01FLGMAS");
    fields[6] = fieldH01FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01FLGWK1");
    fields[7] = fieldH01FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01FLGWK2");
    fields[8] = fieldH01FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01FLGWK3");
    fields[9] = fieldE01LCOACC =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "E01LCOACC");
    fields[10] = fieldE01LCOSEQ =
    new DecimalField(message, HEADERSIZE + 55, 4, 0, "E01LCOSEQ");
    fields[11] = fieldE01LCOREF =
    new CharacterField(message, HEADERSIZE + 59, 16, "E01LCOREF");
    fields[12] = fieldE01LCORLR =
    new CharacterField(message, HEADERSIZE + 75, 16, "E01LCORLR");
    fields[13] = fieldE01LCOUSR =
    new CharacterField(message, HEADERSIZE + 91, 10, "E01LCOUSR");
    fields[14] = fieldE01LCOSRI =
    new CharacterField(message, HEADERSIZE + 101, 12, "E01LCOSRI");
    fields[15] = fieldE01LCOFMT =
    new DecimalField(message, HEADERSIZE + 113, 4, 0, "E01LCOFMT");
    fields[16] = fieldE01LCOMDM =
    new DecimalField(message, HEADERSIZE + 117, 3, 0, "E01LCOMDM");
    fields[17] = fieldE01LCOMDD =
    new DecimalField(message, HEADERSIZE + 120, 3, 0, "E01LCOMDD");
    fields[18] = fieldE01LCOMDY =
    new DecimalField(message, HEADERSIZE + 123, 5, 0, "E01LCOMDY");
    fields[19] = fieldE01LCOSTS =
    new CharacterField(message, HEADERSIZE + 128, 1, "E01LCOSTS");
    fields[20] = fieldE01MSGTXT =
    new CharacterField(message, HEADERSIZE + 129, 512, "E01MSGTXT");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USERID using a String value.
  */
  public void setH01USERID(String newvalue)
  {
    fieldH01USERID.setString(newvalue);
  }

  /**
  * Get value of field H01USERID as a String.
  */
  public String getH01USERID()
  {
    return fieldH01USERID.getString();
  }

  /**
  * Set field H01PROGRM using a String value.
  */
  public void setH01PROGRM(String newvalue)
  {
    fieldH01PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H01PROGRM as a String.
  */
  public String getH01PROGRM()
  {
    return fieldH01PROGRM.getString();
  }

  /**
  * Set field H01TIMSYS using a String value.
  */
  public void setH01TIMSYS(String newvalue)
  {
    fieldH01TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H01TIMSYS as a String.
  */
  public String getH01TIMSYS()
  {
    return fieldH01TIMSYS.getString();
  }

  /**
  * Set field H01SCRCOD using a String value.
  */
  public void setH01SCRCOD(String newvalue)
  {
    fieldH01SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H01SCRCOD as a String.
  */
  public String getH01SCRCOD()
  {
    return fieldH01SCRCOD.getString();
  }

  /**
  * Set field H01OPECOD using a String value.
  */
  public void setH01OPECOD(String newvalue)
  {
    fieldH01OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H01OPECOD as a String.
  */
  public String getH01OPECOD()
  {
    return fieldH01OPECOD.getString();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

  /**
  * Set field H01FLGWK1 using a String value.
  */
  public void setH01FLGWK1(String newvalue)
  {
    fieldH01FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK1 as a String.
  */
  public String getH01FLGWK1()
  {
    return fieldH01FLGWK1.getString();
  }

  /**
  * Set field H01FLGWK2 using a String value.
  */
  public void setH01FLGWK2(String newvalue)
  {
    fieldH01FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK2 as a String.
  */
  public String getH01FLGWK2()
  {
    return fieldH01FLGWK2.getString();
  }

  /**
  * Set field H01FLGWK3 using a String value.
  */
  public void setH01FLGWK3(String newvalue)
  {
    fieldH01FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK3 as a String.
  */
  public String getH01FLGWK3()
  {
    return fieldH01FLGWK3.getString();
  }

  /**
  * Set field E01LCOACC using a String value.
  */
  public void setE01LCOACC(String newvalue)
  {
    fieldE01LCOACC.setString(newvalue);
  }

  /**
  * Get value of field E01LCOACC as a String.
  */
  public String getE01LCOACC()
  {
    return fieldE01LCOACC.getString();
  }

  /**
  * Set numeric field E01LCOACC using a BigDecimal value.
  */
  public void setE01LCOACC(BigDecimal newvalue)
  {
    fieldE01LCOACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01LCOACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01LCOACC()
  {
    return fieldE01LCOACC.getBigDecimal();
  }

  /**
  * Set field E01LCOSEQ using a String value.
  */
  public void setE01LCOSEQ(String newvalue)
  {
    fieldE01LCOSEQ.setString(newvalue);
  }

  /**
  * Get value of field E01LCOSEQ as a String.
  */
  public String getE01LCOSEQ()
  {
    return fieldE01LCOSEQ.getString();
  }

  /**
  * Set numeric field E01LCOSEQ using a BigDecimal value.
  */
  public void setE01LCOSEQ(BigDecimal newvalue)
  {
    fieldE01LCOSEQ.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01LCOSEQ as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01LCOSEQ()
  {
    return fieldE01LCOSEQ.getBigDecimal();
  }

  /**
  * Set field E01LCOREF using a String value.
  */
  public void setE01LCOREF(String newvalue)
  {
    fieldE01LCOREF.setString(newvalue);
  }

  /**
  * Get value of field E01LCOREF as a String.
  */
  public String getE01LCOREF()
  {
    return fieldE01LCOREF.getString();
  }

  /**
  * Set field E01LCORLR using a String value.
  */
  public void setE01LCORLR(String newvalue)
  {
    fieldE01LCORLR.setString(newvalue);
  }

  /**
  * Get value of field E01LCORLR as a String.
  */
  public String getE01LCORLR()
  {
    return fieldE01LCORLR.getString();
  }

  /**
  * Set field E01LCOUSR using a String value.
  */
  public void setE01LCOUSR(String newvalue)
  {
    fieldE01LCOUSR.setString(newvalue);
  }

  /**
  * Get value of field E01LCOUSR as a String.
  */
  public String getE01LCOUSR()
  {
    return fieldE01LCOUSR.getString();
  }

  /**
  * Set field E01LCOSRI using a String value.
  */
  public void setE01LCOSRI(String newvalue)
  {
    fieldE01LCOSRI.setString(newvalue);
  }

  /**
  * Get value of field E01LCOSRI as a String.
  */
  public String getE01LCOSRI()
  {
    return fieldE01LCOSRI.getString();
  }

  /**
  * Set field E01LCOFMT using a String value.
  */
  public void setE01LCOFMT(String newvalue)
  {
    fieldE01LCOFMT.setString(newvalue);
  }

  /**
  * Get value of field E01LCOFMT as a String.
  */
  public String getE01LCOFMT()
  {
    return fieldE01LCOFMT.getString();
  }

  /**
  * Set numeric field E01LCOFMT using a BigDecimal value.
  */
  public void setE01LCOFMT(BigDecimal newvalue)
  {
    fieldE01LCOFMT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01LCOFMT as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01LCOFMT()
  {
    return fieldE01LCOFMT.getBigDecimal();
  }

  /**
  * Set field E01LCOMDM using a String value.
  */
  public void setE01LCOMDM(String newvalue)
  {
    fieldE01LCOMDM.setString(newvalue);
  }

  /**
  * Get value of field E01LCOMDM as a String.
  */
  public String getE01LCOMDM()
  {
    return fieldE01LCOMDM.getString();
  }

  /**
  * Set numeric field E01LCOMDM using a BigDecimal value.
  */
  public void setE01LCOMDM(BigDecimal newvalue)
  {
    fieldE01LCOMDM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01LCOMDM as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01LCOMDM()
  {
    return fieldE01LCOMDM.getBigDecimal();
  }

  /**
  * Set field E01LCOMDD using a String value.
  */
  public void setE01LCOMDD(String newvalue)
  {
    fieldE01LCOMDD.setString(newvalue);
  }

  /**
  * Get value of field E01LCOMDD as a String.
  */
  public String getE01LCOMDD()
  {
    return fieldE01LCOMDD.getString();
  }

  /**
  * Set numeric field E01LCOMDD using a BigDecimal value.
  */
  public void setE01LCOMDD(BigDecimal newvalue)
  {
    fieldE01LCOMDD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01LCOMDD as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01LCOMDD()
  {
    return fieldE01LCOMDD.getBigDecimal();
  }

  /**
  * Set field E01LCOMDY using a String value.
  */
  public void setE01LCOMDY(String newvalue)
  {
    fieldE01LCOMDY.setString(newvalue);
  }

  /**
  * Get value of field E01LCOMDY as a String.
  */
  public String getE01LCOMDY()
  {
    return fieldE01LCOMDY.getString();
  }

  /**
  * Set numeric field E01LCOMDY using a BigDecimal value.
  */
  public void setE01LCOMDY(BigDecimal newvalue)
  {
    fieldE01LCOMDY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01LCOMDY as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01LCOMDY()
  {
    return fieldE01LCOMDY.getBigDecimal();
  }

  /**
  * Set field E01LCOSTS using a String value.
  */
  public void setE01LCOSTS(String newvalue)
  {
    fieldE01LCOSTS.setString(newvalue);
  }

  /**
  * Get value of field E01LCOSTS as a String.
  */
  public String getE01LCOSTS()
  {
    return fieldE01LCOSTS.getString();
  }

  /**
  * Set field E01MSGTXT using a String value.
  */
  public void setE01MSGTXT(String newvalue)
  {
    fieldE01MSGTXT.setString(newvalue);
  }

  /**
  * Get value of field E01MSGTXT as a String.
  */
  public String getE01MSGTXT()
  {
    return fieldE01MSGTXT.getString();
  }

}

package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EDL195001 physical file definition.
* 
* File level identifier is 1180221120201.
* Record format level identifier is 31651AF4F9947.
*/

public class EDL195001Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USERID",
                                     "H01PROGRM",
                                     "H01TIMSYS",
                                     "H01SCRCOD",
                                     "H01OPECOD",
                                     "H01FLGMAS",
                                     "H01FLGWK1",
                                     "H01FLGWK2",
                                     "H01FLGWK3",
                                     "E01DPHFIL",
                                     "E01DPHDTM",
                                     "E01DPHDTD",
                                     "E01DPHDTY",
                                     "E01DPHREF",
                                     "E01DPHRCN",
                                     "E01DPHAMT",
                                     "E01DPHPRC",
                                     "E01DPHMSG",
                                     "E01DPHLNE"
                                   };
  final static String tnames[] = {
                                   "H01USERID",
                                   "H01PROGRM",
                                   "H01TIMSYS",
                                   "H01SCRCOD",
                                   "H01OPECOD",
                                   "H01FLGMAS",
                                   "H01FLGWK1",
                                   "H01FLGWK2",
                                   "H01FLGWK3",
                                   "E01DPHFIL",
                                   "E01DPHDTM",
                                   "E01DPHDTD",
                                   "E01DPHDTY",
                                   "E01DPHREF",
                                   "E01DPHRCN",
                                   "E01DPHAMT",
                                   "E01DPHPRC",
                                   "E01DPHMSG",
                                   "E01DPHLNE"
                                 };
  final static String fid = "1180221120201";
  final static String rid = "31651AF4F9947";
  final static String fmtname = "EDL195001";
  final int FIELDCOUNT = 19;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USERID = null;
  private CharacterField fieldH01PROGRM = null;
  private CharacterField fieldH01TIMSYS = null;
  private CharacterField fieldH01SCRCOD = null;
  private CharacterField fieldH01OPECOD = null;
  private CharacterField fieldH01FLGMAS = null;
  private CharacterField fieldH01FLGWK1 = null;
  private CharacterField fieldH01FLGWK2 = null;
  private CharacterField fieldH01FLGWK3 = null;
  private CharacterField fieldE01DPHFIL = null;
  private DecimalField fieldE01DPHDTM = null;
  private DecimalField fieldE01DPHDTD = null;
  private DecimalField fieldE01DPHDTY = null;
  private DecimalField fieldE01DPHREF = null;
  private DecimalField fieldE01DPHRCN = null;
  private DecimalField fieldE01DPHAMT = null;
  private CharacterField fieldE01DPHPRC = null;
  private CharacterField fieldE01DPHMSG = null;
  private CharacterField fieldE01DPHLNE = null;

  /**
  * Constructor for EDL195001Message.
  */
  public EDL195001Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 1189;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USERID");
    fields[1] = fieldH01PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PROGRM");
    fields[2] = fieldH01TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIMSYS");
    fields[3] = fieldH01SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCRCOD");
    fields[4] = fieldH01OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPECOD");
    fields[5] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01FLGMAS");
    fields[6] = fieldH01FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01FLGWK1");
    fields[7] = fieldH01FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01FLGWK2");
    fields[8] = fieldH01FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01FLGWK3");
    fields[9] = fieldE01DPHFIL =
    new CharacterField(message, HEADERSIZE + 42, 50, "E01DPHFIL");
    fields[10] = fieldE01DPHDTM =
    new DecimalField(message, HEADERSIZE + 92, 3, 0, "E01DPHDTM");
    fields[11] = fieldE01DPHDTD =
    new DecimalField(message, HEADERSIZE + 95, 3, 0, "E01DPHDTD");
    fields[12] = fieldE01DPHDTY =
    new DecimalField(message, HEADERSIZE + 98, 5, 0, "E01DPHDTY");
    fields[13] = fieldE01DPHREF =
    new DecimalField(message, HEADERSIZE + 103, 13, 0, "E01DPHREF");
    fields[14] = fieldE01DPHRCN =
    new DecimalField(message, HEADERSIZE + 116, 6, 0, "E01DPHRCN");
    fields[15] = fieldE01DPHAMT =
    new DecimalField(message, HEADERSIZE + 122, 17, 2, "E01DPHAMT");
    fields[16] = fieldE01DPHPRC =
    new CharacterField(message, HEADERSIZE + 139, 1, "E01DPHPRC");
    fields[17] = fieldE01DPHMSG =
    new CharacterField(message, HEADERSIZE + 140, 50, "E01DPHMSG");
    fields[18] = fieldE01DPHLNE =
    new CharacterField(message, HEADERSIZE + 190, 999, "E01DPHLNE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USERID using a String value.
  */
  public void setH01USERID(String newvalue)
  {
    fieldH01USERID.setString(newvalue);
  }

  /**
  * Get value of field H01USERID as a String.
  */
  public String getH01USERID()
  {
    return fieldH01USERID.getString();
  }

  /**
  * Set field H01PROGRM using a String value.
  */
  public void setH01PROGRM(String newvalue)
  {
    fieldH01PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H01PROGRM as a String.
  */
  public String getH01PROGRM()
  {
    return fieldH01PROGRM.getString();
  }

  /**
  * Set field H01TIMSYS using a String value.
  */
  public void setH01TIMSYS(String newvalue)
  {
    fieldH01TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H01TIMSYS as a String.
  */
  public String getH01TIMSYS()
  {
    return fieldH01TIMSYS.getString();
  }

  /**
  * Set field H01SCRCOD using a String value.
  */
  public void setH01SCRCOD(String newvalue)
  {
    fieldH01SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H01SCRCOD as a String.
  */
  public String getH01SCRCOD()
  {
    return fieldH01SCRCOD.getString();
  }

  /**
  * Set field H01OPECOD using a String value.
  */
  public void setH01OPECOD(String newvalue)
  {
    fieldH01OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H01OPECOD as a String.
  */
  public String getH01OPECOD()
  {
    return fieldH01OPECOD.getString();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

  /**
  * Set field H01FLGWK1 using a String value.
  */
  public void setH01FLGWK1(String newvalue)
  {
    fieldH01FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK1 as a String.
  */
  public String getH01FLGWK1()
  {
    return fieldH01FLGWK1.getString();
  }

  /**
  * Set field H01FLGWK2 using a String value.
  */
  public void setH01FLGWK2(String newvalue)
  {
    fieldH01FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK2 as a String.
  */
  public String getH01FLGWK2()
  {
    return fieldH01FLGWK2.getString();
  }

  /**
  * Set field H01FLGWK3 using a String value.
  */
  public void setH01FLGWK3(String newvalue)
  {
    fieldH01FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK3 as a String.
  */
  public String getH01FLGWK3()
  {
    return fieldH01FLGWK3.getString();
  }

  /**
  * Set field E01DPHFIL using a String value.
  */
  public void setE01DPHFIL(String newvalue)
  {
    fieldE01DPHFIL.setString(newvalue);
  }

  /**
  * Get value of field E01DPHFIL as a String.
  */
  public String getE01DPHFIL()
  {
    return fieldE01DPHFIL.getString();
  }

  /**
  * Set field E01DPHDTM using a String value.
  */
  public void setE01DPHDTM(String newvalue)
  {
    fieldE01DPHDTM.setString(newvalue);
  }

  /**
  * Get value of field E01DPHDTM as a String.
  */
  public String getE01DPHDTM()
  {
    return fieldE01DPHDTM.getString();
  }

  /**
  * Set numeric field E01DPHDTM using a BigDecimal value.
  */
  public void setE01DPHDTM(BigDecimal newvalue)
  {
    fieldE01DPHDTM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01DPHDTM as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01DPHDTM()
  {
    return fieldE01DPHDTM.getBigDecimal();
  }

  /**
  * Set field E01DPHDTD using a String value.
  */
  public void setE01DPHDTD(String newvalue)
  {
    fieldE01DPHDTD.setString(newvalue);
  }

  /**
  * Get value of field E01DPHDTD as a String.
  */
  public String getE01DPHDTD()
  {
    return fieldE01DPHDTD.getString();
  }

  /**
  * Set numeric field E01DPHDTD using a BigDecimal value.
  */
  public void setE01DPHDTD(BigDecimal newvalue)
  {
    fieldE01DPHDTD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01DPHDTD as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01DPHDTD()
  {
    return fieldE01DPHDTD.getBigDecimal();
  }

  /**
  * Set field E01DPHDTY using a String value.
  */
  public void setE01DPHDTY(String newvalue)
  {
    fieldE01DPHDTY.setString(newvalue);
  }

  /**
  * Get value of field E01DPHDTY as a String.
  */
  public String getE01DPHDTY()
  {
    return fieldE01DPHDTY.getString();
  }

  /**
  * Set numeric field E01DPHDTY using a BigDecimal value.
  */
  public void setE01DPHDTY(BigDecimal newvalue)
  {
    fieldE01DPHDTY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01DPHDTY as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01DPHDTY()
  {
    return fieldE01DPHDTY.getBigDecimal();
  }

  /**
  * Set field E01DPHREF using a String value.
  */
  public void setE01DPHREF(String newvalue)
  {
    fieldE01DPHREF.setString(newvalue);
  }

  /**
  * Get value of field E01DPHREF as a String.
  */
  public String getE01DPHREF()
  {
    return fieldE01DPHREF.getString();
  }

  /**
  * Set numeric field E01DPHREF using a BigDecimal value.
  */
  public void setE01DPHREF(BigDecimal newvalue)
  {
    fieldE01DPHREF.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01DPHREF as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01DPHREF()
  {
    return fieldE01DPHREF.getBigDecimal();
  }

  /**
  * Set field E01DPHRCN using a String value.
  */
  public void setE01DPHRCN(String newvalue)
  {
    fieldE01DPHRCN.setString(newvalue);
  }

  /**
  * Get value of field E01DPHRCN as a String.
  */
  public String getE01DPHRCN()
  {
    return fieldE01DPHRCN.getString();
  }

  /**
  * Set numeric field E01DPHRCN using a BigDecimal value.
  */
  public void setE01DPHRCN(BigDecimal newvalue)
  {
    fieldE01DPHRCN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01DPHRCN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01DPHRCN()
  {
    return fieldE01DPHRCN.getBigDecimal();
  }

  /**
  * Set field E01DPHAMT using a String value.
  */
  public void setE01DPHAMT(String newvalue)
  {
    fieldE01DPHAMT.setString(newvalue);
  }

  /**
  * Get value of field E01DPHAMT as a String.
  */
  public String getE01DPHAMT()
  {
    return fieldE01DPHAMT.getString();
  }

  /**
  * Set numeric field E01DPHAMT using a BigDecimal value.
  */
  public void setE01DPHAMT(BigDecimal newvalue)
  {
    fieldE01DPHAMT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01DPHAMT as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01DPHAMT()
  {
    return fieldE01DPHAMT.getBigDecimal();
  }

  /**
  * Set field E01DPHPRC using a String value.
  */
  public void setE01DPHPRC(String newvalue)
  {
    fieldE01DPHPRC.setString(newvalue);
  }

  /**
  * Get value of field E01DPHPRC as a String.
  */
  public String getE01DPHPRC()
  {
    return fieldE01DPHPRC.getString();
  }

  /**
  * Set field E01DPHMSG using a String value.
  */
  public void setE01DPHMSG(String newvalue)
  {
    fieldE01DPHMSG.setString(newvalue);
  }

  /**
  * Get value of field E01DPHMSG as a String.
  */
  public String getE01DPHMSG()
  {
    return fieldE01DPHMSG.getString();
  }

  /**
  * Set field E01DPHLNE using a String value.
  */
  public void setE01DPHLNE(String newvalue)
  {
    fieldE01DPHLNE.setString(newvalue);
  }

  /**
  * Get value of field E01DPHLNE as a String.
  */
  public String getE01DPHLNE()
  {
    return fieldE01DPHLNE.getString();
  }

}

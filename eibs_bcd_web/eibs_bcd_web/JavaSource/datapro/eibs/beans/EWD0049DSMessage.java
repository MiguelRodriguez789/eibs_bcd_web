package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0049DS physical file definition.
* 
* File level identifier is 1161205105718.
* Record format level identifier is 4F6859D8EFE15.
*/

public class EWD0049DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EWDBNK",
                                     "EWDCDE",
                                     "EWDDSC",
                                     "EWDTYP",
                                     "EWDMTH",
                                     "EWDSTS",
                                     "EWDOMM",
                                     "EWDODD",
                                     "EWDOYY",
                                     "EWDOPE",
                                     "EWDUSR"
                                   };
  final static String tnames[] = {
                                   "EWDBNK",
                                   "EWDCDE",
                                   "EWDDSC",
                                   "EWDTYP",
                                   "EWDMTH",
                                   "EWDSTS",
                                   "EWDOMM",
                                   "EWDODD",
                                   "EWDOYY",
                                   "EWDOPE",
                                   "EWDUSR"
                                 };
  final static String fid = "1161205105718";
  final static String rid = "4F6859D8EFE15";
  final static String fmtname = "EWD0049DS";
  final int FIELDCOUNT = 11;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldEWDBNK = null;
  private CharacterField fieldEWDCDE = null;
  private CharacterField fieldEWDDSC = null;
  private CharacterField fieldEWDTYP = null;
  private CharacterField fieldEWDMTH = null;
  private CharacterField fieldEWDSTS = null;
  private DecimalField fieldEWDOMM = null;
  private DecimalField fieldEWDODD = null;
  private DecimalField fieldEWDOYY = null;
  private CharacterField fieldEWDOPE = null;
  private CharacterField fieldEWDUSR = null;

  /**
  * Constructor for EWD0049DSMessage.
  */
  public EWD0049DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 91;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEWDBNK =
    new CharacterField(message, HEADERSIZE + 0, 2, "EWDBNK");
    fields[1] = fieldEWDCDE =
    new CharacterField(message, HEADERSIZE + 2, 4, "EWDCDE");
    fields[2] = fieldEWDDSC =
    new CharacterField(message, HEADERSIZE + 6, 60, "EWDDSC");
    fields[3] = fieldEWDTYP =
    new CharacterField(message, HEADERSIZE + 66, 1, "EWDTYP");
    fields[4] = fieldEWDMTH =
    new CharacterField(message, HEADERSIZE + 67, 1, "EWDMTH");
    fields[5] = fieldEWDSTS =
    new CharacterField(message, HEADERSIZE + 68, 1, "EWDSTS");
    fields[6] = fieldEWDOMM =
    new DecimalField(message, HEADERSIZE + 69, 3, 0, "EWDOMM");
    fields[7] = fieldEWDODD =
    new DecimalField(message, HEADERSIZE + 72, 3, 0, "EWDODD");
    fields[8] = fieldEWDOYY =
    new DecimalField(message, HEADERSIZE + 75, 5, 0, "EWDOYY");
    fields[9] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 80, 1, "EWDOPE");
    fields[10] = fieldEWDUSR =
    new CharacterField(message, HEADERSIZE + 81, 10, "EWDUSR");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EWDBNK using a String value.
  */
  public void setEWDBNK(String newvalue)
  {
    fieldEWDBNK.setString(newvalue);
  }

  /**
  * Get value of field EWDBNK as a String.
  */
  public String getEWDBNK()
  {
    return fieldEWDBNK.getString();
  }

  /**
  * Set field EWDCDE using a String value.
  */
  public void setEWDCDE(String newvalue)
  {
    fieldEWDCDE.setString(newvalue);
  }

  /**
  * Get value of field EWDCDE as a String.
  */
  public String getEWDCDE()
  {
    return fieldEWDCDE.getString();
  }

  /**
  * Set field EWDDSC using a String value.
  */
  public void setEWDDSC(String newvalue)
  {
    fieldEWDDSC.setString(newvalue);
  }

  /**
  * Get value of field EWDDSC as a String.
  */
  public String getEWDDSC()
  {
    return fieldEWDDSC.getString();
  }

  /**
  * Set field EWDTYP using a String value.
  */
  public void setEWDTYP(String newvalue)
  {
    fieldEWDTYP.setString(newvalue);
  }

  /**
  * Get value of field EWDTYP as a String.
  */
  public String getEWDTYP()
  {
    return fieldEWDTYP.getString();
  }

  /**
  * Set field EWDMTH using a String value.
  */
  public void setEWDMTH(String newvalue)
  {
    fieldEWDMTH.setString(newvalue);
  }

  /**
  * Get value of field EWDMTH as a String.
  */
  public String getEWDMTH()
  {
    return fieldEWDMTH.getString();
  }

  /**
  * Set field EWDSTS using a String value.
  */
  public void setEWDSTS(String newvalue)
  {
    fieldEWDSTS.setString(newvalue);
  }

  /**
  * Get value of field EWDSTS as a String.
  */
  public String getEWDSTS()
  {
    return fieldEWDSTS.getString();
  }

  /**
  * Set field EWDOMM using a String value.
  */
  public void setEWDOMM(String newvalue)
  {
    fieldEWDOMM.setString(newvalue);
  }

  /**
  * Get value of field EWDOMM as a String.
  */
  public String getEWDOMM()
  {
    return fieldEWDOMM.getString();
  }

  /**
  * Set numeric field EWDOMM using a BigDecimal value.
  */
  public void setEWDOMM(BigDecimal newvalue)
  {
    fieldEWDOMM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDOMM as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDOMM()
  {
    return fieldEWDOMM.getBigDecimal();
  }

  /**
  * Set field EWDODD using a String value.
  */
  public void setEWDODD(String newvalue)
  {
    fieldEWDODD.setString(newvalue);
  }

  /**
  * Get value of field EWDODD as a String.
  */
  public String getEWDODD()
  {
    return fieldEWDODD.getString();
  }

  /**
  * Set numeric field EWDODD using a BigDecimal value.
  */
  public void setEWDODD(BigDecimal newvalue)
  {
    fieldEWDODD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDODD as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDODD()
  {
    return fieldEWDODD.getBigDecimal();
  }

  /**
  * Set field EWDOYY using a String value.
  */
  public void setEWDOYY(String newvalue)
  {
    fieldEWDOYY.setString(newvalue);
  }

  /**
  * Get value of field EWDOYY as a String.
  */
  public String getEWDOYY()
  {
    return fieldEWDOYY.getString();
  }

  /**
  * Set numeric field EWDOYY using a BigDecimal value.
  */
  public void setEWDOYY(BigDecimal newvalue)
  {
    fieldEWDOYY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDOYY as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDOYY()
  {
    return fieldEWDOYY.getBigDecimal();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

  /**
  * Set field EWDUSR using a String value.
  */
  public void setEWDUSR(String newvalue)
  {
    fieldEWDUSR.setString(newvalue);
  }

  /**
  * Get value of field EWDUSR as a String.
  */
  public String getEWDUSR()
  {
    return fieldEWDUSR.getString();
  }

}

package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0605DS physical file definition.
* 
* File level identifier is 1170815092956.
* Record format level identifier is 4C63277C4D64B.
*/

public class EWD0605DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "RWDUSR",
                                     "RWDCTR",
                                     "RWDSTE",
                                     "RWDCTY",
                                     "RWDCTG",
                                     "RWDTYP",
                                     "RWDFRC",
                                     "SWDCTR",
                                     "SWDSTE",
                                     "SWDCTY",
                                     "SWDCTG",
                                     "SWDCTGD",
                                     "SWDTYP",
                                     "SWDSCT",
                                     "SWDSCTD",
                                     "SWDREC",
                                     "SWDOPE"
                                   };
  final static String tnames[] = {
                                   "RWDUSR",
                                   "RWDCTR",
                                   "RWDSTE",
                                   "RWDCTY",
                                   "RWDCTG",
                                   "RWDTYP",
                                   "RWDFRC",
                                   "SWDCTR",
                                   "SWDSTE",
                                   "SWDCTY",
                                   "SWDCTG",
                                   "SWDCTGD",
                                   "SWDTYP",
                                   "SWDSCT",
                                   "SWDSCTD",
                                   "SWDREC",
                                   "SWDOPE"
                                 };
  final static String fid = "1170815092956";
  final static String rid = "4C63277C4D64B";
  final static String fmtname = "EWD0605DS";
  final int FIELDCOUNT = 17;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldRWDUSR = null;
  private CharacterField fieldRWDCTR = null;
  private CharacterField fieldRWDSTE = null;
  private CharacterField fieldRWDCTY = null;
  private CharacterField fieldRWDCTG = null;
  private CharacterField fieldRWDTYP = null;
  private DecimalField fieldRWDFRC = null;
  private CharacterField fieldSWDCTR = null;
  private CharacterField fieldSWDSTE = null;
  private CharacterField fieldSWDCTY = null;
  private CharacterField fieldSWDCTG = null;
  private CharacterField fieldSWDCTGD = null;
  private CharacterField fieldSWDTYP = null;
  private CharacterField fieldSWDSCT = null;
  private CharacterField fieldSWDSCTD = null;
  private DecimalField fieldSWDREC = null;
  private CharacterField fieldSWDOPE = null;

  /**
  * Constructor for EWD0605DSMessage.
  */
  public EWD0605DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 185;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldRWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "RWDUSR");
    fields[1] = fieldRWDCTR =
    new CharacterField(message, HEADERSIZE + 10, 4, "RWDCTR");
    fields[2] = fieldRWDSTE =
    new CharacterField(message, HEADERSIZE + 14, 4, "RWDSTE");
    fields[3] = fieldRWDCTY =
    new CharacterField(message, HEADERSIZE + 18, 4, "RWDCTY");
    fields[4] = fieldRWDCTG =
    new CharacterField(message, HEADERSIZE + 22, 4, "RWDCTG");
    fields[5] = fieldRWDTYP =
    new CharacterField(message, HEADERSIZE + 26, 1, "RWDTYP");
    fields[6] = fieldRWDFRC =
    new DecimalField(message, HEADERSIZE + 27, 8, 0, "RWDFRC");
    fields[7] = fieldSWDCTR =
    new CharacterField(message, HEADERSIZE + 35, 4, "SWDCTR");
    fields[8] = fieldSWDSTE =
    new CharacterField(message, HEADERSIZE + 39, 4, "SWDSTE");
    fields[9] = fieldSWDCTY =
    new CharacterField(message, HEADERSIZE + 43, 4, "SWDCTY");
    fields[10] = fieldSWDCTG =
    new CharacterField(message, HEADERSIZE + 47, 4, "SWDCTG");
    fields[11] = fieldSWDCTGD =
    new CharacterField(message, HEADERSIZE + 51, 60, "SWDCTGD");
    fields[12] = fieldSWDTYP =
    new CharacterField(message, HEADERSIZE + 111, 1, "SWDTYP");
    fields[13] = fieldSWDSCT =
    new CharacterField(message, HEADERSIZE + 112, 4, "SWDSCT");
    fields[14] = fieldSWDSCTD =
    new CharacterField(message, HEADERSIZE + 116, 60, "SWDSCTD");
    fields[15] = fieldSWDREC =
    new DecimalField(message, HEADERSIZE + 176, 8, 0, "SWDREC");
    fields[16] = fieldSWDOPE =
    new CharacterField(message, HEADERSIZE + 184, 1, "SWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field RWDUSR using a String value.
  */
  public void setRWDUSR(String newvalue)
  {
    fieldRWDUSR.setString(newvalue);
  }

  /**
  * Get value of field RWDUSR as a String.
  */
  public String getRWDUSR()
  {
    return fieldRWDUSR.getString();
  }

  /**
  * Set field RWDCTR using a String value.
  */
  public void setRWDCTR(String newvalue)
  {
    fieldRWDCTR.setString(newvalue);
  }

  /**
  * Get value of field RWDCTR as a String.
  */
  public String getRWDCTR()
  {
    return fieldRWDCTR.getString();
  }

  /**
  * Set field RWDSTE using a String value.
  */
  public void setRWDSTE(String newvalue)
  {
    fieldRWDSTE.setString(newvalue);
  }

  /**
  * Get value of field RWDSTE as a String.
  */
  public String getRWDSTE()
  {
    return fieldRWDSTE.getString();
  }

  /**
  * Set field RWDCTY using a String value.
  */
  public void setRWDCTY(String newvalue)
  {
    fieldRWDCTY.setString(newvalue);
  }

  /**
  * Get value of field RWDCTY as a String.
  */
  public String getRWDCTY()
  {
    return fieldRWDCTY.getString();
  }

  /**
  * Set field RWDCTG using a String value.
  */
  public void setRWDCTG(String newvalue)
  {
    fieldRWDCTG.setString(newvalue);
  }

  /**
  * Get value of field RWDCTG as a String.
  */
  public String getRWDCTG()
  {
    return fieldRWDCTG.getString();
  }

  /**
  * Set field RWDTYP using a String value.
  */
  public void setRWDTYP(String newvalue)
  {
    fieldRWDTYP.setString(newvalue);
  }

  /**
  * Get value of field RWDTYP as a String.
  */
  public String getRWDTYP()
  {
    return fieldRWDTYP.getString();
  }

  /**
  * Set field RWDFRC using a String value.
  */
  public void setRWDFRC(String newvalue)
  {
    fieldRWDFRC.setString(newvalue);
  }

  /**
  * Get value of field RWDFRC as a String.
  */
  public String getRWDFRC()
  {
    return fieldRWDFRC.getString();
  }

  /**
  * Set numeric field RWDFRC using a BigDecimal value.
  */
  public void setRWDFRC(BigDecimal newvalue)
  {
    fieldRWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDFRC()
  {
    return fieldRWDFRC.getBigDecimal();
  }

  /**
  * Set field SWDCTR using a String value.
  */
  public void setSWDCTR(String newvalue)
  {
    fieldSWDCTR.setString(newvalue);
  }

  /**
  * Get value of field SWDCTR as a String.
  */
  public String getSWDCTR()
  {
    return fieldSWDCTR.getString();
  }

  /**
  * Set field SWDSTE using a String value.
  */
  public void setSWDSTE(String newvalue)
  {
    fieldSWDSTE.setString(newvalue);
  }

  /**
  * Get value of field SWDSTE as a String.
  */
  public String getSWDSTE()
  {
    return fieldSWDSTE.getString();
  }

  /**
  * Set field SWDCTY using a String value.
  */
  public void setSWDCTY(String newvalue)
  {
    fieldSWDCTY.setString(newvalue);
  }

  /**
  * Get value of field SWDCTY as a String.
  */
  public String getSWDCTY()
  {
    return fieldSWDCTY.getString();
  }

  /**
  * Set field SWDCTG using a String value.
  */
  public void setSWDCTG(String newvalue)
  {
    fieldSWDCTG.setString(newvalue);
  }

  /**
  * Get value of field SWDCTG as a String.
  */
  public String getSWDCTG()
  {
    return fieldSWDCTG.getString();
  }

  /**
  * Set field SWDCTGD using a String value.
  */
  public void setSWDCTGD(String newvalue)
  {
    fieldSWDCTGD.setString(newvalue);
  }

  /**
  * Get value of field SWDCTGD as a String.
  */
  public String getSWDCTGD()
  {
    return fieldSWDCTGD.getString();
  }

  /**
  * Set field SWDTYP using a String value.
  */
  public void setSWDTYP(String newvalue)
  {
    fieldSWDTYP.setString(newvalue);
  }

  /**
  * Get value of field SWDTYP as a String.
  */
  public String getSWDTYP()
  {
    return fieldSWDTYP.getString();
  }

  /**
  * Set field SWDSCT using a String value.
  */
  public void setSWDSCT(String newvalue)
  {
    fieldSWDSCT.setString(newvalue);
  }

  /**
  * Get value of field SWDSCT as a String.
  */
  public String getSWDSCT()
  {
    return fieldSWDSCT.getString();
  }

  /**
  * Set field SWDSCTD using a String value.
  */
  public void setSWDSCTD(String newvalue)
  {
    fieldSWDSCTD.setString(newvalue);
  }

  /**
  * Get value of field SWDSCTD as a String.
  */
  public String getSWDSCTD()
  {
    return fieldSWDSCTD.getString();
  }

  /**
  * Set field SWDREC using a String value.
  */
  public void setSWDREC(String newvalue)
  {
    fieldSWDREC.setString(newvalue);
  }

  /**
  * Get value of field SWDREC as a String.
  */
  public String getSWDREC()
  {
    return fieldSWDREC.getString();
  }

  /**
  * Set numeric field SWDREC using a BigDecimal value.
  */
  public void setSWDREC(BigDecimal newvalue)
  {
    fieldSWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDREC()
  {
    return fieldSWDREC.getBigDecimal();
  }

  /**
  * Set field SWDOPE using a String value.
  */
  public void setSWDOPE(String newvalue)
  {
    fieldSWDOPE.setString(newvalue);
  }

  /**
  * Get value of field SWDOPE as a String.
  */
  public String getSWDOPE()
  {
    return fieldSWDOPE.getString();
  }

}

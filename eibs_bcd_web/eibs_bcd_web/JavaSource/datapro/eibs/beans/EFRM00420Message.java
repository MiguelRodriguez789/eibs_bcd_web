package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EFRM00420 physical file definition.
* 
* File level identifier is 1170202115323.
* Record format level identifier is 538B2905DA302.
*/

public class EFRM00420Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "E20ROCNPR",
                                     "CUMCUN",
                                     "CUMRTP",
                                     "CUMRTPD",
                                     "CUMMAN",
                                     "CUMRCN",
                                     "CUMMA1",
                                     "CUMAM2",
                                     "H20FLGMAS"
                                   };
  final static String tnames[] = {
                                   "*numPropuesta",
                                   "numeroGarantiaConst",
                                   "tipoRelacionConst",
                                   "desTipoRelacion",
                                   "secuenRelac",
                                   "numeroClienteConst",
                                   "nombreRelacion",
                                   "porcenParticip",
                                   "*flgMas"
                                 };
  final static String fid = "1170202115323";
  final static String rid = "538B2905DA302";
  final static String fmtname = "EFRM00420";
  final int FIELDCOUNT = 9;
  private static Hashtable tlookup = new Hashtable();
  private DecimalField fieldE20ROCNPR = null;
  private DecimalField fieldCUMCUN = null;
  private CharacterField fieldCUMRTP = null;
  private CharacterField fieldCUMRTPD = null;
  private DecimalField fieldCUMMAN = null;
  private DecimalField fieldCUMRCN = null;
  private CharacterField fieldCUMMA1 = null;
  private DecimalField fieldCUMAM2 = null;
  private CharacterField fieldH20FLGMAS = null;

  /**
  * Constructor for EFRM00420Message.
  */
  public EFRM00420Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 130;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldE20ROCNPR =
    new DecimalField(message, HEADERSIZE + 0, 13, 0, "*numPropuesta");
    fields[1] = fieldCUMCUN =
    new DecimalField(message, HEADERSIZE + 13, 10, 0, "numeroGarantiaConst");
    fields[2] = fieldCUMRTP =
    new CharacterField(message, HEADERSIZE + 23, 1, "tipoRelacionConst");
    fields[3] = fieldCUMRTPD =
    new CharacterField(message, HEADERSIZE + 24, 15, "desTipoRelacion");
    fields[4] = fieldCUMMAN =
    new DecimalField(message, HEADERSIZE + 39, 3, 0, "secuenRelac");
    fields[5] = fieldCUMRCN =
    new DecimalField(message, HEADERSIZE + 42, 10, 0, "numeroClienteConst");
    fields[6] = fieldCUMMA1 =
    new CharacterField(message, HEADERSIZE + 52, 60, "nombreRelacion");
    fields[7] = fieldCUMAM2 =
    new DecimalField(message, HEADERSIZE + 112, 17, 2, "porcenParticip");
    fields[8] = fieldH20FLGMAS =
    new CharacterField(message, HEADERSIZE + 129, 1, "*flgMas");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field E20ROCNPR using a String value.
  */
  public void setE20ROCNPR(String newvalue)
  {
    fieldE20ROCNPR.setString(newvalue);
  }

  /**
  * Get value of field E20ROCNPR as a String.
  */
  public String getE20ROCNPR()
  {
    return fieldE20ROCNPR.getString();
  }

  /**
  * Set numeric field E20ROCNPR using a BigDecimal value.
  */
  public void setE20ROCNPR(BigDecimal newvalue)
  {
    fieldE20ROCNPR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E20ROCNPR as a BigDecimal.
  */
  public BigDecimal getBigDecimalE20ROCNPR()
  {
    return fieldE20ROCNPR.getBigDecimal();
  }

  /**
  * Set field CUMCUN using a String value.
  */
  public void setCUMCUN(String newvalue)
  {
    fieldCUMCUN.setString(newvalue);
  }

  /**
  * Get value of field CUMCUN as a String.
  */
  public String getCUMCUN()
  {
    return fieldCUMCUN.getString();
  }

  /**
  * Set numeric field CUMCUN using a BigDecimal value.
  */
  public void setCUMCUN(BigDecimal newvalue)
  {
    fieldCUMCUN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CUMCUN as a BigDecimal.
  */
  public BigDecimal getBigDecimalCUMCUN()
  {
    return fieldCUMCUN.getBigDecimal();
  }

  /**
  * Set field CUMRTP using a String value.
  */
  public void setCUMRTP(String newvalue)
  {
    fieldCUMRTP.setString(newvalue);
  }

  /**
  * Get value of field CUMRTP as a String.
  */
  public String getCUMRTP()
  {
    return fieldCUMRTP.getString();
  }

  /**
  * Set field CUMRTPD using a String value.
  */
  public void setCUMRTPD(String newvalue)
  {
    fieldCUMRTPD.setString(newvalue);
  }

  /**
  * Get value of field CUMRTPD as a String.
  */
  public String getCUMRTPD()
  {
    return fieldCUMRTPD.getString();
  }

  /**
  * Set field CUMMAN using a String value.
  */
  public void setCUMMAN(String newvalue)
  {
    fieldCUMMAN.setString(newvalue);
  }

  /**
  * Get value of field CUMMAN as a String.
  */
  public String getCUMMAN()
  {
    return fieldCUMMAN.getString();
  }

  /**
  * Set numeric field CUMMAN using a BigDecimal value.
  */
  public void setCUMMAN(BigDecimal newvalue)
  {
    fieldCUMMAN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CUMMAN as a BigDecimal.
  */
  public BigDecimal getBigDecimalCUMMAN()
  {
    return fieldCUMMAN.getBigDecimal();
  }

  /**
  * Set field CUMRCN using a String value.
  */
  public void setCUMRCN(String newvalue)
  {
    fieldCUMRCN.setString(newvalue);
  }

  /**
  * Get value of field CUMRCN as a String.
  */
  public String getCUMRCN()
  {
    return fieldCUMRCN.getString();
  }

  /**
  * Set numeric field CUMRCN using a BigDecimal value.
  */
  public void setCUMRCN(BigDecimal newvalue)
  {
    fieldCUMRCN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CUMRCN as a BigDecimal.
  */
  public BigDecimal getBigDecimalCUMRCN()
  {
    return fieldCUMRCN.getBigDecimal();
  }

  /**
  * Set field CUMMA1 using a String value.
  */
  public void setCUMMA1(String newvalue)
  {
    fieldCUMMA1.setString(newvalue);
  }

  /**
  * Get value of field CUMMA1 as a String.
  */
  public String getCUMMA1()
  {
    return fieldCUMMA1.getString();
  }

  /**
  * Set field CUMAM2 using a String value.
  */
  public void setCUMAM2(String newvalue)
  {
    fieldCUMAM2.setString(newvalue);
  }

  /**
  * Get value of field CUMAM2 as a String.
  */
  public String getCUMAM2()
  {
    return fieldCUMAM2.getString();
  }

  /**
  * Set numeric field CUMAM2 using a BigDecimal value.
  */
  public void setCUMAM2(BigDecimal newvalue)
  {
    fieldCUMAM2.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CUMAM2 as a BigDecimal.
  */
  public BigDecimal getBigDecimalCUMAM2()
  {
    return fieldCUMAM2.getBigDecimal();
  }

  /**
  * Set field H20FLGMAS using a String value.
  */
  public void setH20FLGMAS(String newvalue)
  {
    fieldH20FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H20FLGMAS as a String.
  */
  public String getH20FLGMAS()
  {
    return fieldH20FLGMAS.getString();
  }

}

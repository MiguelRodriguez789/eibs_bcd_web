package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from CLXPAGOS physical file definition.
* 
* File level identifier is 1110211175831.
* Record format level identifier is 2D85F3429685D.
*/

public class CLXPAGOSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01HEA",
                                     "H01USR",
                                     "H01PGM",
                                     "H01TIM",
                                     "H01SCR",
                                     "H01OPE",
                                     "H01MAS",
                                     "H01WK1",
                                     "H01WK2",
                                     "H01WK3",
                                     "INPCCN",
                                     "INPOBK",
                                     "INPVDL",
                                     "INPACC",
                                     "INPCUN",
                                     "INPTCD",
                                     "INPDRA",
                                     "INPCR1",
                                     "INPAPC",
                                     "INPGLN",
                                     "INPCCY"
                                   };
  final static String tnames[] = {
                                   "H01HEA",
                                   "H01USR",
                                   "H01PGM",
                                   "H01TIM",
                                   "H01SCR",
                                   "H01OPE",
                                   "H01MAS",
                                   "H01WK1",
                                   "H01WK2",
                                   "H01WK3",
                                   "INPCCN",
                                   "INPOBK",
                                   "INPVDL",
                                   "INPACC",
                                   "INPCUN",
                                   "INPTCD",
                                   "INPDRA",
                                   "INPCR1",
                                   "INPAPC",
                                   "INPGLN",
                                   "INPCCY"
                                 };
  final static String fid = "1110211175831";
  final static String rid = "2D85F3429685D";
  final static String fmtname = "CLXPAGOS";
  final int FIELDCOUNT = 21;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01HEA = null;
  private CharacterField fieldH01USR = null;
  private CharacterField fieldH01PGM = null;
  private CharacterField fieldH01TIM = null;
  private CharacterField fieldH01SCR = null;
  private CharacterField fieldH01OPE = null;
  private CharacterField fieldH01MAS = null;
  private CharacterField fieldH01WK1 = null;
  private CharacterField fieldH01WK2 = null;
  private CharacterField fieldH01WK3 = null;
  private DecimalField fieldINPCCN = null;
  private CharacterField fieldINPOBK = null;
  private DecimalField fieldINPVDL = null;
  private DecimalField fieldINPACC = null;
  private DecimalField fieldINPCUN = null;
  private CharacterField fieldINPTCD = null;
  private DecimalField fieldINPDRA = null;
  private DecimalField fieldINPCR1 = null;
  private CharacterField fieldINPAPC = null;
  private DecimalField fieldINPGLN = null;
  private CharacterField fieldINPCCY = null;

  /**
  * Constructor for CLXPAGOSMessage.
  */
  public CLXPAGOSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 154;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01HEA =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01HEA");
    fields[1] = fieldH01USR =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01USR");
    fields[2] = fieldH01PGM =
    new CharacterField(message, HEADERSIZE + 20, 10, "H01PGM");
    fields[3] = fieldH01TIM =
    new CharacterField(message, HEADERSIZE + 30, 12, "H01TIM");
    fields[4] = fieldH01SCR =
    new CharacterField(message, HEADERSIZE + 42, 2, "H01SCR");
    fields[5] = fieldH01OPE =
    new CharacterField(message, HEADERSIZE + 44, 4, "H01OPE");
    fields[6] = fieldH01MAS =
    new CharacterField(message, HEADERSIZE + 48, 1, "H01MAS");
    fields[7] = fieldH01WK1 =
    new CharacterField(message, HEADERSIZE + 49, 1, "H01WK1");
    fields[8] = fieldH01WK2 =
    new CharacterField(message, HEADERSIZE + 50, 1, "H01WK2");
    fields[9] = fieldH01WK3 =
    new CharacterField(message, HEADERSIZE + 51, 1, "H01WK3");
    fields[10] = fieldINPCCN =
    new DecimalField(message, HEADERSIZE + 52, 9, 0, "INPCCN");
    fields[11] = fieldINPOBK =
    new CharacterField(message, HEADERSIZE + 61, 2, "INPOBK");
    fields[12] = fieldINPVDL =
    new DecimalField(message, HEADERSIZE + 63, 9, 0, "INPVDL");
    fields[13] = fieldINPACC =
    new DecimalField(message, HEADERSIZE + 72, 13, 0, "INPACC");
    fields[14] = fieldINPCUN =
    new DecimalField(message, HEADERSIZE + 85, 10, 0, "INPCUN");
    fields[15] = fieldINPTCD =
    new CharacterField(message, HEADERSIZE + 95, 4, "INPTCD");
    fields[16] = fieldINPDRA =
    new DecimalField(message, HEADERSIZE + 99, 17, 2, "INPDRA");
    fields[17] = fieldINPCR1 =
    new DecimalField(message, HEADERSIZE + 116, 17, 2, "INPCR1");
    fields[18] = fieldINPAPC =
    new CharacterField(message, HEADERSIZE + 133, 1, "INPAPC");
    fields[19] = fieldINPGLN =
    new DecimalField(message, HEADERSIZE + 134, 17, 0, "INPGLN");
    fields[20] = fieldINPCCY =
    new CharacterField(message, HEADERSIZE + 151, 3, "INPCCY");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01HEA using a String value.
  */
  public void setH01HEA(String newvalue)
  {
    fieldH01HEA.setString(newvalue);
  }

  /**
  * Get value of field H01HEA as a String.
  */
  public String getH01HEA()
  {
    return fieldH01HEA.getString();
  }

  /**
  * Set field H01USR using a String value.
  */
  public void setH01USR(String newvalue)
  {
    fieldH01USR.setString(newvalue);
  }

  /**
  * Get value of field H01USR as a String.
  */
  public String getH01USR()
  {
    return fieldH01USR.getString();
  }

  /**
  * Set field H01PGM using a String value.
  */
  public void setH01PGM(String newvalue)
  {
    fieldH01PGM.setString(newvalue);
  }

  /**
  * Get value of field H01PGM as a String.
  */
  public String getH01PGM()
  {
    return fieldH01PGM.getString();
  }

  /**
  * Set field H01TIM using a String value.
  */
  public void setH01TIM(String newvalue)
  {
    fieldH01TIM.setString(newvalue);
  }

  /**
  * Get value of field H01TIM as a String.
  */
  public String getH01TIM()
  {
    return fieldH01TIM.getString();
  }

  /**
  * Set field H01SCR using a String value.
  */
  public void setH01SCR(String newvalue)
  {
    fieldH01SCR.setString(newvalue);
  }

  /**
  * Get value of field H01SCR as a String.
  */
  public String getH01SCR()
  {
    return fieldH01SCR.getString();
  }

  /**
  * Set field H01OPE using a String value.
  */
  public void setH01OPE(String newvalue)
  {
    fieldH01OPE.setString(newvalue);
  }

  /**
  * Get value of field H01OPE as a String.
  */
  public String getH01OPE()
  {
    return fieldH01OPE.getString();
  }

  /**
  * Set field H01MAS using a String value.
  */
  public void setH01MAS(String newvalue)
  {
    fieldH01MAS.setString(newvalue);
  }

  /**
  * Get value of field H01MAS as a String.
  */
  public String getH01MAS()
  {
    return fieldH01MAS.getString();
  }

  /**
  * Set field H01WK1 using a String value.
  */
  public void setH01WK1(String newvalue)
  {
    fieldH01WK1.setString(newvalue);
  }

  /**
  * Get value of field H01WK1 as a String.
  */
  public String getH01WK1()
  {
    return fieldH01WK1.getString();
  }

  /**
  * Set field H01WK2 using a String value.
  */
  public void setH01WK2(String newvalue)
  {
    fieldH01WK2.setString(newvalue);
  }

  /**
  * Get value of field H01WK2 as a String.
  */
  public String getH01WK2()
  {
    return fieldH01WK2.getString();
  }

  /**
  * Set field H01WK3 using a String value.
  */
  public void setH01WK3(String newvalue)
  {
    fieldH01WK3.setString(newvalue);
  }

  /**
  * Get value of field H01WK3 as a String.
  */
  public String getH01WK3()
  {
    return fieldH01WK3.getString();
  }

  /**
  * Set field INPCCN using a String value.
  */
  public void setINPCCN(String newvalue)
  {
    fieldINPCCN.setString(newvalue);
  }

  /**
  * Get value of field INPCCN as a String.
  */
  public String getINPCCN()
  {
    return fieldINPCCN.getString();
  }

  /**
  * Set numeric field INPCCN using a BigDecimal value.
  */
  public void setINPCCN(BigDecimal newvalue)
  {
    fieldINPCCN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field INPCCN as a BigDecimal.
  */
  public BigDecimal getBigDecimalINPCCN()
  {
    return fieldINPCCN.getBigDecimal();
  }

  /**
  * Set field INPOBK using a String value.
  */
  public void setINPOBK(String newvalue)
  {
    fieldINPOBK.setString(newvalue);
  }

  /**
  * Get value of field INPOBK as a String.
  */
  public String getINPOBK()
  {
    return fieldINPOBK.getString();
  }

  /**
  * Set field INPVDL using a String value.
  */
  public void setINPVDL(String newvalue)
  {
    fieldINPVDL.setString(newvalue);
  }

  /**
  * Get value of field INPVDL as a String.
  */
  public String getINPVDL()
  {
    return fieldINPVDL.getString();
  }

  /**
  * Set numeric field INPVDL using a BigDecimal value.
  */
  public void setINPVDL(BigDecimal newvalue)
  {
    fieldINPVDL.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field INPVDL as a BigDecimal.
  */
  public BigDecimal getBigDecimalINPVDL()
  {
    return fieldINPVDL.getBigDecimal();
  }

  /**
  * Set field INPACC using a String value.
  */
  public void setINPACC(String newvalue)
  {
    fieldINPACC.setString(newvalue);
  }

  /**
  * Get value of field INPACC as a String.
  */
  public String getINPACC()
  {
    return fieldINPACC.getString();
  }

  /**
  * Set numeric field INPACC using a BigDecimal value.
  */
  public void setINPACC(BigDecimal newvalue)
  {
    fieldINPACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field INPACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalINPACC()
  {
    return fieldINPACC.getBigDecimal();
  }

  /**
  * Set field INPCUN using a String value.
  */
  public void setINPCUN(String newvalue)
  {
    fieldINPCUN.setString(newvalue);
  }

  /**
  * Get value of field INPCUN as a String.
  */
  public String getINPCUN()
  {
    return fieldINPCUN.getString();
  }

  /**
  * Set numeric field INPCUN using a BigDecimal value.
  */
  public void setINPCUN(BigDecimal newvalue)
  {
    fieldINPCUN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field INPCUN as a BigDecimal.
  */
  public BigDecimal getBigDecimalINPCUN()
  {
    return fieldINPCUN.getBigDecimal();
  }

  /**
  * Set field INPTCD using a String value.
  */
  public void setINPTCD(String newvalue)
  {
    fieldINPTCD.setString(newvalue);
  }

  /**
  * Get value of field INPTCD as a String.
  */
  public String getINPTCD()
  {
    return fieldINPTCD.getString();
  }

  /**
  * Set field INPDRA using a String value.
  */
  public void setINPDRA(String newvalue)
  {
    fieldINPDRA.setString(newvalue);
  }

  /**
  * Get value of field INPDRA as a String.
  */
  public String getINPDRA()
  {
    return fieldINPDRA.getString();
  }

  /**
  * Set numeric field INPDRA using a BigDecimal value.
  */
  public void setINPDRA(BigDecimal newvalue)
  {
    fieldINPDRA.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field INPDRA as a BigDecimal.
  */
  public BigDecimal getBigDecimalINPDRA()
  {
    return fieldINPDRA.getBigDecimal();
  }

  /**
  * Set field INPCR1 using a String value.
  */
  public void setINPCR1(String newvalue)
  {
    fieldINPCR1.setString(newvalue);
  }

  /**
  * Get value of field INPCR1 as a String.
  */
  public String getINPCR1()
  {
    return fieldINPCR1.getString();
  }

  /**
  * Set numeric field INPCR1 using a BigDecimal value.
  */
  public void setINPCR1(BigDecimal newvalue)
  {
    fieldINPCR1.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field INPCR1 as a BigDecimal.
  */
  public BigDecimal getBigDecimalINPCR1()
  {
    return fieldINPCR1.getBigDecimal();
  }

  /**
  * Set field INPAPC using a String value.
  */
  public void setINPAPC(String newvalue)
  {
    fieldINPAPC.setString(newvalue);
  }

  /**
  * Get value of field INPAPC as a String.
  */
  public String getINPAPC()
  {
    return fieldINPAPC.getString();
  }

  /**
  * Set field INPGLN using a String value.
  */
  public void setINPGLN(String newvalue)
  {
    fieldINPGLN.setString(newvalue);
  }

  /**
  * Get value of field INPGLN as a String.
  */
  public String getINPGLN()
  {
    return fieldINPGLN.getString();
  }

  /**
  * Set numeric field INPGLN using a BigDecimal value.
  */
  public void setINPGLN(BigDecimal newvalue)
  {
    fieldINPGLN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field INPGLN as a BigDecimal.
  */
  public BigDecimal getBigDecimalINPGLN()
  {
    return fieldINPGLN.getBigDecimal();
  }

  /**
  * Set field INPCCY using a String value.
  */
  public void setINPCCY(String newvalue)
  {
    fieldINPCCY.setString(newvalue);
  }

  /**
  * Get value of field INPCCY as a String.
  */
  public String getINPCCY()
  {
    return fieldINPCCY.getString();
  }

}

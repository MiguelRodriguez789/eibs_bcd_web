package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ECL000106 physical file definition.
* 
* File level identifier is 1100706173536.
* Record format level identifier is 311A5E6B8E458.
*/

public class ECL000106Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H02USERID",
                                     "H02PROGRM",
                                     "H02TIMSYS",
                                     "H02SCRCOD",
                                     "H02OPECOD",
                                     "H02FLGMAS",
                                     "H02FLGWK1",
                                     "H02FLGWK2",
                                     "H02FLGWK3",
                                     "CNOCFL",
                                     "CNORCD",
                                     "CNODSC",
                                     "CNOSCG",
                                     "BTHKEY",
                                     "BTHUBK",
                                     "BTHUBR",
                                     "BTHCCN",
                                     "BTHAUT",
                                     "EUPIDN",
                                     "EUPNME",
                                     "EUPEML",
                                     "EUPPHN"
                                   };
  final static String tnames[] = {
                                   "H02USERID",
                                   "H02PROGRM",
                                   "H02TIMSYS",
                                   "H02SCRCOD",
                                   "H02OPECOD",
                                   "H02FLGMAS",
                                   "H02FLGWK1",
                                   "H02FLGWK2",
                                   "H02FLGWK3",
                                   "CNOCFL",
                                   "CNORCD",
                                   "CNODSC",
                                   "CNOSCG",
                                   "BTHKEY",
                                   "BTHUBK",
                                   "BTHUBR",
                                   "BTHCCN",
                                   "BTHAUT",
                                   "EUPIDN",
                                   "EUPNME",
                                   "EUPEML",
                                   "EUPPHN"
                                 };
  final static String fid = "1100706173536";
  final static String rid = "311A5E6B8E458";
  final static String fmtname = "ECL000106";
  final int FIELDCOUNT = 22;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH02USERID = null;
  private CharacterField fieldH02PROGRM = null;
  private CharacterField fieldH02TIMSYS = null;
  private CharacterField fieldH02SCRCOD = null;
  private CharacterField fieldH02OPECOD = null;
  private CharacterField fieldH02FLGMAS = null;
  private CharacterField fieldH02FLGWK1 = null;
  private CharacterField fieldH02FLGWK2 = null;
  private CharacterField fieldH02FLGWK3 = null;
  private CharacterField fieldCNOCFL = null;
  private CharacterField fieldCNORCD = null;
  private CharacterField fieldCNODSC = null;
  private DecimalField fieldCNOSCG = null;
  private CharacterField fieldBTHKEY = null;
  private CharacterField fieldBTHUBK = null;
  private DecimalField fieldBTHUBR = null;
  private DecimalField fieldBTHCCN = null;
  private CharacterField fieldBTHAUT = null;
  private CharacterField fieldEUPIDN = null;
  private CharacterField fieldEUPNME = null;
  private CharacterField fieldEUPEML = null;
  private DecimalField fieldEUPPHN = null;

  /**
  * Constructor for ECL000106Message.
  */
  public ECL000106Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 238;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH02USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H02USERID");
    fields[1] = fieldH02PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H02PROGRM");
    fields[2] = fieldH02TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H02TIMSYS");
    fields[3] = fieldH02SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H02SCRCOD");
    fields[4] = fieldH02OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H02OPECOD");
    fields[5] = fieldH02FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H02FLGMAS");
    fields[6] = fieldH02FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H02FLGWK1");
    fields[7] = fieldH02FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H02FLGWK2");
    fields[8] = fieldH02FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H02FLGWK3");
    fields[9] = fieldCNOCFL =
    new CharacterField(message, HEADERSIZE + 42, 2, "CNOCFL");
    fields[10] = fieldCNORCD =
    new CharacterField(message, HEADERSIZE + 44, 4, "CNORCD");
    fields[11] = fieldCNODSC =
    new CharacterField(message, HEADERSIZE + 48, 35, "CNODSC");
    fields[12] = fieldCNOSCG =
    new DecimalField(message, HEADERSIZE + 83, 17, 0, "CNOSCG");
    fields[13] = fieldBTHKEY =
    new CharacterField(message, HEADERSIZE + 100, 10, "BTHKEY");
    fields[14] = fieldBTHUBK =
    new CharacterField(message, HEADERSIZE + 110, 2, "BTHUBK");
    fields[15] = fieldBTHUBR =
    new DecimalField(message, HEADERSIZE + 112, 4, 0, "BTHUBR");
    fields[16] = fieldBTHCCN =
    new DecimalField(message, HEADERSIZE + 116, 9, 0, "BTHCCN");
    fields[17] = fieldBTHAUT =
    new CharacterField(message, HEADERSIZE + 125, 1, "BTHAUT");
    fields[18] = fieldEUPIDN =
    new CharacterField(message, HEADERSIZE + 126, 15, "EUPIDN");
    fields[19] = fieldEUPNME =
    new CharacterField(message, HEADERSIZE + 141, 45, "EUPNME");
    fields[20] = fieldEUPEML =
    new CharacterField(message, HEADERSIZE + 186, 40, "EUPEML");
    fields[21] = fieldEUPPHN =
    new DecimalField(message, HEADERSIZE + 226, 12, 0, "EUPPHN");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H02USERID using a String value.
  */
  public void setH02USERID(String newvalue)
  {
    fieldH02USERID.setString(newvalue);
  }

  /**
  * Get value of field H02USERID as a String.
  */
  public String getH02USERID()
  {
    return fieldH02USERID.getString();
  }

  /**
  * Set field H02PROGRM using a String value.
  */
  public void setH02PROGRM(String newvalue)
  {
    fieldH02PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H02PROGRM as a String.
  */
  public String getH02PROGRM()
  {
    return fieldH02PROGRM.getString();
  }

  /**
  * Set field H02TIMSYS using a String value.
  */
  public void setH02TIMSYS(String newvalue)
  {
    fieldH02TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H02TIMSYS as a String.
  */
  public String getH02TIMSYS()
  {
    return fieldH02TIMSYS.getString();
  }

  /**
  * Set field H02SCRCOD using a String value.
  */
  public void setH02SCRCOD(String newvalue)
  {
    fieldH02SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H02SCRCOD as a String.
  */
  public String getH02SCRCOD()
  {
    return fieldH02SCRCOD.getString();
  }

  /**
  * Set field H02OPECOD using a String value.
  */
  public void setH02OPECOD(String newvalue)
  {
    fieldH02OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H02OPECOD as a String.
  */
  public String getH02OPECOD()
  {
    return fieldH02OPECOD.getString();
  }

  /**
  * Set field H02FLGMAS using a String value.
  */
  public void setH02FLGMAS(String newvalue)
  {
    fieldH02FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H02FLGMAS as a String.
  */
  public String getH02FLGMAS()
  {
    return fieldH02FLGMAS.getString();
  }

  /**
  * Set field H02FLGWK1 using a String value.
  */
  public void setH02FLGWK1(String newvalue)
  {
    fieldH02FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK1 as a String.
  */
  public String getH02FLGWK1()
  {
    return fieldH02FLGWK1.getString();
  }

  /**
  * Set field H02FLGWK2 using a String value.
  */
  public void setH02FLGWK2(String newvalue)
  {
    fieldH02FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK2 as a String.
  */
  public String getH02FLGWK2()
  {
    return fieldH02FLGWK2.getString();
  }

  /**
  * Set field H02FLGWK3 using a String value.
  */
  public void setH02FLGWK3(String newvalue)
  {
    fieldH02FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK3 as a String.
  */
  public String getH02FLGWK3()
  {
    return fieldH02FLGWK3.getString();
  }

  /**
  * Set field CNOCFL using a String value.
  */
  public void setCNOCFL(String newvalue)
  {
    fieldCNOCFL.setString(newvalue);
  }

  /**
  * Get value of field CNOCFL as a String.
  */
  public String getCNOCFL()
  {
    return fieldCNOCFL.getString();
  }

  /**
  * Set field CNORCD using a String value.
  */
  public void setCNORCD(String newvalue)
  {
    fieldCNORCD.setString(newvalue);
  }

  /**
  * Get value of field CNORCD as a String.
  */
  public String getCNORCD()
  {
    return fieldCNORCD.getString();
  }

  /**
  * Set field CNODSC using a String value.
  */
  public void setCNODSC(String newvalue)
  {
    fieldCNODSC.setString(newvalue);
  }

  /**
  * Get value of field CNODSC as a String.
  */
  public String getCNODSC()
  {
    return fieldCNODSC.getString();
  }

  /**
  * Set field CNOSCG using a String value.
  */
  public void setCNOSCG(String newvalue)
  {
    fieldCNOSCG.setString(newvalue);
  }

  /**
  * Get value of field CNOSCG as a String.
  */
  public String getCNOSCG()
  {
    return fieldCNOSCG.getString();
  }

  /**
  * Set numeric field CNOSCG using a BigDecimal value.
  */
  public void setCNOSCG(BigDecimal newvalue)
  {
    fieldCNOSCG.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CNOSCG as a BigDecimal.
  */
  public BigDecimal getBigDecimalCNOSCG()
  {
    return fieldCNOSCG.getBigDecimal();
  }

  /**
  * Set field BTHKEY using a String value.
  */
  public void setBTHKEY(String newvalue)
  {
    fieldBTHKEY.setString(newvalue);
  }

  /**
  * Get value of field BTHKEY as a String.
  */
  public String getBTHKEY()
  {
    return fieldBTHKEY.getString();
  }

  /**
  * Set field BTHUBK using a String value.
  */
  public void setBTHUBK(String newvalue)
  {
    fieldBTHUBK.setString(newvalue);
  }

  /**
  * Get value of field BTHUBK as a String.
  */
  public String getBTHUBK()
  {
    return fieldBTHUBK.getString();
  }

  /**
  * Set field BTHUBR using a String value.
  */
  public void setBTHUBR(String newvalue)
  {
    fieldBTHUBR.setString(newvalue);
  }

  /**
  * Get value of field BTHUBR as a String.
  */
  public String getBTHUBR()
  {
    return fieldBTHUBR.getString();
  }

  /**
  * Set numeric field BTHUBR using a BigDecimal value.
  */
  public void setBTHUBR(BigDecimal newvalue)
  {
    fieldBTHUBR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field BTHUBR as a BigDecimal.
  */
  public BigDecimal getBigDecimalBTHUBR()
  {
    return fieldBTHUBR.getBigDecimal();
  }

  /**
  * Set field BTHCCN using a String value.
  */
  public void setBTHCCN(String newvalue)
  {
    fieldBTHCCN.setString(newvalue);
  }

  /**
  * Get value of field BTHCCN as a String.
  */
  public String getBTHCCN()
  {
    return fieldBTHCCN.getString();
  }

  /**
  * Set numeric field BTHCCN using a BigDecimal value.
  */
  public void setBTHCCN(BigDecimal newvalue)
  {
    fieldBTHCCN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field BTHCCN as a BigDecimal.
  */
  public BigDecimal getBigDecimalBTHCCN()
  {
    return fieldBTHCCN.getBigDecimal();
  }

  /**
  * Set field BTHAUT using a String value.
  */
  public void setBTHAUT(String newvalue)
  {
    fieldBTHAUT.setString(newvalue);
  }

  /**
  * Get value of field BTHAUT as a String.
  */
  public String getBTHAUT()
  {
    return fieldBTHAUT.getString();
  }

  /**
  * Set field EUPIDN using a String value.
  */
  public void setEUPIDN(String newvalue)
  {
    fieldEUPIDN.setString(newvalue);
  }

  /**
  * Get value of field EUPIDN as a String.
  */
  public String getEUPIDN()
  {
    return fieldEUPIDN.getString();
  }

  /**
  * Set field EUPNME using a String value.
  */
  public void setEUPNME(String newvalue)
  {
    fieldEUPNME.setString(newvalue);
  }

  /**
  * Get value of field EUPNME as a String.
  */
  public String getEUPNME()
  {
    return fieldEUPNME.getString();
  }

  /**
  * Set field EUPEML using a String value.
  */
  public void setEUPEML(String newvalue)
  {
    fieldEUPEML.setString(newvalue);
  }

  /**
  * Get value of field EUPEML as a String.
  */
  public String getEUPEML()
  {
    return fieldEUPEML.getString();
  }

  /**
  * Set field EUPPHN using a String value.
  */
  public void setEUPPHN(String newvalue)
  {
    fieldEUPPHN.setString(newvalue);
  }

  /**
  * Get value of field EUPPHN as a String.
  */
  public String getEUPPHN()
  {
    return fieldEUPPHN.getString();
  }

  /**
  * Set numeric field EUPPHN using a BigDecimal value.
  */
  public void setEUPPHN(BigDecimal newvalue)
  {
    fieldEUPPHN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EUPPHN as a BigDecimal.
  */
  public BigDecimal getBigDecimalEUPPHN()
  {
    return fieldEUPPHN.getBigDecimal();
  }

}

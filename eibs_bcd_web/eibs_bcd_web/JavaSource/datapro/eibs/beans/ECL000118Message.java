package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ECL000118 physical file definition.
* 
* File level identifier is 1100706173538.
* Record format level identifier is 4A36E7A2E0719.
*/

public class ECL000118Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USERID",
                                     "H01PROGRM",
                                     "H01TIMSYS",
                                     "H01SCRCOD",
                                     "H01OPECOD",
                                     "H01FLGMAS",
                                     "H01FLGWK1",
                                     "H01FLGWK2",
                                     "H01FLGWK3",
                                     "SDDBNK",
                                     "SDDMON",
                                     "SDDFEI",
                                     "SDDFFI",
                                     "SDDDCL",
                                     "SDDDHB",
                                     "SDDCNA",
                                     "SDDCNM",
                                     "SDDCND",
                                     "SDDTCA",
                                     "SDDRTN",
                                     "SDDDSM",
                                     "SDDFST"
                                   };
  final static String tnames[] = {
                                   "H01USERID",
                                   "H01PROGRM",
                                   "H01TIMSYS",
                                   "H01SCRCOD",
                                   "H01OPECOD",
                                   "H01FLGMAS",
                                   "H01FLGWK1",
                                   "H01FLGWK2",
                                   "H01FLGWK3",
                                   "SDDBNK",
                                   "SDDMON",
                                   "SDDFEI",
                                   "SDDFFI",
                                   "SDDDCL",
                                   "SDDDHB",
                                   "SDDCNA",
                                   "SDDCNM",
                                   "SDDCND",
                                   "SDDTCA",
                                   "SDDRTN",
                                   "SDDDSM",
                                   "SDDFST"
                                 };
  final static String fid = "1100706173538";
  final static String rid = "4A36E7A2E0719";
  final static String fmtname = "ECL000118";
  final int FIELDCOUNT = 22;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USERID = null;
  private CharacterField fieldH01PROGRM = null;
  private CharacterField fieldH01TIMSYS = null;
  private CharacterField fieldH01SCRCOD = null;
  private CharacterField fieldH01OPECOD = null;
  private CharacterField fieldH01FLGMAS = null;
  private CharacterField fieldH01FLGWK1 = null;
  private CharacterField fieldH01FLGWK2 = null;
  private CharacterField fieldH01FLGWK3 = null;
  private CharacterField fieldSDDBNK = null;
  private CharacterField fieldSDDMON = null;
  private DecimalField fieldSDDFEI = null;
  private DecimalField fieldSDDFFI = null;
  private DecimalField fieldSDDDCL = null;
  private DecimalField fieldSDDDHB = null;
  private DecimalField fieldSDDCNA = null;
  private DecimalField fieldSDDCNM = null;
  private DecimalField fieldSDDCND = null;
  private DecimalField fieldSDDTCA = null;
  private DecimalField fieldSDDRTN = null;
  private DecimalField fieldSDDDSM = null;
  private CharacterField fieldSDDFST = null;

  /**
  * Constructor for ECL000118Message.
  */
  public ECL000118Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 102;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USERID");
    fields[1] = fieldH01PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PROGRM");
    fields[2] = fieldH01TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIMSYS");
    fields[3] = fieldH01SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCRCOD");
    fields[4] = fieldH01OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPECOD");
    fields[5] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01FLGMAS");
    fields[6] = fieldH01FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01FLGWK1");
    fields[7] = fieldH01FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01FLGWK2");
    fields[8] = fieldH01FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01FLGWK3");
    fields[9] = fieldSDDBNK =
    new CharacterField(message, HEADERSIZE + 42, 2, "SDDBNK");
    fields[10] = fieldSDDMON =
    new CharacterField(message, HEADERSIZE + 44, 3, "SDDMON");
    fields[11] = fieldSDDFEI =
    new DecimalField(message, HEADERSIZE + 47, 9, 0, "SDDFEI");
    fields[12] = fieldSDDFFI =
    new DecimalField(message, HEADERSIZE + 56, 9, 0, "SDDFFI");
    fields[13] = fieldSDDDCL =
    new DecimalField(message, HEADERSIZE + 65, 10, 0, "SDDDCL");
    fields[14] = fieldSDDDHB =
    new DecimalField(message, HEADERSIZE + 75, 10, 0, "SDDDHB");
    fields[15] = fieldSDDCNA =
    new DecimalField(message, HEADERSIZE + 85, 4, 0, "SDDCNA");
    fields[16] = fieldSDDCNM =
    new DecimalField(message, HEADERSIZE + 89, 3, 0, "SDDCNM");
    fields[17] = fieldSDDCND =
    new DecimalField(message, HEADERSIZE + 92, 3, 0, "SDDCND");
    fields[18] = fieldSDDTCA =
    new DecimalField(message, HEADERSIZE + 95, 2, 0, "SDDTCA");
    fields[19] = fieldSDDRTN =
    new DecimalField(message, HEADERSIZE + 97, 2, 0, "SDDRTN");
    fields[20] = fieldSDDDSM =
    new DecimalField(message, HEADERSIZE + 99, 2, 0, "SDDDSM");
    fields[21] = fieldSDDFST =
    new CharacterField(message, HEADERSIZE + 101, 1, "SDDFST");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USERID using a String value.
  */
  public void setH01USERID(String newvalue)
  {
    fieldH01USERID.setString(newvalue);
  }

  /**
  * Get value of field H01USERID as a String.
  */
  public String getH01USERID()
  {
    return fieldH01USERID.getString();
  }

  /**
  * Set field H01PROGRM using a String value.
  */
  public void setH01PROGRM(String newvalue)
  {
    fieldH01PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H01PROGRM as a String.
  */
  public String getH01PROGRM()
  {
    return fieldH01PROGRM.getString();
  }

  /**
  * Set field H01TIMSYS using a String value.
  */
  public void setH01TIMSYS(String newvalue)
  {
    fieldH01TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H01TIMSYS as a String.
  */
  public String getH01TIMSYS()
  {
    return fieldH01TIMSYS.getString();
  }

  /**
  * Set field H01SCRCOD using a String value.
  */
  public void setH01SCRCOD(String newvalue)
  {
    fieldH01SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H01SCRCOD as a String.
  */
  public String getH01SCRCOD()
  {
    return fieldH01SCRCOD.getString();
  }

  /**
  * Set field H01OPECOD using a String value.
  */
  public void setH01OPECOD(String newvalue)
  {
    fieldH01OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H01OPECOD as a String.
  */
  public String getH01OPECOD()
  {
    return fieldH01OPECOD.getString();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

  /**
  * Set field H01FLGWK1 using a String value.
  */
  public void setH01FLGWK1(String newvalue)
  {
    fieldH01FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK1 as a String.
  */
  public String getH01FLGWK1()
  {
    return fieldH01FLGWK1.getString();
  }

  /**
  * Set field H01FLGWK2 using a String value.
  */
  public void setH01FLGWK2(String newvalue)
  {
    fieldH01FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK2 as a String.
  */
  public String getH01FLGWK2()
  {
    return fieldH01FLGWK2.getString();
  }

  /**
  * Set field H01FLGWK3 using a String value.
  */
  public void setH01FLGWK3(String newvalue)
  {
    fieldH01FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK3 as a String.
  */
  public String getH01FLGWK3()
  {
    return fieldH01FLGWK3.getString();
  }

  /**
  * Set field SDDBNK using a String value.
  */
  public void setSDDBNK(String newvalue)
  {
    fieldSDDBNK.setString(newvalue);
  }

  /**
  * Get value of field SDDBNK as a String.
  */
  public String getSDDBNK()
  {
    return fieldSDDBNK.getString();
  }

  /**
  * Set field SDDMON using a String value.
  */
  public void setSDDMON(String newvalue)
  {
    fieldSDDMON.setString(newvalue);
  }

  /**
  * Get value of field SDDMON as a String.
  */
  public String getSDDMON()
  {
    return fieldSDDMON.getString();
  }

  /**
  * Set field SDDFEI using a String value.
  */
  public void setSDDFEI(String newvalue)
  {
    fieldSDDFEI.setString(newvalue);
  }

  /**
  * Get value of field SDDFEI as a String.
  */
  public String getSDDFEI()
  {
    return fieldSDDFEI.getString();
  }

  /**
  * Set numeric field SDDFEI using a BigDecimal value.
  */
  public void setSDDFEI(BigDecimal newvalue)
  {
    fieldSDDFEI.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SDDFEI as a BigDecimal.
  */
  public BigDecimal getBigDecimalSDDFEI()
  {
    return fieldSDDFEI.getBigDecimal();
  }

  /**
  * Set field SDDFFI using a String value.
  */
  public void setSDDFFI(String newvalue)
  {
    fieldSDDFFI.setString(newvalue);
  }

  /**
  * Get value of field SDDFFI as a String.
  */
  public String getSDDFFI()
  {
    return fieldSDDFFI.getString();
  }

  /**
  * Set numeric field SDDFFI using a BigDecimal value.
  */
  public void setSDDFFI(BigDecimal newvalue)
  {
    fieldSDDFFI.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SDDFFI as a BigDecimal.
  */
  public BigDecimal getBigDecimalSDDFFI()
  {
    return fieldSDDFFI.getBigDecimal();
  }

  /**
  * Set field SDDDCL using a String value.
  */
  public void setSDDDCL(String newvalue)
  {
    fieldSDDDCL.setString(newvalue);
  }

  /**
  * Get value of field SDDDCL as a String.
  */
  public String getSDDDCL()
  {
    return fieldSDDDCL.getString();
  }

  /**
  * Set numeric field SDDDCL using a BigDecimal value.
  */
  public void setSDDDCL(BigDecimal newvalue)
  {
    fieldSDDDCL.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SDDDCL as a BigDecimal.
  */
  public BigDecimal getBigDecimalSDDDCL()
  {
    return fieldSDDDCL.getBigDecimal();
  }

  /**
  * Set field SDDDHB using a String value.
  */
  public void setSDDDHB(String newvalue)
  {
    fieldSDDDHB.setString(newvalue);
  }

  /**
  * Get value of field SDDDHB as a String.
  */
  public String getSDDDHB()
  {
    return fieldSDDDHB.getString();
  }

  /**
  * Set numeric field SDDDHB using a BigDecimal value.
  */
  public void setSDDDHB(BigDecimal newvalue)
  {
    fieldSDDDHB.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SDDDHB as a BigDecimal.
  */
  public BigDecimal getBigDecimalSDDDHB()
  {
    return fieldSDDDHB.getBigDecimal();
  }

  /**
  * Set field SDDCNA using a String value.
  */
  public void setSDDCNA(String newvalue)
  {
    fieldSDDCNA.setString(newvalue);
  }

  /**
  * Get value of field SDDCNA as a String.
  */
  public String getSDDCNA()
  {
    return fieldSDDCNA.getString();
  }

  /**
  * Set numeric field SDDCNA using a BigDecimal value.
  */
  public void setSDDCNA(BigDecimal newvalue)
  {
    fieldSDDCNA.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SDDCNA as a BigDecimal.
  */
  public BigDecimal getBigDecimalSDDCNA()
  {
    return fieldSDDCNA.getBigDecimal();
  }

  /**
  * Set field SDDCNM using a String value.
  */
  public void setSDDCNM(String newvalue)
  {
    fieldSDDCNM.setString(newvalue);
  }

  /**
  * Get value of field SDDCNM as a String.
  */
  public String getSDDCNM()
  {
    return fieldSDDCNM.getString();
  }

  /**
  * Set numeric field SDDCNM using a BigDecimal value.
  */
  public void setSDDCNM(BigDecimal newvalue)
  {
    fieldSDDCNM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SDDCNM as a BigDecimal.
  */
  public BigDecimal getBigDecimalSDDCNM()
  {
    return fieldSDDCNM.getBigDecimal();
  }

  /**
  * Set field SDDCND using a String value.
  */
  public void setSDDCND(String newvalue)
  {
    fieldSDDCND.setString(newvalue);
  }

  /**
  * Get value of field SDDCND as a String.
  */
  public String getSDDCND()
  {
    return fieldSDDCND.getString();
  }

  /**
  * Set numeric field SDDCND using a BigDecimal value.
  */
  public void setSDDCND(BigDecimal newvalue)
  {
    fieldSDDCND.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SDDCND as a BigDecimal.
  */
  public BigDecimal getBigDecimalSDDCND()
  {
    return fieldSDDCND.getBigDecimal();
  }

  /**
  * Set field SDDTCA using a String value.
  */
  public void setSDDTCA(String newvalue)
  {
    fieldSDDTCA.setString(newvalue);
  }

  /**
  * Get value of field SDDTCA as a String.
  */
  public String getSDDTCA()
  {
    return fieldSDDTCA.getString();
  }

  /**
  * Set numeric field SDDTCA using a BigDecimal value.
  */
  public void setSDDTCA(BigDecimal newvalue)
  {
    fieldSDDTCA.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SDDTCA as a BigDecimal.
  */
  public BigDecimal getBigDecimalSDDTCA()
  {
    return fieldSDDTCA.getBigDecimal();
  }

  /**
  * Set field SDDRTN using a String value.
  */
  public void setSDDRTN(String newvalue)
  {
    fieldSDDRTN.setString(newvalue);
  }

  /**
  * Get value of field SDDRTN as a String.
  */
  public String getSDDRTN()
  {
    return fieldSDDRTN.getString();
  }

  /**
  * Set numeric field SDDRTN using a BigDecimal value.
  */
  public void setSDDRTN(BigDecimal newvalue)
  {
    fieldSDDRTN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SDDRTN as a BigDecimal.
  */
  public BigDecimal getBigDecimalSDDRTN()
  {
    return fieldSDDRTN.getBigDecimal();
  }

  /**
  * Set field SDDDSM using a String value.
  */
  public void setSDDDSM(String newvalue)
  {
    fieldSDDDSM.setString(newvalue);
  }

  /**
  * Get value of field SDDDSM as a String.
  */
  public String getSDDDSM()
  {
    return fieldSDDDSM.getString();
  }

  /**
  * Set numeric field SDDDSM using a BigDecimal value.
  */
  public void setSDDDSM(BigDecimal newvalue)
  {
    fieldSDDDSM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SDDDSM as a BigDecimal.
  */
  public BigDecimal getBigDecimalSDDDSM()
  {
    return fieldSDDDSM.getBigDecimal();
  }

  /**
  * Set field SDDFST using a String value.
  */
  public void setSDDFST(String newvalue)
  {
    fieldSDDFST.setString(newvalue);
  }

  /**
  * Get value of field SDDFST as a String.
  */
  public String getSDDFST()
  {
    return fieldSDDFST.getString();
  }

}

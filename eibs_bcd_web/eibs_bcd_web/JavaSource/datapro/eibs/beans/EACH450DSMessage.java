package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EACH450DS physical file definition.
* 
* File level identifier is 1120924175756.
* Record format level identifier is 365247113E4F6.
*/

public class EACH450DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USERID",
                                     "H01PROGRM",
                                     "H01TIMSYS",
                                     "H01SCRCOD",
                                     "H01OPECOD",
                                     "H01FLGMAS",
                                     "H01FLGWK1",
                                     "H01FLGWK2",
                                     "H01FLGWK3",
                                     "E01IBSREF",
                                     "E01ACHORC",
                                     "E01ACHCID",
                                     "E01ACHNME",
                                     "E01ACHEDT",
                                     "E01ACHAMT",
                                     "E01ACHROT",
                                     "E01ACHACC",
                                     "E01ACHATY",
                                     "E01ACHTRN",
                                     "E01ACHDCC",
                                     "E01ACHADR"
                                   };
  final static String tnames[] = {
                                   "USER",
                                   "PROGRAM",
                                   "TIME-DATE",
                                   "SCREEN",
                                   "OPERAT",
                                   "MORE",
                                   "LENGUAJE",
                                   "FLAG",
                                   "FLAG",
                                   "IBS",
                                   "ORIGINATORID",
                                   "CUSTOMERID",
                                   "NAME",
                                   "EFFECTIVEDATE",
                                   "TOTALAMOUNT",
                                   "R/TNUMBER",
                                   "ACCOUNTNUMBER",
                                   "ACCT.TYPE",
                                   "TRANSATIONCODE",
                                   "ACCT.CR/DR",
                                   "ADDENDAFORMAT"
                                 };
  final static String fid = "1120924175756";
  final static String rid = "365247113E4F6";
  final static String fmtname = "EACH450DS";
  final int FIELDCOUNT = 21;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USERID = null;
  private CharacterField fieldH01PROGRM = null;
  private CharacterField fieldH01TIMSYS = null;
  private CharacterField fieldH01SCRCOD = null;
  private CharacterField fieldH01OPECOD = null;
  private CharacterField fieldH01FLGMAS = null;
  private CharacterField fieldH01FLGWK1 = null;
  private CharacterField fieldH01FLGWK2 = null;
  private CharacterField fieldH01FLGWK3 = null;
  private DecimalField fieldE01IBSREF = null;
  private CharacterField fieldE01ACHORC = null;
  private CharacterField fieldE01ACHCID = null;
  private CharacterField fieldE01ACHNME = null;
  private CharacterField fieldE01ACHEDT = null;
  private DecimalField fieldE01ACHAMT = null;
  private CharacterField fieldE01ACHROT = null;
  private CharacterField fieldE01ACHACC = null;
  private CharacterField fieldE01ACHATY = null;
  private CharacterField fieldE01ACHTRN = null;
  private CharacterField fieldE01ACHDCC = null;
  private CharacterField fieldE01ACHADR = null;

  /**
  * Constructor for EACH450DSMessage.
  */
  public EACH450DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 314;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "USER");
    fields[1] = fieldH01PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "PROGRAM");
    fields[2] = fieldH01TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "TIME-DATE");
    fields[3] = fieldH01SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "SCREEN");
    fields[4] = fieldH01OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "OPERAT");
    fields[5] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "MORE");
    fields[6] = fieldH01FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "LENGUAJE");
    fields[7] = fieldH01FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "FLAG");
    fields[8] = fieldH01FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "FLAG");
    fields[9] = fieldE01IBSREF =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "IBS");
    fields[10] = fieldE01ACHORC =
    new CharacterField(message, HEADERSIZE + 55, 10, "ORIGINATORID");
    fields[11] = fieldE01ACHCID =
    new CharacterField(message, HEADERSIZE + 65, 25, "CUSTOMERID");
    fields[12] = fieldE01ACHNME =
    new CharacterField(message, HEADERSIZE + 90, 60, "NAME");
    fields[13] = fieldE01ACHEDT =
    new CharacterField(message, HEADERSIZE + 150, 10, "EFFECTIVEDATE");
    fields[14] = fieldE01ACHAMT =
    new DecimalField(message, HEADERSIZE + 160, 17, 2, "TOTALAMOUNT");
    fields[15] = fieldE01ACHROT =
    new CharacterField(message, HEADERSIZE + 177, 9, "R/TNUMBER");
    fields[16] = fieldE01ACHACC =
    new CharacterField(message, HEADERSIZE + 186, 17, "ACCOUNTNUMBER");
    fields[17] = fieldE01ACHATY =
    new CharacterField(message, HEADERSIZE + 203, 3, "ACCT.TYPE");
    fields[18] = fieldE01ACHTRN =
    new CharacterField(message, HEADERSIZE + 206, 2, "TRANSATIONCODE");
    fields[19] = fieldE01ACHDCC =
    new CharacterField(message, HEADERSIZE + 208, 6, "ACCT.CR/DR");
    fields[20] = fieldE01ACHADR =
    new CharacterField(message, HEADERSIZE + 214, 100, "ADDENDAFORMAT");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USERID using a String value.
  */
  public void setH01USERID(String newvalue)
  {
    fieldH01USERID.setString(newvalue);
  }

  /**
  * Get value of field H01USERID as a String.
  */
  public String getH01USERID()
  {
    return fieldH01USERID.getString();
  }

  /**
  * Set field H01PROGRM using a String value.
  */
  public void setH01PROGRM(String newvalue)
  {
    fieldH01PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H01PROGRM as a String.
  */
  public String getH01PROGRM()
  {
    return fieldH01PROGRM.getString();
  }

  /**
  * Set field H01TIMSYS using a String value.
  */
  public void setH01TIMSYS(String newvalue)
  {
    fieldH01TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H01TIMSYS as a String.
  */
  public String getH01TIMSYS()
  {
    return fieldH01TIMSYS.getString();
  }

  /**
  * Set field H01SCRCOD using a String value.
  */
  public void setH01SCRCOD(String newvalue)
  {
    fieldH01SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H01SCRCOD as a String.
  */
  public String getH01SCRCOD()
  {
    return fieldH01SCRCOD.getString();
  }

  /**
  * Set field H01OPECOD using a String value.
  */
  public void setH01OPECOD(String newvalue)
  {
    fieldH01OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H01OPECOD as a String.
  */
  public String getH01OPECOD()
  {
    return fieldH01OPECOD.getString();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

  /**
  * Set field H01FLGWK1 using a String value.
  */
  public void setH01FLGWK1(String newvalue)
  {
    fieldH01FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK1 as a String.
  */
  public String getH01FLGWK1()
  {
    return fieldH01FLGWK1.getString();
  }

  /**
  * Set field H01FLGWK2 using a String value.
  */
  public void setH01FLGWK2(String newvalue)
  {
    fieldH01FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK2 as a String.
  */
  public String getH01FLGWK2()
  {
    return fieldH01FLGWK2.getString();
  }

  /**
  * Set field H01FLGWK3 using a String value.
  */
  public void setH01FLGWK3(String newvalue)
  {
    fieldH01FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK3 as a String.
  */
  public String getH01FLGWK3()
  {
    return fieldH01FLGWK3.getString();
  }

  /**
  * Set field E01IBSREF using a String value.
  */
  public void setE01IBSREF(String newvalue)
  {
    fieldE01IBSREF.setString(newvalue);
  }

  /**
  * Get value of field E01IBSREF as a String.
  */
  public String getE01IBSREF()
  {
    return fieldE01IBSREF.getString();
  }

  /**
  * Set numeric field E01IBSREF using a BigDecimal value.
  */
  public void setE01IBSREF(BigDecimal newvalue)
  {
    fieldE01IBSREF.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01IBSREF as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01IBSREF()
  {
    return fieldE01IBSREF.getBigDecimal();
  }

  /**
  * Set field E01ACHORC using a String value.
  */
  public void setE01ACHORC(String newvalue)
  {
    fieldE01ACHORC.setString(newvalue);
  }

  /**
  * Get value of field E01ACHORC as a String.
  */
  public String getE01ACHORC()
  {
    return fieldE01ACHORC.getString();
  }

  /**
  * Set field E01ACHCID using a String value.
  */
  public void setE01ACHCID(String newvalue)
  {
    fieldE01ACHCID.setString(newvalue);
  }

  /**
  * Get value of field E01ACHCID as a String.
  */
  public String getE01ACHCID()
  {
    return fieldE01ACHCID.getString();
  }

  /**
  * Set field E01ACHNME using a String value.
  */
  public void setE01ACHNME(String newvalue)
  {
    fieldE01ACHNME.setString(newvalue);
  }

  /**
  * Get value of field E01ACHNME as a String.
  */
  public String getE01ACHNME()
  {
    return fieldE01ACHNME.getString();
  }

  /**
  * Set field E01ACHEDT using a String value.
  */
  public void setE01ACHEDT(String newvalue)
  {
    fieldE01ACHEDT.setString(newvalue);
  }

  /**
  * Get value of field E01ACHEDT as a String.
  */
  public String getE01ACHEDT()
  {
    return fieldE01ACHEDT.getString();
  }

  /**
  * Set field E01ACHAMT using a String value.
  */
  public void setE01ACHAMT(String newvalue)
  {
    fieldE01ACHAMT.setString(newvalue);
  }

  /**
  * Get value of field E01ACHAMT as a String.
  */
  public String getE01ACHAMT()
  {
    return fieldE01ACHAMT.getString();
  }

  /**
  * Set numeric field E01ACHAMT using a BigDecimal value.
  */
  public void setE01ACHAMT(BigDecimal newvalue)
  {
    fieldE01ACHAMT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01ACHAMT as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01ACHAMT()
  {
    return fieldE01ACHAMT.getBigDecimal();
  }

  /**
  * Set field E01ACHROT using a String value.
  */
  public void setE01ACHROT(String newvalue)
  {
    fieldE01ACHROT.setString(newvalue);
  }

  /**
  * Get value of field E01ACHROT as a String.
  */
  public String getE01ACHROT()
  {
    return fieldE01ACHROT.getString();
  }

  /**
  * Set field E01ACHACC using a String value.
  */
  public void setE01ACHACC(String newvalue)
  {
    fieldE01ACHACC.setString(newvalue);
  }

  /**
  * Get value of field E01ACHACC as a String.
  */
  public String getE01ACHACC()
  {
    return fieldE01ACHACC.getString();
  }

  /**
  * Set field E01ACHATY using a String value.
  */
  public void setE01ACHATY(String newvalue)
  {
    fieldE01ACHATY.setString(newvalue);
  }

  /**
  * Get value of field E01ACHATY as a String.
  */
  public String getE01ACHATY()
  {
    return fieldE01ACHATY.getString();
  }

  /**
  * Set field E01ACHTRN using a String value.
  */
  public void setE01ACHTRN(String newvalue)
  {
    fieldE01ACHTRN.setString(newvalue);
  }

  /**
  * Get value of field E01ACHTRN as a String.
  */
  public String getE01ACHTRN()
  {
    return fieldE01ACHTRN.getString();
  }

  /**
  * Set field E01ACHDCC using a String value.
  */
  public void setE01ACHDCC(String newvalue)
  {
    fieldE01ACHDCC.setString(newvalue);
  }

  /**
  * Get value of field E01ACHDCC as a String.
  */
  public String getE01ACHDCC()
  {
    return fieldE01ACHDCC.getString();
  }

  /**
  * Set field E01ACHADR using a String value.
  */
  public void setE01ACHADR(String newvalue)
  {
    fieldE01ACHADR.setString(newvalue);
  }

  /**
  * Get value of field E01ACHADR as a String.
  */
  public String getE01ACHADR()
  {
    return fieldE01ACHADR.getString();
  }

}

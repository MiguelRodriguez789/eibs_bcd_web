package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ECO100003 physical file definition.
* 
* File level identifier is 1130611131010.
* Record format level identifier is 48267E6C4A649.
*/

public class ECO100003Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "USUARIO",
                                     "CONVENIO",
                                     "PLANILLA",
                                     "MONEDA",
                                     "RUT",
                                     "CUOPARTIC",
                                     "PRESTAMO",
                                     "AHORROS",
                                     "REMANENTE",
                                     "VALRECIBO",
                                     "NOVEDAD",
                                     "FLAGMAS"
                                   };
  final static String tnames[] = {
                                   "USUARIO",
                                   "CONVENIO",
                                   "PLANILLA",
                                   "MONEDA",
                                   "RUT",
                                   "CUOPARTIC",
                                   "PRESTAMO",
                                   "AHORROS",
                                   "REMANENTE",
                                   "VALRECIBO",
                                   "NOVEDAD",
                                   "FLAGMAS"
                                 };
  final static String fid = "1130611131010";
  final static String rid = "48267E6C4A649";
  final static String fmtname = "ECO100003";
  final int FIELDCOUNT = 12;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldUSUARIO = null;
  private CharacterField fieldCONVENIO = null;
  private DecimalField fieldPLANILLA = null;
  private CharacterField fieldMONEDA = null;
  private CharacterField fieldRUT = null;
  private DecimalField fieldCUOPARTIC = null;
  private DecimalField fieldPRESTAMO = null;
  private DecimalField fieldAHORROS = null;
  private DecimalField fieldREMANENTE = null;
  private DecimalField fieldVALRECIBO = null;
  private DecimalField fieldNOVEDAD = null;
  private CharacterField fieldFLAGMAS = null;

  /**
  * Constructor for ECO100003Message.
  */
  public ECO100003Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 153;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldUSUARIO =
    new CharacterField(message, HEADERSIZE + 0, 10, "USUARIO");
    fields[1] = fieldCONVENIO =
    new CharacterField(message, HEADERSIZE + 10, 4, "CONVENIO");
    fields[2] = fieldPLANILLA =
    new DecimalField(message, HEADERSIZE + 14, 13, 0, "PLANILLA");
    fields[3] = fieldMONEDA =
    new CharacterField(message, HEADERSIZE + 27, 3, "MONEDA");
    fields[4] = fieldRUT =
    new CharacterField(message, HEADERSIZE + 30, 25, "RUT");
    fields[5] = fieldCUOPARTIC =
    new DecimalField(message, HEADERSIZE + 55, 19, 4, "CUOPARTIC");
    fields[6] = fieldPRESTAMO =
    new DecimalField(message, HEADERSIZE + 74, 19, 4, "PRESTAMO");
    fields[7] = fieldAHORROS =
    new DecimalField(message, HEADERSIZE + 93, 19, 4, "AHORROS");
    fields[8] = fieldREMANENTE =
    new DecimalField(message, HEADERSIZE + 112, 19, 4, "REMANENTE");
    fields[9] = fieldVALRECIBO =
    new DecimalField(message, HEADERSIZE + 131, 19, 4, "VALRECIBO");
    fields[10] = fieldNOVEDAD =
    new DecimalField(message, HEADERSIZE + 150, 2, 0, "NOVEDAD");
    fields[11] = fieldFLAGMAS =
    new CharacterField(message, HEADERSIZE + 152, 1, "FLAGMAS");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field USUARIO using a String value.
  */
  public void setUSUARIO(String newvalue)
  {
    fieldUSUARIO.setString(newvalue);
  }

  /**
  * Get value of field USUARIO as a String.
  */
  public String getUSUARIO()
  {
    return fieldUSUARIO.getString();
  }

  /**
  * Set field CONVENIO using a String value.
  */
  public void setCONVENIO(String newvalue)
  {
    fieldCONVENIO.setString(newvalue);
  }

  /**
  * Get value of field CONVENIO as a String.
  */
  public String getCONVENIO()
  {
    return fieldCONVENIO.getString();
  }

  /**
  * Set field PLANILLA using a String value.
  */
  public void setPLANILLA(String newvalue)
  {
    fieldPLANILLA.setString(newvalue);
  }

  /**
  * Get value of field PLANILLA as a String.
  */
  public String getPLANILLA()
  {
    return fieldPLANILLA.getString();
  }

  /**
  * Set numeric field PLANILLA using a BigDecimal value.
  */
  public void setPLANILLA(BigDecimal newvalue)
  {
    fieldPLANILLA.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field PLANILLA as a BigDecimal.
  */
  public BigDecimal getBigDecimalPLANILLA()
  {
    return fieldPLANILLA.getBigDecimal();
  }

  /**
  * Set field MONEDA using a String value.
  */
  public void setMONEDA(String newvalue)
  {
    fieldMONEDA.setString(newvalue);
  }

  /**
  * Get value of field MONEDA as a String.
  */
  public String getMONEDA()
  {
    return fieldMONEDA.getString();
  }

  /**
  * Set field RUT using a String value.
  */
  public void setRUT(String newvalue)
  {
    fieldRUT.setString(newvalue);
  }

  /**
  * Get value of field RUT as a String.
  */
  public String getRUT()
  {
    return fieldRUT.getString();
  }

  /**
  * Set field CUOPARTIC using a String value.
  */
  public void setCUOPARTIC(String newvalue)
  {
    fieldCUOPARTIC.setString(newvalue);
  }

  /**
  * Get value of field CUOPARTIC as a String.
  */
  public String getCUOPARTIC()
  {
    return fieldCUOPARTIC.getString();
  }

  /**
  * Set numeric field CUOPARTIC using a BigDecimal value.
  */
  public void setCUOPARTIC(BigDecimal newvalue)
  {
    fieldCUOPARTIC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CUOPARTIC as a BigDecimal.
  */
  public BigDecimal getBigDecimalCUOPARTIC()
  {
    return fieldCUOPARTIC.getBigDecimal();
  }

  /**
  * Set field PRESTAMO using a String value.
  */
  public void setPRESTAMO(String newvalue)
  {
    fieldPRESTAMO.setString(newvalue);
  }

  /**
  * Get value of field PRESTAMO as a String.
  */
  public String getPRESTAMO()
  {
    return fieldPRESTAMO.getString();
  }

  /**
  * Set numeric field PRESTAMO using a BigDecimal value.
  */
  public void setPRESTAMO(BigDecimal newvalue)
  {
    fieldPRESTAMO.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field PRESTAMO as a BigDecimal.
  */
  public BigDecimal getBigDecimalPRESTAMO()
  {
    return fieldPRESTAMO.getBigDecimal();
  }

  /**
  * Set field AHORROS using a String value.
  */
  public void setAHORROS(String newvalue)
  {
    fieldAHORROS.setString(newvalue);
  }

  /**
  * Get value of field AHORROS as a String.
  */
  public String getAHORROS()
  {
    return fieldAHORROS.getString();
  }

  /**
  * Set numeric field AHORROS using a BigDecimal value.
  */
  public void setAHORROS(BigDecimal newvalue)
  {
    fieldAHORROS.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field AHORROS as a BigDecimal.
  */
  public BigDecimal getBigDecimalAHORROS()
  {
    return fieldAHORROS.getBigDecimal();
  }

  /**
  * Set field REMANENTE using a String value.
  */
  public void setREMANENTE(String newvalue)
  {
    fieldREMANENTE.setString(newvalue);
  }

  /**
  * Get value of field REMANENTE as a String.
  */
  public String getREMANENTE()
  {
    return fieldREMANENTE.getString();
  }

  /**
  * Set numeric field REMANENTE using a BigDecimal value.
  */
  public void setREMANENTE(BigDecimal newvalue)
  {
    fieldREMANENTE.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field REMANENTE as a BigDecimal.
  */
  public BigDecimal getBigDecimalREMANENTE()
  {
    return fieldREMANENTE.getBigDecimal();
  }

  /**
  * Set field VALRECIBO using a String value.
  */
  public void setVALRECIBO(String newvalue)
  {
    fieldVALRECIBO.setString(newvalue);
  }

  /**
  * Get value of field VALRECIBO as a String.
  */
  public String getVALRECIBO()
  {
    return fieldVALRECIBO.getString();
  }

  /**
  * Set numeric field VALRECIBO using a BigDecimal value.
  */
  public void setVALRECIBO(BigDecimal newvalue)
  {
    fieldVALRECIBO.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field VALRECIBO as a BigDecimal.
  */
  public BigDecimal getBigDecimalVALRECIBO()
  {
    return fieldVALRECIBO.getBigDecimal();
  }

  /**
  * Set field NOVEDAD using a String value.
  */
  public void setNOVEDAD(String newvalue)
  {
    fieldNOVEDAD.setString(newvalue);
  }

  /**
  * Get value of field NOVEDAD as a String.
  */
  public String getNOVEDAD()
  {
    return fieldNOVEDAD.getString();
  }

  /**
  * Set numeric field NOVEDAD using a BigDecimal value.
  */
  public void setNOVEDAD(BigDecimal newvalue)
  {
    fieldNOVEDAD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field NOVEDAD as a BigDecimal.
  */
  public BigDecimal getBigDecimalNOVEDAD()
  {
    return fieldNOVEDAD.getBigDecimal();
  }

  /**
  * Set field FLAGMAS using a String value.
  */
  public void setFLAGMAS(String newvalue)
  {
    fieldFLAGMAS.setString(newvalue);
  }

  /**
  * Get value of field FLAGMAS as a String.
  */
  public String getFLAGMAS()
  {
    return fieldFLAGMAS.getString();
  }

}

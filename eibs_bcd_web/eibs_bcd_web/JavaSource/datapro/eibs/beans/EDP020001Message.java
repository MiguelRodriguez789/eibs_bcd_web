package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EDP020001 physical file definition.
* 
* File level identifier is 1160308065831.
* Record format level identifier is 42AF260E04753.
*/

public class EDP020001Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USERID",
                                     "H01PROGRM",
                                     "H01TIMSYS",
                                     "H01SCRCOD",
                                     "H01OPECOD",
                                     "H01FLGMAS",
                                     "H01FLGWK1",
                                     "H01FLGWK2",
                                     "H01FLGWK3",
                                     "E01CNTLAN",
                                     "E01DPANPR",
                                     "E01DPASEF",
                                     "E01DPAPRO",
                                     "E01DPATYP",
                                     "E01DPATCO",
                                     "E01DPAMNS",
                                     "E01DPASEQ",
                                     "E01DPACOM",
                                     "E01DPAREF",
                                     "E01DPAAMN",
                                     "E01OPECDE"
                                   };
  final static String tnames[] = {
                                   "H01USERID",
                                   "H01PROGRM",
                                   "H01TIMSYS",
                                   "H01SCRCOD",
                                   "H01OPECOD",
                                   "H01FLGMAS",
                                   "H01FLGWK1",
                                   "H01FLGWK2",
                                   "H01FLGWK3",
                                   "E01CNTLAN",
                                   "E01DPANPR",
                                   "E01DPASEF",
                                   "E01DPAPRO",
                                   "E01DPATYP",
                                   "E01DPATCO",
                                   "E01DPAMNS",
                                   "E01DPASEQ",
                                   "E01DPACOM",
                                   "E01DPAREF",
                                   "E01DPAAMN",
                                   "E01OPECDE"
                                 };
  final static String fid = "1160308065831";
  final static String rid = "42AF260E04753";
  final static String fmtname = "EDP020001";
  final int FIELDCOUNT = 21;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USERID = null;
  private CharacterField fieldH01PROGRM = null;
  private CharacterField fieldH01TIMSYS = null;
  private CharacterField fieldH01SCRCOD = null;
  private CharacterField fieldH01OPECOD = null;
  private CharacterField fieldH01FLGMAS = null;
  private CharacterField fieldH01FLGWK1 = null;
  private CharacterField fieldH01FLGWK2 = null;
  private CharacterField fieldH01FLGWK3 = null;
  private CharacterField fieldE01CNTLAN = null;
  private DecimalField fieldE01DPANPR = null;
  private DecimalField fieldE01DPASEF = null;
  private CharacterField fieldE01DPAPRO = null;
  private CharacterField fieldE01DPATYP = null;
  private CharacterField fieldE01DPATCO = null;
  private CharacterField fieldE01DPAMNS = null;
  private DecimalField fieldE01DPASEQ = null;
  private CharacterField fieldE01DPACOM = null;
  private DecimalField fieldE01DPAREF = null;
  private DecimalField fieldE01DPAAMN = null;
  private CharacterField fieldE01OPECDE = null;

  /**
  * Constructor for EDP020001Message.
  */
  public EDP020001Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 8107;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USERID");
    fields[1] = fieldH01PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PROGRM");
    fields[2] = fieldH01TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIMSYS");
    fields[3] = fieldH01SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCRCOD");
    fields[4] = fieldH01OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPECOD");
    fields[5] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01FLGMAS");
    fields[6] = fieldH01FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01FLGWK1");
    fields[7] = fieldH01FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01FLGWK2");
    fields[8] = fieldH01FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01FLGWK3");
    fields[9] = fieldE01CNTLAN =
    new CharacterField(message, HEADERSIZE + 42, 1, "E01CNTLAN");
    fields[10] = fieldE01DPANPR =
    new DecimalField(message, HEADERSIZE + 43, 13, 0, "E01DPANPR");
    fields[11] = fieldE01DPASEF =
    new DecimalField(message, HEADERSIZE + 56, 4, 0, "E01DPASEF");
    fields[12] = fieldE01DPAPRO =
    new CharacterField(message, HEADERSIZE + 60, 4, "E01DPAPRO");
    fields[13] = fieldE01DPATYP =
    new CharacterField(message, HEADERSIZE + 64, 4, "E01DPATYP");
    fields[14] = fieldE01DPATCO =
    new CharacterField(message, HEADERSIZE + 68, 2, "E01DPATCO");
    fields[15] = fieldE01DPAMNS =
    new CharacterField(message, HEADERSIZE + 70, 2, "E01DPAMNS");
    fields[16] = fieldE01DPASEQ =
    new DecimalField(message, HEADERSIZE + 72, 4, 0, "E01DPASEQ");
    fields[17] = fieldE01DPACOM =
    new CharacterField(message, HEADERSIZE + 76, 8000, "E01DPACOM");
    fields[18] = fieldE01DPAREF =
    new DecimalField(message, HEADERSIZE + 8076, 13, 0, "E01DPAREF");
    fields[19] = fieldE01DPAAMN =
    new DecimalField(message, HEADERSIZE + 8089, 17, 2, "E01DPAAMN");
    fields[20] = fieldE01OPECDE =
    new CharacterField(message, HEADERSIZE + 8106, 1, "E01OPECDE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USERID using a String value.
  */
  public void setH01USERID(String newvalue)
  {
    fieldH01USERID.setString(newvalue);
  }

  /**
  * Get value of field H01USERID as a String.
  */
  public String getH01USERID()
  {
    return fieldH01USERID.getString();
  }

  /**
  * Set field H01PROGRM using a String value.
  */
  public void setH01PROGRM(String newvalue)
  {
    fieldH01PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H01PROGRM as a String.
  */
  public String getH01PROGRM()
  {
    return fieldH01PROGRM.getString();
  }

  /**
  * Set field H01TIMSYS using a String value.
  */
  public void setH01TIMSYS(String newvalue)
  {
    fieldH01TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H01TIMSYS as a String.
  */
  public String getH01TIMSYS()
  {
    return fieldH01TIMSYS.getString();
  }

  /**
  * Set field H01SCRCOD using a String value.
  */
  public void setH01SCRCOD(String newvalue)
  {
    fieldH01SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H01SCRCOD as a String.
  */
  public String getH01SCRCOD()
  {
    return fieldH01SCRCOD.getString();
  }

  /**
  * Set field H01OPECOD using a String value.
  */
  public void setH01OPECOD(String newvalue)
  {
    fieldH01OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H01OPECOD as a String.
  */
  public String getH01OPECOD()
  {
    return fieldH01OPECOD.getString();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

  /**
  * Set field H01FLGWK1 using a String value.
  */
  public void setH01FLGWK1(String newvalue)
  {
    fieldH01FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK1 as a String.
  */
  public String getH01FLGWK1()
  {
    return fieldH01FLGWK1.getString();
  }

  /**
  * Set field H01FLGWK2 using a String value.
  */
  public void setH01FLGWK2(String newvalue)
  {
    fieldH01FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK2 as a String.
  */
  public String getH01FLGWK2()
  {
    return fieldH01FLGWK2.getString();
  }

  /**
  * Set field H01FLGWK3 using a String value.
  */
  public void setH01FLGWK3(String newvalue)
  {
    fieldH01FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK3 as a String.
  */
  public String getH01FLGWK3()
  {
    return fieldH01FLGWK3.getString();
  }

  /**
  * Set field E01CNTLAN using a String value.
  */
  public void setE01CNTLAN(String newvalue)
  {
    fieldE01CNTLAN.setString(newvalue);
  }

  /**
  * Get value of field E01CNTLAN as a String.
  */
  public String getE01CNTLAN()
  {
    return fieldE01CNTLAN.getString();
  }

  /**
  * Set field E01DPANPR using a String value.
  */
  public void setE01DPANPR(String newvalue)
  {
    fieldE01DPANPR.setString(newvalue);
  }

  /**
  * Get value of field E01DPANPR as a String.
  */
  public String getE01DPANPR()
  {
    return fieldE01DPANPR.getString();
  }

  /**
  * Set numeric field E01DPANPR using a BigDecimal value.
  */
  public void setE01DPANPR(BigDecimal newvalue)
  {
    fieldE01DPANPR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01DPANPR as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01DPANPR()
  {
    return fieldE01DPANPR.getBigDecimal();
  }

  /**
  * Set field E01DPASEF using a String value.
  */
  public void setE01DPASEF(String newvalue)
  {
    fieldE01DPASEF.setString(newvalue);
  }

  /**
  * Get value of field E01DPASEF as a String.
  */
  public String getE01DPASEF()
  {
    return fieldE01DPASEF.getString();
  }

  /**
  * Set numeric field E01DPASEF using a BigDecimal value.
  */
  public void setE01DPASEF(BigDecimal newvalue)
  {
    fieldE01DPASEF.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01DPASEF as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01DPASEF()
  {
    return fieldE01DPASEF.getBigDecimal();
  }

  /**
  * Set field E01DPAPRO using a String value.
  */
  public void setE01DPAPRO(String newvalue)
  {
    fieldE01DPAPRO.setString(newvalue);
  }

  /**
  * Get value of field E01DPAPRO as a String.
  */
  public String getE01DPAPRO()
  {
    return fieldE01DPAPRO.getString();
  }

  /**
  * Set field E01DPATYP using a String value.
  */
  public void setE01DPATYP(String newvalue)
  {
    fieldE01DPATYP.setString(newvalue);
  }

  /**
  * Get value of field E01DPATYP as a String.
  */
  public String getE01DPATYP()
  {
    return fieldE01DPATYP.getString();
  }

  /**
  * Set field E01DPATCO using a String value.
  */
  public void setE01DPATCO(String newvalue)
  {
    fieldE01DPATCO.setString(newvalue);
  }

  /**
  * Get value of field E01DPATCO as a String.
  */
  public String getE01DPATCO()
  {
    return fieldE01DPATCO.getString();
  }

  /**
  * Set field E01DPAMNS using a String value.
  */
  public void setE01DPAMNS(String newvalue)
  {
    fieldE01DPAMNS.setString(newvalue);
  }

  /**
  * Get value of field E01DPAMNS as a String.
  */
  public String getE01DPAMNS()
  {
    return fieldE01DPAMNS.getString();
  }

  /**
  * Set field E01DPASEQ using a String value.
  */
  public void setE01DPASEQ(String newvalue)
  {
    fieldE01DPASEQ.setString(newvalue);
  }

  /**
  * Get value of field E01DPASEQ as a String.
  */
  public String getE01DPASEQ()
  {
    return fieldE01DPASEQ.getString();
  }

  /**
  * Set numeric field E01DPASEQ using a BigDecimal value.
  */
  public void setE01DPASEQ(BigDecimal newvalue)
  {
    fieldE01DPASEQ.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01DPASEQ as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01DPASEQ()
  {
    return fieldE01DPASEQ.getBigDecimal();
  }

  /**
  * Set field E01DPACOM using a String value.
  */
  public void setE01DPACOM(String newvalue)
  {
    fieldE01DPACOM.setString(newvalue);
  }

  /**
  * Get value of field E01DPACOM as a String.
  */
  public String getE01DPACOM()
  {
    return fieldE01DPACOM.getString();
  }

  /**
  * Set field E01DPAREF using a String value.
  */
  public void setE01DPAREF(String newvalue)
  {
    fieldE01DPAREF.setString(newvalue);
  }

  /**
  * Get value of field E01DPAREF as a String.
  */
  public String getE01DPAREF()
  {
    return fieldE01DPAREF.getString();
  }

  /**
  * Set numeric field E01DPAREF using a BigDecimal value.
  */
  public void setE01DPAREF(BigDecimal newvalue)
  {
    fieldE01DPAREF.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01DPAREF as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01DPAREF()
  {
    return fieldE01DPAREF.getBigDecimal();
  }

  /**
  * Set field E01DPAAMN using a String value.
  */
  public void setE01DPAAMN(String newvalue)
  {
    fieldE01DPAAMN.setString(newvalue);
  }

  /**
  * Get value of field E01DPAAMN as a String.
  */
  public String getE01DPAAMN()
  {
    return fieldE01DPAAMN.getString();
  }

  /**
  * Set numeric field E01DPAAMN using a BigDecimal value.
  */
  public void setE01DPAAMN(BigDecimal newvalue)
  {
    fieldE01DPAAMN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E01DPAAMN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE01DPAAMN()
  {
    return fieldE01DPAAMN.getBigDecimal();
  }

  /**
  * Set field E01OPECDE using a String value.
  */
  public void setE01OPECDE(String newvalue)
  {
    fieldE01OPECDE.setString(newvalue);
  }

  /**
  * Get value of field E01OPECDE as a String.
  */
  public String getE01OPECDE()
  {
    return fieldE01OPECDE.getString();
  }

}

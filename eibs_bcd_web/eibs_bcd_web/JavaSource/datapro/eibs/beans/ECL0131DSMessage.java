package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ECL0131DS physical file definition.
* 
* File level identifier is 1130611112848.
* Record format level identifier is 4995241736419.
*/

public class ECL0131DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "H02USERID",
                                     "H02PROGRM",
                                     "H02TIMSYS",
                                     "H02SCRCOD",
                                     "H02OPECOD",
                                     "H02FLGMAS",
                                     "H02FLGWK1",
                                     "H02FLGWK2",
                                     "H02FLGWK3",
                                     "E02MOVCTA",
                                     "E02MOVCDE",
                                     "E02MOVNAR",
                                     "E02MOVCKN",
                                     "E02MOVAMT",
                                     "E02MOVDCC",
                                     "E02MOVFBA",
                                     "E02MOVFVA"
                                   };
  final static String tnames[] = {
                                   "H02USERID",
                                   "H02PROGRM",
                                   "H02TIMSYS",
                                   "H02SCRCOD",
                                   "H02OPECOD",
                                   "H02FLGMAS",
                                   "H02FLGWK1",
                                   "H02FLGWK2",
                                   "H02FLGWK3",
                                   "E02MOVCTA",
                                   "E02MOVCDE",
                                   "E02MOVNAR",
                                   "E02MOVCKN",
                                   "E02MOVAMT",
                                   "E02MOVDCC",
                                   "E02MOVFBA",
                                   "E02MOVFVA"
                                 };
  final static String fid = "1130611112848";
  final static String rid = "4995241736419";
  final static String fmtname = "ECL0131DS";
  final int FIELDCOUNT = 17;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH02USERID = null;
  private CharacterField fieldH02PROGRM = null;
  private CharacterField fieldH02TIMSYS = null;
  private CharacterField fieldH02SCRCOD = null;
  private CharacterField fieldH02OPECOD = null;
  private CharacterField fieldH02FLGMAS = null;
  private CharacterField fieldH02FLGWK1 = null;
  private CharacterField fieldH02FLGWK2 = null;
  private CharacterField fieldH02FLGWK3 = null;
  private CharacterField fieldE02MOVCTA = null;
  private CharacterField fieldE02MOVCDE = null;
  private CharacterField fieldE02MOVNAR = null;
  private DecimalField fieldE02MOVCKN = null;
  private DecimalField fieldE02MOVAMT = null;
  private CharacterField fieldE02MOVDCC = null;
  private DecimalField fieldE02MOVFBA = null;
  private DecimalField fieldE02MOVFVA = null;

  /**
  * Constructor for ECL0131DSMessage.
  */
  public ECL0131DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 174;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH02USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H02USERID");
    fields[1] = fieldH02PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H02PROGRM");
    fields[2] = fieldH02TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H02TIMSYS");
    fields[3] = fieldH02SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H02SCRCOD");
    fields[4] = fieldH02OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H02OPECOD");
    fields[5] = fieldH02FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H02FLGMAS");
    fields[6] = fieldH02FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H02FLGWK1");
    fields[7] = fieldH02FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H02FLGWK2");
    fields[8] = fieldH02FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H02FLGWK3");
    fields[9] = fieldE02MOVCTA =
    new CharacterField(message, HEADERSIZE + 42, 20, "E02MOVCTA");
    fields[10] = fieldE02MOVCDE =
    new CharacterField(message, HEADERSIZE + 62, 4, "E02MOVCDE");
    fields[11] = fieldE02MOVNAR =
    new CharacterField(message, HEADERSIZE + 66, 60, "E02MOVNAR");
    fields[12] = fieldE02MOVCKN =
    new DecimalField(message, HEADERSIZE + 126, 12, 0, "E02MOVCKN");
    fields[13] = fieldE02MOVAMT =
    new DecimalField(message, HEADERSIZE + 138, 17, 2, "E02MOVAMT");
    fields[14] = fieldE02MOVDCC =
    new CharacterField(message, HEADERSIZE + 155, 1, "E02MOVDCC");
    fields[15] = fieldE02MOVFBA =
    new DecimalField(message, HEADERSIZE + 156, 9, 0, "E02MOVFBA");
    fields[16] = fieldE02MOVFVA =
    new DecimalField(message, HEADERSIZE + 165, 9, 0, "E02MOVFVA");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H02USERID using a String value.
  */
  public void setH02USERID(String newvalue)
  {
    fieldH02USERID.setString(newvalue);
  }

  /**
  * Get value of field H02USERID as a String.
  */
  public String getH02USERID()
  {
    return fieldH02USERID.getString();
  }

  /**
  * Set field H02PROGRM using a String value.
  */
  public void setH02PROGRM(String newvalue)
  {
    fieldH02PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H02PROGRM as a String.
  */
  public String getH02PROGRM()
  {
    return fieldH02PROGRM.getString();
  }

  /**
  * Set field H02TIMSYS using a String value.
  */
  public void setH02TIMSYS(String newvalue)
  {
    fieldH02TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H02TIMSYS as a String.
  */
  public String getH02TIMSYS()
  {
    return fieldH02TIMSYS.getString();
  }

  /**
  * Set field H02SCRCOD using a String value.
  */
  public void setH02SCRCOD(String newvalue)
  {
    fieldH02SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H02SCRCOD as a String.
  */
  public String getH02SCRCOD()
  {
    return fieldH02SCRCOD.getString();
  }

  /**
  * Set field H02OPECOD using a String value.
  */
  public void setH02OPECOD(String newvalue)
  {
    fieldH02OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H02OPECOD as a String.
  */
  public String getH02OPECOD()
  {
    return fieldH02OPECOD.getString();
  }

  /**
  * Set field H02FLGMAS using a String value.
  */
  public void setH02FLGMAS(String newvalue)
  {
    fieldH02FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H02FLGMAS as a String.
  */
  public String getH02FLGMAS()
  {
    return fieldH02FLGMAS.getString();
  }

  /**
  * Set field H02FLGWK1 using a String value.
  */
  public void setH02FLGWK1(String newvalue)
  {
    fieldH02FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK1 as a String.
  */
  public String getH02FLGWK1()
  {
    return fieldH02FLGWK1.getString();
  }

  /**
  * Set field H02FLGWK2 using a String value.
  */
  public void setH02FLGWK2(String newvalue)
  {
    fieldH02FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK2 as a String.
  */
  public String getH02FLGWK2()
  {
    return fieldH02FLGWK2.getString();
  }

  /**
  * Set field H02FLGWK3 using a String value.
  */
  public void setH02FLGWK3(String newvalue)
  {
    fieldH02FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK3 as a String.
  */
  public String getH02FLGWK3()
  {
    return fieldH02FLGWK3.getString();
  }

  /**
  * Set field E02MOVCTA using a String value.
  */
  public void setE02MOVCTA(String newvalue)
  {
    fieldE02MOVCTA.setString(newvalue);
  }

  /**
  * Get value of field E02MOVCTA as a String.
  */
  public String getE02MOVCTA()
  {
    return fieldE02MOVCTA.getString();
  }

  /**
  * Set field E02MOVCDE using a String value.
  */
  public void setE02MOVCDE(String newvalue)
  {
    fieldE02MOVCDE.setString(newvalue);
  }

  /**
  * Get value of field E02MOVCDE as a String.
  */
  public String getE02MOVCDE()
  {
    return fieldE02MOVCDE.getString();
  }

  /**
  * Set field E02MOVNAR using a String value.
  */
  public void setE02MOVNAR(String newvalue)
  {
    fieldE02MOVNAR.setString(newvalue);
  }

  /**
  * Get value of field E02MOVNAR as a String.
  */
  public String getE02MOVNAR()
  {
    return fieldE02MOVNAR.getString();
  }

  /**
  * Set field E02MOVCKN using a String value.
  */
  public void setE02MOVCKN(String newvalue)
  {
    fieldE02MOVCKN.setString(newvalue);
  }

  /**
  * Get value of field E02MOVCKN as a String.
  */
  public String getE02MOVCKN()
  {
    return fieldE02MOVCKN.getString();
  }

  /**
  * Set numeric field E02MOVCKN using a BigDecimal value.
  */
  public void setE02MOVCKN(BigDecimal newvalue)
  {
    fieldE02MOVCKN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02MOVCKN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02MOVCKN()
  {
    return fieldE02MOVCKN.getBigDecimal();
  }

  /**
  * Set field E02MOVAMT using a String value.
  */
  public void setE02MOVAMT(String newvalue)
  {
    fieldE02MOVAMT.setString(newvalue);
  }

  /**
  * Get value of field E02MOVAMT as a String.
  */
  public String getE02MOVAMT()
  {
    return fieldE02MOVAMT.getString();
  }

  /**
  * Set numeric field E02MOVAMT using a BigDecimal value.
  */
  public void setE02MOVAMT(BigDecimal newvalue)
  {
    fieldE02MOVAMT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02MOVAMT as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02MOVAMT()
  {
    return fieldE02MOVAMT.getBigDecimal();
  }

  /**
  * Set field E02MOVDCC using a String value.
  */
  public void setE02MOVDCC(String newvalue)
  {
    fieldE02MOVDCC.setString(newvalue);
  }

  /**
  * Get value of field E02MOVDCC as a String.
  */
  public String getE02MOVDCC()
  {
    return fieldE02MOVDCC.getString();
  }

  /**
  * Set field E02MOVFBA using a String value.
  */
  public void setE02MOVFBA(String newvalue)
  {
    fieldE02MOVFBA.setString(newvalue);
  }

  /**
  * Get value of field E02MOVFBA as a String.
  */
  public String getE02MOVFBA()
  {
    return fieldE02MOVFBA.getString();
  }

  /**
  * Set numeric field E02MOVFBA using a BigDecimal value.
  */
  public void setE02MOVFBA(BigDecimal newvalue)
  {
    fieldE02MOVFBA.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02MOVFBA as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02MOVFBA()
  {
    return fieldE02MOVFBA.getBigDecimal();
  }

  /**
  * Set field E02MOVFVA using a String value.
  */
  public void setE02MOVFVA(String newvalue)
  {
    fieldE02MOVFVA.setString(newvalue);
  }

  /**
  * Get value of field E02MOVFVA as a String.
  */
  public String getE02MOVFVA()
  {
    return fieldE02MOVFVA.getString();
  }

  /**
  * Set numeric field E02MOVFVA using a BigDecimal value.
  */
  public void setE02MOVFVA(BigDecimal newvalue)
  {
    fieldE02MOVFVA.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02MOVFVA as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02MOVFVA()
  {
    return fieldE02MOVFVA.getBigDecimal();
  }

}

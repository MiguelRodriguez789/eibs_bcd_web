package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ECO100002 physical file definition.
* 
* File level identifier is 1130611131010.
* Record format level identifier is 43908D46ED238.
*/

public class ECO100002Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H02USER",
                                     "OFICINA",
                                     "CENCOS",
                                     "GLOSA",
                                     "FECHA",
                                     "FORMATO",
                                     "RUTTOMAD",
                                     "RUTBENEF",
                                     "NOMBRE",
                                     "MONTO",
                                     "MOTIVO",
                                     "H02FLGMAS"
                                   };
  final static String tnames[] = {
                                   "H02USER",
                                   "OFICINA",
                                   "CENCOS",
                                   "GLOSA",
                                   "FECHA",
                                   "FORMATO",
                                   "RUTTOMAD",
                                   "RUTBENEF",
                                   "NOMBRE",
                                   "MONTO",
                                   "MOTIVO",
                                   "H02FLGMAS"
                                 };
  final static String fid = "1130611131010";
  final static String rid = "43908D46ED238";
  final static String fmtname = "ECO100002";
  final int FIELDCOUNT = 12;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH02USER = null;
  private DecimalField fieldOFICINA = null;
  private DecimalField fieldCENCOS = null;
  private CharacterField fieldGLOSA = null;
  private DecimalField fieldFECHA = null;
  private CharacterField fieldFORMATO = null;
  private CharacterField fieldRUTTOMAD = null;
  private CharacterField fieldRUTBENEF = null;
  private CharacterField fieldNOMBRE = null;
  private DecimalField fieldMONTO = null;
  private CharacterField fieldMOTIVO = null;
  private CharacterField fieldH02FLGMAS = null;

  /**
  * Constructor for ECO100002Message.
  */
  public ECO100002Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 176;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH02USER =
    new CharacterField(message, HEADERSIZE + 0, 10, "H02USER");
    fields[1] = fieldOFICINA =
    new DecimalField(message, HEADERSIZE + 10, 5, 0, "OFICINA");
    fields[2] = fieldCENCOS =
    new DecimalField(message, HEADERSIZE + 15, 9, 0, "CENCOS");
    fields[3] = fieldGLOSA =
    new CharacterField(message, HEADERSIZE + 24, 50, "GLOSA");
    fields[4] = fieldFECHA =
    new DecimalField(message, HEADERSIZE + 74, 9, 0, "FECHA");
    fields[5] = fieldFORMATO =
    new CharacterField(message, HEADERSIZE + 83, 2, "FORMATO");
    fields[6] = fieldRUTTOMAD =
    new CharacterField(message, HEADERSIZE + 85, 10, "RUTTOMAD");
    fields[7] = fieldRUTBENEF =
    new CharacterField(message, HEADERSIZE + 95, 10, "RUTBENEF");
    fields[8] = fieldNOMBRE =
    new CharacterField(message, HEADERSIZE + 105, 50, "NOMBRE");
    fields[9] = fieldMONTO =
    new DecimalField(message, HEADERSIZE + 155, 16, 0, "MONTO");
    fields[10] = fieldMOTIVO =
    new CharacterField(message, HEADERSIZE + 171, 4, "MOTIVO");
    fields[11] = fieldH02FLGMAS =
    new CharacterField(message, HEADERSIZE + 175, 1, "H02FLGMAS");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H02USER using a String value.
  */
  public void setH02USER(String newvalue)
  {
    fieldH02USER.setString(newvalue);
  }

  /**
  * Get value of field H02USER as a String.
  */
  public String getH02USER()
  {
    return fieldH02USER.getString();
  }

  /**
  * Set field OFICINA using a String value.
  */
  public void setOFICINA(String newvalue)
  {
    fieldOFICINA.setString(newvalue);
  }

  /**
  * Get value of field OFICINA as a String.
  */
  public String getOFICINA()
  {
    return fieldOFICINA.getString();
  }

  /**
  * Set numeric field OFICINA using a BigDecimal value.
  */
  public void setOFICINA(BigDecimal newvalue)
  {
    fieldOFICINA.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field OFICINA as a BigDecimal.
  */
  public BigDecimal getBigDecimalOFICINA()
  {
    return fieldOFICINA.getBigDecimal();
  }

  /**
  * Set field CENCOS using a String value.
  */
  public void setCENCOS(String newvalue)
  {
    fieldCENCOS.setString(newvalue);
  }

  /**
  * Get value of field CENCOS as a String.
  */
  public String getCENCOS()
  {
    return fieldCENCOS.getString();
  }

  /**
  * Set numeric field CENCOS using a BigDecimal value.
  */
  public void setCENCOS(BigDecimal newvalue)
  {
    fieldCENCOS.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CENCOS as a BigDecimal.
  */
  public BigDecimal getBigDecimalCENCOS()
  {
    return fieldCENCOS.getBigDecimal();
  }

  /**
  * Set field GLOSA using a String value.
  */
  public void setGLOSA(String newvalue)
  {
    fieldGLOSA.setString(newvalue);
  }

  /**
  * Get value of field GLOSA as a String.
  */
  public String getGLOSA()
  {
    return fieldGLOSA.getString();
  }

  /**
  * Set field FECHA using a String value.
  */
  public void setFECHA(String newvalue)
  {
    fieldFECHA.setString(newvalue);
  }

  /**
  * Get value of field FECHA as a String.
  */
  public String getFECHA()
  {
    return fieldFECHA.getString();
  }

  /**
  * Set numeric field FECHA using a BigDecimal value.
  */
  public void setFECHA(BigDecimal newvalue)
  {
    fieldFECHA.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field FECHA as a BigDecimal.
  */
  public BigDecimal getBigDecimalFECHA()
  {
    return fieldFECHA.getBigDecimal();
  }

  /**
  * Set field FORMATO using a String value.
  */
  public void setFORMATO(String newvalue)
  {
    fieldFORMATO.setString(newvalue);
  }

  /**
  * Get value of field FORMATO as a String.
  */
  public String getFORMATO()
  {
    return fieldFORMATO.getString();
  }

  /**
  * Set field RUTTOMAD using a String value.
  */
  public void setRUTTOMAD(String newvalue)
  {
    fieldRUTTOMAD.setString(newvalue);
  }

  /**
  * Get value of field RUTTOMAD as a String.
  */
  public String getRUTTOMAD()
  {
    return fieldRUTTOMAD.getString();
  }

  /**
  * Set field RUTBENEF using a String value.
  */
  public void setRUTBENEF(String newvalue)
  {
    fieldRUTBENEF.setString(newvalue);
  }

  /**
  * Get value of field RUTBENEF as a String.
  */
  public String getRUTBENEF()
  {
    return fieldRUTBENEF.getString();
  }

  /**
  * Set field NOMBRE using a String value.
  */
  public void setNOMBRE(String newvalue)
  {
    fieldNOMBRE.setString(newvalue);
  }

  /**
  * Get value of field NOMBRE as a String.
  */
  public String getNOMBRE()
  {
    return fieldNOMBRE.getString();
  }

  /**
  * Set field MONTO using a String value.
  */
  public void setMONTO(String newvalue)
  {
    fieldMONTO.setString(newvalue);
  }

  /**
  * Get value of field MONTO as a String.
  */
  public String getMONTO()
  {
    return fieldMONTO.getString();
  }

  /**
  * Set numeric field MONTO using a BigDecimal value.
  */
  public void setMONTO(BigDecimal newvalue)
  {
    fieldMONTO.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field MONTO as a BigDecimal.
  */
  public BigDecimal getBigDecimalMONTO()
  {
    return fieldMONTO.getBigDecimal();
  }

  /**
  * Set field MOTIVO using a String value.
  */
  public void setMOTIVO(String newvalue)
  {
    fieldMOTIVO.setString(newvalue);
  }

  /**
  * Get value of field MOTIVO as a String.
  */
  public String getMOTIVO()
  {
    return fieldMOTIVO.getString();
  }

  /**
  * Set field H02FLGMAS using a String value.
  */
  public void setH02FLGMAS(String newvalue)
  {
    fieldH02FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H02FLGMAS as a String.
  */
  public String getH02FLGMAS()
  {
    return fieldH02FLGMAS.getString();
  }

}

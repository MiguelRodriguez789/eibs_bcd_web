package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EFRM00062 physical file definition.
* 
* File level identifier is 1170202115306.
* Record format level identifier is 582FF464F1F5A.
*/

public class EFRM00062Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "E62CTRNUM",
                                     "E62CTRCUN",
                                     "E62CTRNME",
                                     "E62CTRRUT",
                                     "E62CTRAMT",
                                     "E62CTRBNC",
                                     "E62CTRCQC",
                                     "E62DSCBNC",
                                     "E62FLGMAS"
                                   };
  final static String tnames[] = {
                                   "Num.Propuesta",
                                   "Num.Cliente",
                                   "Nombre.Tercero",
                                   "Rut",
                                   "Monto.Cheque",
                                   "Banco.cheque",
                                   "Cuenta.Cheque",
                                   "Nombre.Banco",
                                   "*flgMas"
                                 };
  final static String fid = "1170202115306";
  final static String rid = "582FF464F1F5A";
  final static String fmtname = "EFRM00062";
  final int FIELDCOUNT = 9;
  private static Hashtable tlookup = new Hashtable();
  private DecimalField fieldE62CTRNUM = null;
  private DecimalField fieldE62CTRCUN = null;
  private CharacterField fieldE62CTRNME = null;
  private CharacterField fieldE62CTRRUT = null;
  private DecimalField fieldE62CTRAMT = null;
  private CharacterField fieldE62CTRBNC = null;
  private DecimalField fieldE62CTRCQC = null;
  private CharacterField fieldE62DSCBNC = null;
  private CharacterField fieldE62FLGMAS = null;

  /**
  * Constructor for EFRM00062Message.
  */
  public EFRM00062Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 188;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldE62CTRNUM =
    new DecimalField(message, HEADERSIZE + 0, 13, 0, "Num.Propuesta");
    fields[1] = fieldE62CTRCUN =
    new DecimalField(message, HEADERSIZE + 13, 10, 0, "Num.Cliente");
    fields[2] = fieldE62CTRNME =
    new CharacterField(message, HEADERSIZE + 23, 60, "Nombre.Tercero");
    fields[3] = fieldE62CTRRUT =
    new CharacterField(message, HEADERSIZE + 83, 25, "Rut");
    fields[4] = fieldE62CTRAMT =
    new DecimalField(message, HEADERSIZE + 108, 17, 2, "Monto.Cheque");
    fields[5] = fieldE62CTRBNC =
    new CharacterField(message, HEADERSIZE + 125, 4, "Banco.cheque");
    fields[6] = fieldE62CTRCQC =
    new DecimalField(message, HEADERSIZE + 129, 13, 0, "Cuenta.Cheque");
    fields[7] = fieldE62DSCBNC =
    new CharacterField(message, HEADERSIZE + 142, 45, "Nombre.Banco");
    fields[8] = fieldE62FLGMAS =
    new CharacterField(message, HEADERSIZE + 187, 1, "*flgMas");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field E62CTRNUM using a String value.
  */
  public void setE62CTRNUM(String newvalue)
  {
    fieldE62CTRNUM.setString(newvalue);
  }

  /**
  * Get value of field E62CTRNUM as a String.
  */
  public String getE62CTRNUM()
  {
    return fieldE62CTRNUM.getString();
  }

  /**
  * Set numeric field E62CTRNUM using a BigDecimal value.
  */
  public void setE62CTRNUM(BigDecimal newvalue)
  {
    fieldE62CTRNUM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E62CTRNUM as a BigDecimal.
  */
  public BigDecimal getBigDecimalE62CTRNUM()
  {
    return fieldE62CTRNUM.getBigDecimal();
  }

  /**
  * Set field E62CTRCUN using a String value.
  */
  public void setE62CTRCUN(String newvalue)
  {
    fieldE62CTRCUN.setString(newvalue);
  }

  /**
  * Get value of field E62CTRCUN as a String.
  */
  public String getE62CTRCUN()
  {
    return fieldE62CTRCUN.getString();
  }

  /**
  * Set numeric field E62CTRCUN using a BigDecimal value.
  */
  public void setE62CTRCUN(BigDecimal newvalue)
  {
    fieldE62CTRCUN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E62CTRCUN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE62CTRCUN()
  {
    return fieldE62CTRCUN.getBigDecimal();
  }

  /**
  * Set field E62CTRNME using a String value.
  */
  public void setE62CTRNME(String newvalue)
  {
    fieldE62CTRNME.setString(newvalue);
  }

  /**
  * Get value of field E62CTRNME as a String.
  */
  public String getE62CTRNME()
  {
    return fieldE62CTRNME.getString();
  }

  /**
  * Set field E62CTRRUT using a String value.
  */
  public void setE62CTRRUT(String newvalue)
  {
    fieldE62CTRRUT.setString(newvalue);
  }

  /**
  * Get value of field E62CTRRUT as a String.
  */
  public String getE62CTRRUT()
  {
    return fieldE62CTRRUT.getString();
  }

  /**
  * Set field E62CTRAMT using a String value.
  */
  public void setE62CTRAMT(String newvalue)
  {
    fieldE62CTRAMT.setString(newvalue);
  }

  /**
  * Get value of field E62CTRAMT as a String.
  */
  public String getE62CTRAMT()
  {
    return fieldE62CTRAMT.getString();
  }

  /**
  * Set numeric field E62CTRAMT using a BigDecimal value.
  */
  public void setE62CTRAMT(BigDecimal newvalue)
  {
    fieldE62CTRAMT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E62CTRAMT as a BigDecimal.
  */
  public BigDecimal getBigDecimalE62CTRAMT()
  {
    return fieldE62CTRAMT.getBigDecimal();
  }

  /**
  * Set field E62CTRBNC using a String value.
  */
  public void setE62CTRBNC(String newvalue)
  {
    fieldE62CTRBNC.setString(newvalue);
  }

  /**
  * Get value of field E62CTRBNC as a String.
  */
  public String getE62CTRBNC()
  {
    return fieldE62CTRBNC.getString();
  }

  /**
  * Set field E62CTRCQC using a String value.
  */
  public void setE62CTRCQC(String newvalue)
  {
    fieldE62CTRCQC.setString(newvalue);
  }

  /**
  * Get value of field E62CTRCQC as a String.
  */
  public String getE62CTRCQC()
  {
    return fieldE62CTRCQC.getString();
  }

  /**
  * Set numeric field E62CTRCQC using a BigDecimal value.
  */
  public void setE62CTRCQC(BigDecimal newvalue)
  {
    fieldE62CTRCQC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E62CTRCQC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE62CTRCQC()
  {
    return fieldE62CTRCQC.getBigDecimal();
  }

  /**
  * Set field E62DSCBNC using a String value.
  */
  public void setE62DSCBNC(String newvalue)
  {
    fieldE62DSCBNC.setString(newvalue);
  }

  /**
  * Get value of field E62DSCBNC as a String.
  */
  public String getE62DSCBNC()
  {
    return fieldE62DSCBNC.getString();
  }

  /**
  * Set field E62FLGMAS using a String value.
  */
  public void setE62FLGMAS(String newvalue)
  {
    fieldE62FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field E62FLGMAS as a String.
  */
  public String getE62FLGMAS()
  {
    return fieldE62FLGMAS.getString();
  }

}

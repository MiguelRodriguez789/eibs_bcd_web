package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD9011DS physical file definition.
* 
* File level identifier is 1160817124801.
* Record format level identifier is 378C7EDD31A73.
*/

public class EWD9011DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "RWDUSR",
                                     "RWDLIF",
                                     "RWDCOD",
                                     "RWDFRC",
                                     "SWDCOD",
                                     "SWDLIF",
                                     "SWDDSC",
                                     "SWDPLN",
                                     "SWDPTY",
                                     "SWDNDC",
                                     "SWDDDS",
                                     "SWDREC",
                                     "SWDOPE"
                                   };
  final static String tnames[] = {
                                   "RWDUSR",
                                   "RWDLIF",
                                   "RWDCOD",
                                   "RWDFRC",
                                   "SWDCOD",
                                   "SWDLIF",
                                   "SWDDSC",
                                   "SWDPLN",
                                   "SWDPTY",
                                   "SWDNDC",
                                   "SWDDDS",
                                   "SWDREC",
                                   "SWDOPE"
                                 };
  final static String fid = "1160817124801";
  final static String rid = "378C7EDD31A73";
  final static String fmtname = "EWD9011DS";
  final int FIELDCOUNT = 13;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldRWDUSR = null;
  private CharacterField fieldRWDLIF = null;
  private CharacterField fieldRWDCOD = null;
  private DecimalField fieldRWDFRC = null;
  private CharacterField fieldSWDCOD = null;
  private CharacterField fieldSWDLIF = null;
  private CharacterField fieldSWDDSC = null;
  private DecimalField fieldSWDPLN = null;
  private CharacterField fieldSWDPTY = null;
  private DecimalField fieldSWDNDC = null;
  private CharacterField fieldSWDDDS = null;
  private DecimalField fieldSWDREC = null;
  private CharacterField fieldSWDOPE = null;

  /**
  * Constructor for EWD9011DSMessage.
  */
  public EWD9011DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 101;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldRWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "RWDUSR");
    fields[1] = fieldRWDLIF =
    new CharacterField(message, HEADERSIZE + 10, 1, "RWDLIF");
    fields[2] = fieldRWDCOD =
    new CharacterField(message, HEADERSIZE + 11, 2, "RWDCOD");
    fields[3] = fieldRWDFRC =
    new DecimalField(message, HEADERSIZE + 13, 8, 0, "RWDFRC");
    fields[4] = fieldSWDCOD =
    new CharacterField(message, HEADERSIZE + 21, 2, "SWDCOD");
    fields[5] = fieldSWDLIF =
    new CharacterField(message, HEADERSIZE + 23, 1, "SWDLIF");
    fields[6] = fieldSWDDSC =
    new CharacterField(message, HEADERSIZE + 24, 50, "SWDDSC");
    fields[7] = fieldSWDPLN =
    new DecimalField(message, HEADERSIZE + 74, 4, 0, "SWDPLN");
    fields[8] = fieldSWDPTY =
    new CharacterField(message, HEADERSIZE + 78, 1, "SWDPTY");
    fields[9] = fieldSWDNDC =
    new DecimalField(message, HEADERSIZE + 79, 3, 0, "SWDNDC");
    fields[10] = fieldSWDDDS =
    new CharacterField(message, HEADERSIZE + 82, 10, "SWDDDS");
    fields[11] = fieldSWDREC =
    new DecimalField(message, HEADERSIZE + 92, 8, 0, "SWDREC");
    fields[12] = fieldSWDOPE =
    new CharacterField(message, HEADERSIZE + 100, 1, "SWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field RWDUSR using a String value.
  */
  public void setRWDUSR(String newvalue)
  {
    fieldRWDUSR.setString(newvalue);
  }

  /**
  * Get value of field RWDUSR as a String.
  */
  public String getRWDUSR()
  {
    return fieldRWDUSR.getString();
  }

  /**
  * Set field RWDLIF using a String value.
  */
  public void setRWDLIF(String newvalue)
  {
    fieldRWDLIF.setString(newvalue);
  }

  /**
  * Get value of field RWDLIF as a String.
  */
  public String getRWDLIF()
  {
    return fieldRWDLIF.getString();
  }

  /**
  * Set field RWDCOD using a String value.
  */
  public void setRWDCOD(String newvalue)
  {
    fieldRWDCOD.setString(newvalue);
  }

  /**
  * Get value of field RWDCOD as a String.
  */
  public String getRWDCOD()
  {
    return fieldRWDCOD.getString();
  }

  /**
  * Set field RWDFRC using a String value.
  */
  public void setRWDFRC(String newvalue)
  {
    fieldRWDFRC.setString(newvalue);
  }

  /**
  * Get value of field RWDFRC as a String.
  */
  public String getRWDFRC()
  {
    return fieldRWDFRC.getString();
  }

  /**
  * Set numeric field RWDFRC using a BigDecimal value.
  */
  public void setRWDFRC(BigDecimal newvalue)
  {
    fieldRWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field RWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalRWDFRC()
  {
    return fieldRWDFRC.getBigDecimal();
  }

  /**
  * Set field SWDCOD using a String value.
  */
  public void setSWDCOD(String newvalue)
  {
    fieldSWDCOD.setString(newvalue);
  }

  /**
  * Get value of field SWDCOD as a String.
  */
  public String getSWDCOD()
  {
    return fieldSWDCOD.getString();
  }

  /**
  * Set field SWDLIF using a String value.
  */
  public void setSWDLIF(String newvalue)
  {
    fieldSWDLIF.setString(newvalue);
  }

  /**
  * Get value of field SWDLIF as a String.
  */
  public String getSWDLIF()
  {
    return fieldSWDLIF.getString();
  }

  /**
  * Set field SWDDSC using a String value.
  */
  public void setSWDDSC(String newvalue)
  {
    fieldSWDDSC.setString(newvalue);
  }

  /**
  * Get value of field SWDDSC as a String.
  */
  public String getSWDDSC()
  {
    return fieldSWDDSC.getString();
  }

  /**
  * Set field SWDPLN using a String value.
  */
  public void setSWDPLN(String newvalue)
  {
    fieldSWDPLN.setString(newvalue);
  }

  /**
  * Get value of field SWDPLN as a String.
  */
  public String getSWDPLN()
  {
    return fieldSWDPLN.getString();
  }

  /**
  * Set numeric field SWDPLN using a BigDecimal value.
  */
  public void setSWDPLN(BigDecimal newvalue)
  {
    fieldSWDPLN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDPLN as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDPLN()
  {
    return fieldSWDPLN.getBigDecimal();
  }

  /**
  * Set field SWDPTY using a String value.
  */
  public void setSWDPTY(String newvalue)
  {
    fieldSWDPTY.setString(newvalue);
  }

  /**
  * Get value of field SWDPTY as a String.
  */
  public String getSWDPTY()
  {
    return fieldSWDPTY.getString();
  }

  /**
  * Set field SWDNDC using a String value.
  */
  public void setSWDNDC(String newvalue)
  {
    fieldSWDNDC.setString(newvalue);
  }

  /**
  * Get value of field SWDNDC as a String.
  */
  public String getSWDNDC()
  {
    return fieldSWDNDC.getString();
  }

  /**
  * Set numeric field SWDNDC using a BigDecimal value.
  */
  public void setSWDNDC(BigDecimal newvalue)
  {
    fieldSWDNDC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDNDC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDNDC()
  {
    return fieldSWDNDC.getBigDecimal();
  }

  /**
  * Set field SWDDDS using a String value.
  */
  public void setSWDDDS(String newvalue)
  {
    fieldSWDDDS.setString(newvalue);
  }

  /**
  * Get value of field SWDDDS as a String.
  */
  public String getSWDDDS()
  {
    return fieldSWDDDS.getString();
  }

  /**
  * Set field SWDREC using a String value.
  */
  public void setSWDREC(String newvalue)
  {
    fieldSWDREC.setString(newvalue);
  }

  /**
  * Get value of field SWDREC as a String.
  */
  public String getSWDREC()
  {
    return fieldSWDREC.getString();
  }

  /**
  * Set numeric field SWDREC using a BigDecimal value.
  */
  public void setSWDREC(BigDecimal newvalue)
  {
    fieldSWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDREC()
  {
    return fieldSWDREC.getBigDecimal();
  }

  /**
  * Set field SWDOPE using a String value.
  */
  public void setSWDOPE(String newvalue)
  {
    fieldSWDOPE.setString(newvalue);
  }

  /**
  * Get value of field SWDOPE as a String.
  */
  public String getSWDOPE()
  {
    return fieldSWDOPE.getString();
  }

}
 
package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0612DS physical file definition.
* 
* File level identifier is 1171214164822.
* Record format level identifier is 4E3194551BAB6.
*/

public class EWD0612DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EWDCDE",
                                     "EWDDSC",
                                     "EWDDMI",
                                     "EWDDMF",
                                     "EWDPOR",
                                     "EWDSTS",
                                     "EWDTYP",
                                     "EWDOPE"
                                   };
  final static String tnames[] = {
                                   "EWDCDE",
                                   "EWDDSC",
                                   "EWDDMI",
                                   "EWDDMF",
                                   "EWDPOR",
                                   "EWDSTS",
                                   "EWDTYP",
                                   "EWDOPE"
                                 };
  final static String fid = "1171214164822";
  final static String rid = "4E3194551BAB6";
  final static String fmtname = "EWD0612DS";
  final int FIELDCOUNT = 8;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldEWDCDE = null;
  private CharacterField fieldEWDDSC = null;
  private DecimalField fieldEWDDMI = null;
  private DecimalField fieldEWDDMF = null;
  private DecimalField fieldEWDPOR = null;
  private CharacterField fieldEWDSTS = null;
  private CharacterField fieldEWDTYP = null;
  private CharacterField fieldEWDOPE = null;

  /**
  * Constructor for EWD0612DSMessage.
  */
  public EWD0612DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 86;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEWDCDE =
    new CharacterField(message, HEADERSIZE + 0, 4, "EWDCDE");
    fields[1] = fieldEWDDSC =
    new CharacterField(message, HEADERSIZE + 4, 60, "EWDDSC");
    fields[2] = fieldEWDDMI =
    new DecimalField(message, HEADERSIZE + 64, 6, 0, "EWDDMI");
    fields[3] = fieldEWDDMF =
    new DecimalField(message, HEADERSIZE + 70, 6, 0, "EWDDMF");
    fields[4] = fieldEWDPOR =
    new DecimalField(message, HEADERSIZE + 76, 7, 2, "EWDPOR");
    fields[5] = fieldEWDSTS =
    new CharacterField(message, HEADERSIZE + 83, 1, "EWDSTS");
    fields[6] = fieldEWDTYP =
    new CharacterField(message, HEADERSIZE + 84, 1, "EWDTYP");
    fields[7] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 85, 1, "EWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EWDCDE using a String value.
  */
  public void setEWDCDE(String newvalue)
  {
    fieldEWDCDE.setString(newvalue);
  }

  /**
  * Get value of field EWDCDE as a String.
  */
  public String getEWDCDE()
  {
    return fieldEWDCDE.getString();
  }

  /**
  * Set field EWDDSC using a String value.
  */
  public void setEWDDSC(String newvalue)
  {
    fieldEWDDSC.setString(newvalue);
  }

  /**
  * Get value of field EWDDSC as a String.
  */
  public String getEWDDSC()
  {
    return fieldEWDDSC.getString();
  }

  /**
  * Set field EWDDMI using a String value.
  */
  public void setEWDDMI(String newvalue)
  {
    fieldEWDDMI.setString(newvalue);
  }

  /**
  * Get value of field EWDDMI as a String.
  */
  public String getEWDDMI()
  {
    return fieldEWDDMI.getString();
  }

  /**
  * Set numeric field EWDDMI using a BigDecimal value.
  */
  public void setEWDDMI(BigDecimal newvalue)
  {
    fieldEWDDMI.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDDMI as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDDMI()
  {
    return fieldEWDDMI.getBigDecimal();
  }

  /**
  * Set field EWDDMF using a String value.
  */
  public void setEWDDMF(String newvalue)
  {
    fieldEWDDMF.setString(newvalue);
  }

  /**
  * Get value of field EWDDMF as a String.
  */
  public String getEWDDMF()
  {
    return fieldEWDDMF.getString();
  }

  /**
  * Set numeric field EWDDMF using a BigDecimal value.
  */
  public void setEWDDMF(BigDecimal newvalue)
  {
    fieldEWDDMF.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDDMF as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDDMF()
  {
    return fieldEWDDMF.getBigDecimal();
  }

  /**
  * Set field EWDPOR using a String value.
  */
  public void setEWDPOR(String newvalue)
  {
    fieldEWDPOR.setString(newvalue);
  }

  /**
  * Get value of field EWDPOR as a String.
  */
  public String getEWDPOR()
  {
    return fieldEWDPOR.getString();
  }

  /**
  * Set numeric field EWDPOR using a BigDecimal value.
  */
  public void setEWDPOR(BigDecimal newvalue)
  {
    fieldEWDPOR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDPOR as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDPOR()
  {
    return fieldEWDPOR.getBigDecimal();
  }

  /**
  * Set field EWDSTS using a String value.
  */
  public void setEWDSTS(String newvalue)
  {
    fieldEWDSTS.setString(newvalue);
  }

  /**
  * Get value of field EWDSTS as a String.
  */
  public String getEWDSTS()
  {
    return fieldEWDSTS.getString();
  }

  /**
  * Set field EWDTYP using a String value.
  */
  public void setEWDTYP(String newvalue)
  {
    fieldEWDTYP.setString(newvalue);
  }

  /**
  * Get value of field EWDTYP as a String.
  */
  public String getEWDTYP()
  {
    return fieldEWDTYP.getString();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

}

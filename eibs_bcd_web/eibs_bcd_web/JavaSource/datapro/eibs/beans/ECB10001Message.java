package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ECB10001 physical file definition.
* 
* File level identifier is 1100706173516.
* Record format level identifier is 39671D416DE22.
*/

public class ECB10001Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USERID",
                                     "H01PROGRM",
                                     "H01TIMSYS",
                                     "H01SCRCOD",
                                     "H01OPECOD",
                                     "H01FLGMAS",
                                     "H01FLGWK1",
                                     "H01FLGWK2",
                                     "H01FLGWK3",
                                     "ECBRUT",
                                     "ECBMUT",
                                     "HPDMUT",
                                     "HPDCUO",
                                     "HPDVCM",
                                     "ECBTPP"
                                   };
  final static String tnames[] = {
                                   "H01USERID",
                                   "H01PROGRM",
                                   "H01TIMSYS",
                                   "H01SCRCOD",
                                   "H01OPECOD",
                                   "H01FLGMAS",
                                   "H01FLGWK1",
                                   "H01FLGWK2",
                                   "H01FLGWK3",
                                   "ECBRUT",
                                   "ECBMUT",
                                   "HPDMUT",
                                   "HPDCUO",
                                   "HPDVCM",
                                   "ECBTPP"
                                 };
  final static String fid = "1100706173516";
  final static String rid = "39671D416DE22";
  final static String fmtname = "ECB10001";
  final int FIELDCOUNT = 15;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USERID = null;
  private CharacterField fieldH01PROGRM = null;
  private CharacterField fieldH01TIMSYS = null;
  private CharacterField fieldH01SCRCOD = null;
  private CharacterField fieldH01OPECOD = null;
  private CharacterField fieldH01FLGMAS = null;
  private CharacterField fieldH01FLGWK1 = null;
  private CharacterField fieldH01FLGWK2 = null;
  private CharacterField fieldH01FLGWK3 = null;
  private CharacterField fieldECBRUT = null;
  private DecimalField fieldECBMUT = null;
  private DecimalField fieldHPDMUT = null;
  private DecimalField fieldHPDCUO = null;
  private DecimalField fieldHPDVCM = null;
  private DecimalField fieldECBTPP = null;

  /**
  * Constructor for ECB10001Message.
  */
  public ECB10001Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 93;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USERID");
    fields[1] = fieldH01PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PROGRM");
    fields[2] = fieldH01TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIMSYS");
    fields[3] = fieldH01SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCRCOD");
    fields[4] = fieldH01OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPECOD");
    fields[5] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01FLGMAS");
    fields[6] = fieldH01FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01FLGWK1");
    fields[7] = fieldH01FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01FLGWK2");
    fields[8] = fieldH01FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01FLGWK3");
    fields[9] = fieldECBRUT =
    new CharacterField(message, HEADERSIZE + 42, 15, "ECBRUT");
    fields[10] = fieldECBMUT =
    new DecimalField(message, HEADERSIZE + 57, 6, 0, "ECBMUT");
    fields[11] = fieldHPDMUT =
    new DecimalField(message, HEADERSIZE + 63, 6, 0, "HPDMUT");
    fields[12] = fieldHPDCUO =
    new DecimalField(message, HEADERSIZE + 69, 4, 0, "HPDCUO");
    fields[13] = fieldHPDVCM =
    new DecimalField(message, HEADERSIZE + 73, 9, 0, "HPDVCM");
    fields[14] = fieldECBTPP =
    new DecimalField(message, HEADERSIZE + 82, 11, 0, "ECBTPP");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USERID using a String value.
  */
  public void setH01USERID(String newvalue)
  {
    fieldH01USERID.setString(newvalue);
  }

  /**
  * Get value of field H01USERID as a String.
  */
  public String getH01USERID()
  {
    return fieldH01USERID.getString();
  }

  /**
  * Set field H01PROGRM using a String value.
  */
  public void setH01PROGRM(String newvalue)
  {
    fieldH01PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H01PROGRM as a String.
  */
  public String getH01PROGRM()
  {
    return fieldH01PROGRM.getString();
  }

  /**
  * Set field H01TIMSYS using a String value.
  */
  public void setH01TIMSYS(String newvalue)
  {
    fieldH01TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H01TIMSYS as a String.
  */
  public String getH01TIMSYS()
  {
    return fieldH01TIMSYS.getString();
  }

  /**
  * Set field H01SCRCOD using a String value.
  */
  public void setH01SCRCOD(String newvalue)
  {
    fieldH01SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H01SCRCOD as a String.
  */
  public String getH01SCRCOD()
  {
    return fieldH01SCRCOD.getString();
  }

  /**
  * Set field H01OPECOD using a String value.
  */
  public void setH01OPECOD(String newvalue)
  {
    fieldH01OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H01OPECOD as a String.
  */
  public String getH01OPECOD()
  {
    return fieldH01OPECOD.getString();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

  /**
  * Set field H01FLGWK1 using a String value.
  */
  public void setH01FLGWK1(String newvalue)
  {
    fieldH01FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK1 as a String.
  */
  public String getH01FLGWK1()
  {
    return fieldH01FLGWK1.getString();
  }

  /**
  * Set field H01FLGWK2 using a String value.
  */
  public void setH01FLGWK2(String newvalue)
  {
    fieldH01FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK2 as a String.
  */
  public String getH01FLGWK2()
  {
    return fieldH01FLGWK2.getString();
  }

  /**
  * Set field H01FLGWK3 using a String value.
  */
  public void setH01FLGWK3(String newvalue)
  {
    fieldH01FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK3 as a String.
  */
  public String getH01FLGWK3()
  {
    return fieldH01FLGWK3.getString();
  }

  /**
  * Set field ECBRUT using a String value.
  */
  public void setECBRUT(String newvalue)
  {
    fieldECBRUT.setString(newvalue);
  }

  /**
  * Get value of field ECBRUT as a String.
  */
  public String getECBRUT()
  {
    return fieldECBRUT.getString();
  }

  /**
  * Set field ECBMUT using a String value.
  */
  public void setECBMUT(String newvalue)
  {
    fieldECBMUT.setString(newvalue);
  }

  /**
  * Get value of field ECBMUT as a String.
  */
  public String getECBMUT()
  {
    return fieldECBMUT.getString();
  }

  /**
  * Set numeric field ECBMUT using a BigDecimal value.
  */
  public void setECBMUT(BigDecimal newvalue)
  {
    fieldECBMUT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ECBMUT as a BigDecimal.
  */
  public BigDecimal getBigDecimalECBMUT()
  {
    return fieldECBMUT.getBigDecimal();
  }

  /**
  * Set field HPDMUT using a String value.
  */
  public void setHPDMUT(String newvalue)
  {
    fieldHPDMUT.setString(newvalue);
  }

  /**
  * Get value of field HPDMUT as a String.
  */
  public String getHPDMUT()
  {
    return fieldHPDMUT.getString();
  }

  /**
  * Set numeric field HPDMUT using a BigDecimal value.
  */
  public void setHPDMUT(BigDecimal newvalue)
  {
    fieldHPDMUT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field HPDMUT as a BigDecimal.
  */
  public BigDecimal getBigDecimalHPDMUT()
  {
    return fieldHPDMUT.getBigDecimal();
  }

  /**
  * Set field HPDCUO using a String value.
  */
  public void setHPDCUO(String newvalue)
  {
    fieldHPDCUO.setString(newvalue);
  }

  /**
  * Get value of field HPDCUO as a String.
  */
  public String getHPDCUO()
  {
    return fieldHPDCUO.getString();
  }

  /**
  * Set numeric field HPDCUO using a BigDecimal value.
  */
  public void setHPDCUO(BigDecimal newvalue)
  {
    fieldHPDCUO.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field HPDCUO as a BigDecimal.
  */
  public BigDecimal getBigDecimalHPDCUO()
  {
    return fieldHPDCUO.getBigDecimal();
  }

  /**
  * Set field HPDVCM using a String value.
  */
  public void setHPDVCM(String newvalue)
  {
    fieldHPDVCM.setString(newvalue);
  }

  /**
  * Get value of field HPDVCM as a String.
  */
  public String getHPDVCM()
  {
    return fieldHPDVCM.getString();
  }

  /**
  * Set numeric field HPDVCM using a BigDecimal value.
  */
  public void setHPDVCM(BigDecimal newvalue)
  {
    fieldHPDVCM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field HPDVCM as a BigDecimal.
  */
  public BigDecimal getBigDecimalHPDVCM()
  {
    return fieldHPDVCM.getBigDecimal();
  }

  /**
  * Set field ECBTPP using a String value.
  */
  public void setECBTPP(String newvalue)
  {
    fieldECBTPP.setString(newvalue);
  }

  /**
  * Get value of field ECBTPP as a String.
  */
  public String getECBTPP()
  {
    return fieldECBTPP.getString();
  }

  /**
  * Set numeric field ECBTPP using a BigDecimal value.
  */
  public void setECBTPP(BigDecimal newvalue)
  {
    fieldECBTPP.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ECBTPP as a BigDecimal.
  */
  public BigDecimal getBigDecimalECBTPP()
  {
    return fieldECBTPP.getBigDecimal();
  }

}

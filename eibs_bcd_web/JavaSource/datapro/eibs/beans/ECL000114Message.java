package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ECL000114 physical file definition.
* 
* File level identifier is 1100706173537.
* Record format level identifier is 42ADC86325B1F.
*/

public class ECL000114Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H02USERID",
                                     "H02PROGRM",
                                     "H02TIMSYS",
                                     "H02SCRCOD",
                                     "H02OPECOD",
                                     "H02FLGMAS",
                                     "H02FLGWK1",
                                     "H02FLGWK2",
                                     "H02FLGWK3",
                                     "SDDCOD",
                                     "SDDELE",
                                     "SDDTIP",
                                     "SDDLIM",
                                     "SDDNUM",
                                     "SDDRET",
                                     "SDDTAB"
                                   };
  final static String tnames[] = {
                                   "H02USERID",
                                   "H02PROGRM",
                                   "H02TIMSYS",
                                   "H02SCRCOD",
                                   "H02OPECOD",
                                   "H02FLGMAS",
                                   "H02FLGWK1",
                                   "H02FLGWK2",
                                   "H02FLGWK3",
                                   "SDDCOD",
                                   "SDDELE",
                                   "SDDTIP",
                                   "SDDLIM",
                                   "SDDNUM",
                                   "SDDRET",
                                   "SDDTAB"
                                 };
  final static String fid = "1100706173537";
  final static String rid = "42ADC86325B1F";
  final static String fmtname = "ECL000114";
  final int FIELDCOUNT = 16;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH02USERID = null;
  private CharacterField fieldH02PROGRM = null;
  private CharacterField fieldH02TIMSYS = null;
  private CharacterField fieldH02SCRCOD = null;
  private CharacterField fieldH02OPECOD = null;
  private CharacterField fieldH02FLGMAS = null;
  private CharacterField fieldH02FLGWK1 = null;
  private CharacterField fieldH02FLGWK2 = null;
  private CharacterField fieldH02FLGWK3 = null;
  private CharacterField fieldSDDCOD = null;
  private CharacterField fieldSDDELE = null;
  private CharacterField fieldSDDTIP = null;
  private CharacterField fieldSDDLIM = null;
  private CharacterField fieldSDDNUM = null;
  private CharacterField fieldSDDRET = null;
  private CharacterField fieldSDDTAB = null;

  /**
  * Constructor for ECL000114Message.
  */
  public ECL000114Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 9861;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH02USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H02USERID");
    fields[1] = fieldH02PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H02PROGRM");
    fields[2] = fieldH02TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H02TIMSYS");
    fields[3] = fieldH02SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H02SCRCOD");
    fields[4] = fieldH02OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H02OPECOD");
    fields[5] = fieldH02FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H02FLGMAS");
    fields[6] = fieldH02FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H02FLGWK1");
    fields[7] = fieldH02FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H02FLGWK2");
    fields[8] = fieldH02FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H02FLGWK3");
    fields[9] = fieldSDDCOD =
    new CharacterField(message, HEADERSIZE + 42, 3, "SDDCOD");
    fields[10] = fieldSDDELE =
    new CharacterField(message, HEADERSIZE + 45, 8, "SDDELE");
    fields[11] = fieldSDDTIP =
    new CharacterField(message, HEADERSIZE + 53, 1, "SDDTIP");
    fields[12] = fieldSDDLIM =
    new CharacterField(message, HEADERSIZE + 54, 2, "SDDLIM");
    fields[13] = fieldSDDNUM =
    new CharacterField(message, HEADERSIZE + 56, 3, "SDDNUM");
    fields[14] = fieldSDDRET =
    new CharacterField(message, HEADERSIZE + 59, 2, "SDDRET");
    fields[15] = fieldSDDTAB =
    new CharacterField(message, HEADERSIZE + 61, 9800, "SDDTAB");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H02USERID using a String value.
  */
  public void setH02USERID(String newvalue)
  {
    fieldH02USERID.setString(newvalue);
  }

  /**
  * Get value of field H02USERID as a String.
  */
  public String getH02USERID()
  {
    return fieldH02USERID.getString();
  }

  /**
  * Set field H02PROGRM using a String value.
  */
  public void setH02PROGRM(String newvalue)
  {
    fieldH02PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H02PROGRM as a String.
  */
  public String getH02PROGRM()
  {
    return fieldH02PROGRM.getString();
  }

  /**
  * Set field H02TIMSYS using a String value.
  */
  public void setH02TIMSYS(String newvalue)
  {
    fieldH02TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H02TIMSYS as a String.
  */
  public String getH02TIMSYS()
  {
    return fieldH02TIMSYS.getString();
  }

  /**
  * Set field H02SCRCOD using a String value.
  */
  public void setH02SCRCOD(String newvalue)
  {
    fieldH02SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H02SCRCOD as a String.
  */
  public String getH02SCRCOD()
  {
    return fieldH02SCRCOD.getString();
  }

  /**
  * Set field H02OPECOD using a String value.
  */
  public void setH02OPECOD(String newvalue)
  {
    fieldH02OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H02OPECOD as a String.
  */
  public String getH02OPECOD()
  {
    return fieldH02OPECOD.getString();
  }

  /**
  * Set field H02FLGMAS using a String value.
  */
  public void setH02FLGMAS(String newvalue)
  {
    fieldH02FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H02FLGMAS as a String.
  */
  public String getH02FLGMAS()
  {
    return fieldH02FLGMAS.getString();
  }

  /**
  * Set field H02FLGWK1 using a String value.
  */
  public void setH02FLGWK1(String newvalue)
  {
    fieldH02FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK1 as a String.
  */
  public String getH02FLGWK1()
  {
    return fieldH02FLGWK1.getString();
  }

  /**
  * Set field H02FLGWK2 using a String value.
  */
  public void setH02FLGWK2(String newvalue)
  {
    fieldH02FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK2 as a String.
  */
  public String getH02FLGWK2()
  {
    return fieldH02FLGWK2.getString();
  }

  /**
  * Set field H02FLGWK3 using a String value.
  */
  public void setH02FLGWK3(String newvalue)
  {
    fieldH02FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK3 as a String.
  */
  public String getH02FLGWK3()
  {
    return fieldH02FLGWK3.getString();
  }

  /**
  * Set field SDDCOD using a String value.
  */
  public void setSDDCOD(String newvalue)
  {
    fieldSDDCOD.setString(newvalue);
  }

  /**
  * Get value of field SDDCOD as a String.
  */
  public String getSDDCOD()
  {
    return fieldSDDCOD.getString();
  }

  /**
  * Set field SDDELE using a String value.
  */
  public void setSDDELE(String newvalue)
  {
    fieldSDDELE.setString(newvalue);
  }

  /**
  * Get value of field SDDELE as a String.
  */
  public String getSDDELE()
  {
    return fieldSDDELE.getString();
  }

  /**
  * Set field SDDTIP using a String value.
  */
  public void setSDDTIP(String newvalue)
  {
    fieldSDDTIP.setString(newvalue);
  }

  /**
  * Get value of field SDDTIP as a String.
  */
  public String getSDDTIP()
  {
    return fieldSDDTIP.getString();
  }

  /**
  * Set field SDDLIM using a String value.
  */
  public void setSDDLIM(String newvalue)
  {
    fieldSDDLIM.setString(newvalue);
  }

  /**
  * Get value of field SDDLIM as a String.
  */
  public String getSDDLIM()
  {
    return fieldSDDLIM.getString();
  }

  /**
  * Set field SDDNUM using a String value.
  */
  public void setSDDNUM(String newvalue)
  {
    fieldSDDNUM.setString(newvalue);
  }

  /**
  * Get value of field SDDNUM as a String.
  */
  public String getSDDNUM()
  {
    return fieldSDDNUM.getString();
  }

  /**
  * Set field SDDRET using a String value.
  */
  public void setSDDRET(String newvalue)
  {
    fieldSDDRET.setString(newvalue);
  }

  /**
  * Get value of field SDDRET as a String.
  */
  public String getSDDRET()
  {
    return fieldSDDRET.getString();
  }

  /**
  * Set field SDDTAB using a String value.
  */
  public void setSDDTAB(String newvalue)
  {
    fieldSDDTAB.setString(newvalue);
  }

  /**
  * Get value of field SDDTAB as a String.
  */
  public String getSDDTAB()
  {
    return fieldSDDTAB.getString();
  }

}

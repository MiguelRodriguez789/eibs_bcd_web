package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EGC060015 physical file definition.
* 
* File level identifier is 1100706173619.
* Record format level identifier is 4F3289EC866D8.
*/

public class EGC060015Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H15USERID",
                                     "H15PROGRM",
                                     "H15TIMSYS",
                                     "H15SCRCOD",
                                     "H15OPECOD",
                                     "H15FLGMAS",
                                     "H15FLGWK1",
                                     "H15FLGWK2",
                                     "H15FLGWK3",
                                     "E15GCNTAR",
                                     "E15GCCORR",
                                     "E15GCRUTC",
                                     "E15GCORIG",
                                     "E15GCFUNC",
                                     "E15GCCODE",
                                     "E15GCGLSE",
                                     "E15GCPROD",
                                     "E15GCGLSP",
                                     "E15GCMONT",
                                     "E15GCRETO",
                                     "E15GCSOLI"
                                   };
  final static String tnames[] = {
                                   "H15USERID",
                                   "H15PROGRM",
                                   "H15TIMSYS",
                                   "H15SCRCOD",
                                   "H15OPECOD",
                                   "H15FLGMAS",
                                   "H15FLGWK1",
                                   "H15FLGWK2",
                                   "H15FLGWK3",
                                   "E15GCNTAR",
                                   "E15GCCORR",
                                   "E15GCRUTC",
                                   "E15GCORIG",
                                   "E15GCFUNC",
                                   "E15GCCODE",
                                   "E15GCGLSE",
                                   "E15GCPROD",
                                   "E15GCGLSP",
                                   "E15GCMONT",
                                   "E15GCRETO",
                                   "E15GCSOLI"
                                 };
  final static String fid = "1100706173619";
  final static String rid = "4F3289EC866D8";
  final static String fmtname = "EGC060015";
  final int FIELDCOUNT = 21;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH15USERID = null;
  private CharacterField fieldH15PROGRM = null;
  private CharacterField fieldH15TIMSYS = null;
  private CharacterField fieldH15SCRCOD = null;
  private CharacterField fieldH15OPECOD = null;
  private CharacterField fieldH15FLGMAS = null;
  private CharacterField fieldH15FLGWK1 = null;
  private CharacterField fieldH15FLGWK2 = null;
  private CharacterField fieldH15FLGWK3 = null;
  private CharacterField fieldE15GCNTAR = null;
  private DecimalField fieldE15GCCORR = null;
  private CharacterField fieldE15GCRUTC = null;
  private CharacterField fieldE15GCORIG = null;
  private CharacterField fieldE15GCFUNC = null;
  private CharacterField fieldE15GCCODE = null;
  private CharacterField fieldE15GCGLSE = null;
  private CharacterField fieldE15GCPROD = null;
  private CharacterField fieldE15GCGLSP = null;
  private DecimalField fieldE15GCMONT = null;
  private DecimalField fieldE15GCRETO = null;
  private DecimalField fieldE15GCSOLI = null;

  /**
  * Constructor for EGC060015Message.
  */
  public EGC060015Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 184;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH15USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H15USERID");
    fields[1] = fieldH15PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H15PROGRM");
    fields[2] = fieldH15TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H15TIMSYS");
    fields[3] = fieldH15SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H15SCRCOD");
    fields[4] = fieldH15OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H15OPECOD");
    fields[5] = fieldH15FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H15FLGMAS");
    fields[6] = fieldH15FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H15FLGWK1");
    fields[7] = fieldH15FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H15FLGWK2");
    fields[8] = fieldH15FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H15FLGWK3");
    fields[9] = fieldE15GCNTAR =
    new CharacterField(message, HEADERSIZE + 42, 19, "E15GCNTAR");
    fields[10] = fieldE15GCCORR =
    new DecimalField(message, HEADERSIZE + 61, 13, 0, "E15GCCORR");
    fields[11] = fieldE15GCRUTC =
    new CharacterField(message, HEADERSIZE + 74, 15, "E15GCRUTC");
    fields[12] = fieldE15GCORIG =
    new CharacterField(message, HEADERSIZE + 89, 4, "E15GCORIG");
    fields[13] = fieldE15GCFUNC =
    new CharacterField(message, HEADERSIZE + 93, 4, "E15GCFUNC");
    fields[14] = fieldE15GCCODE =
    new CharacterField(message, HEADERSIZE + 97, 4, "E15GCCODE");
    fields[15] = fieldE15GCGLSE =
    new CharacterField(message, HEADERSIZE + 101, 25, "E15GCGLSE");
    fields[16] = fieldE15GCPROD =
    new CharacterField(message, HEADERSIZE + 126, 4, "E15GCPROD");
    fields[17] = fieldE15GCGLSP =
    new CharacterField(message, HEADERSIZE + 130, 25, "E15GCGLSP");
    fields[18] = fieldE15GCMONT =
    new DecimalField(message, HEADERSIZE + 155, 13, 0, "E15GCMONT");
    fields[19] = fieldE15GCRETO =
    new DecimalField(message, HEADERSIZE + 168, 3, 0, "E15GCRETO");
    fields[20] = fieldE15GCSOLI =
    new DecimalField(message, HEADERSIZE + 171, 13, 0, "E15GCSOLI");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H15USERID using a String value.
  */
  public void setH15USERID(String newvalue)
  {
    fieldH15USERID.setString(newvalue);
  }

  /**
  * Get value of field H15USERID as a String.
  */
  public String getH15USERID()
  {
    return fieldH15USERID.getString();
  }

  /**
  * Set field H15PROGRM using a String value.
  */
  public void setH15PROGRM(String newvalue)
  {
    fieldH15PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H15PROGRM as a String.
  */
  public String getH15PROGRM()
  {
    return fieldH15PROGRM.getString();
  }

  /**
  * Set field H15TIMSYS using a String value.
  */
  public void setH15TIMSYS(String newvalue)
  {
    fieldH15TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H15TIMSYS as a String.
  */
  public String getH15TIMSYS()
  {
    return fieldH15TIMSYS.getString();
  }

  /**
  * Set field H15SCRCOD using a String value.
  */
  public void setH15SCRCOD(String newvalue)
  {
    fieldH15SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H15SCRCOD as a String.
  */
  public String getH15SCRCOD()
  {
    return fieldH15SCRCOD.getString();
  }

  /**
  * Set field H15OPECOD using a String value.
  */
  public void setH15OPECOD(String newvalue)
  {
    fieldH15OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H15OPECOD as a String.
  */
  public String getH15OPECOD()
  {
    return fieldH15OPECOD.getString();
  }

  /**
  * Set field H15FLGMAS using a String value.
  */
  public void setH15FLGMAS(String newvalue)
  {
    fieldH15FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H15FLGMAS as a String.
  */
  public String getH15FLGMAS()
  {
    return fieldH15FLGMAS.getString();
  }

  /**
  * Set field H15FLGWK1 using a String value.
  */
  public void setH15FLGWK1(String newvalue)
  {
    fieldH15FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H15FLGWK1 as a String.
  */
  public String getH15FLGWK1()
  {
    return fieldH15FLGWK1.getString();
  }

  /**
  * Set field H15FLGWK2 using a String value.
  */
  public void setH15FLGWK2(String newvalue)
  {
    fieldH15FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H15FLGWK2 as a String.
  */
  public String getH15FLGWK2()
  {
    return fieldH15FLGWK2.getString();
  }

  /**
  * Set field H15FLGWK3 using a String value.
  */
  public void setH15FLGWK3(String newvalue)
  {
    fieldH15FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H15FLGWK3 as a String.
  */
  public String getH15FLGWK3()
  {
    return fieldH15FLGWK3.getString();
  }

  /**
  * Set field E15GCNTAR using a String value.
  */
  public void setE15GCNTAR(String newvalue)
  {
    fieldE15GCNTAR.setString(newvalue);
  }

  /**
  * Get value of field E15GCNTAR as a String.
  */
  public String getE15GCNTAR()
  {
    return fieldE15GCNTAR.getString();
  }

  /**
  * Set field E15GCCORR using a String value.
  */
  public void setE15GCCORR(String newvalue)
  {
    fieldE15GCCORR.setString(newvalue);
  }

  /**
  * Get value of field E15GCCORR as a String.
  */
  public String getE15GCCORR()
  {
    return fieldE15GCCORR.getString();
  }

  /**
  * Set numeric field E15GCCORR using a BigDecimal value.
  */
  public void setE15GCCORR(BigDecimal newvalue)
  {
    fieldE15GCCORR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E15GCCORR as a BigDecimal.
  */
  public BigDecimal getBigDecimalE15GCCORR()
  {
    return fieldE15GCCORR.getBigDecimal();
  }

  /**
  * Set field E15GCRUTC using a String value.
  */
  public void setE15GCRUTC(String newvalue)
  {
    fieldE15GCRUTC.setString(newvalue);
  }

  /**
  * Get value of field E15GCRUTC as a String.
  */
  public String getE15GCRUTC()
  {
    return fieldE15GCRUTC.getString();
  }

  /**
  * Set field E15GCORIG using a String value.
  */
  public void setE15GCORIG(String newvalue)
  {
    fieldE15GCORIG.setString(newvalue);
  }

  /**
  * Get value of field E15GCORIG as a String.
  */
  public String getE15GCORIG()
  {
    return fieldE15GCORIG.getString();
  }

  /**
  * Set field E15GCFUNC using a String value.
  */
  public void setE15GCFUNC(String newvalue)
  {
    fieldE15GCFUNC.setString(newvalue);
  }

  /**
  * Get value of field E15GCFUNC as a String.
  */
  public String getE15GCFUNC()
  {
    return fieldE15GCFUNC.getString();
  }

  /**
  * Set field E15GCCODE using a String value.
  */
  public void setE15GCCODE(String newvalue)
  {
    fieldE15GCCODE.setString(newvalue);
  }

  /**
  * Get value of field E15GCCODE as a String.
  */
  public String getE15GCCODE()
  {
    return fieldE15GCCODE.getString();
  }

  /**
  * Set field E15GCGLSE using a String value.
  */
  public void setE15GCGLSE(String newvalue)
  {
    fieldE15GCGLSE.setString(newvalue);
  }

  /**
  * Get value of field E15GCGLSE as a String.
  */
  public String getE15GCGLSE()
  {
    return fieldE15GCGLSE.getString();
  }

  /**
  * Set field E15GCPROD using a String value.
  */
  public void setE15GCPROD(String newvalue)
  {
    fieldE15GCPROD.setString(newvalue);
  }

  /**
  * Get value of field E15GCPROD as a String.
  */
  public String getE15GCPROD()
  {
    return fieldE15GCPROD.getString();
  }

  /**
  * Set field E15GCGLSP using a String value.
  */
  public void setE15GCGLSP(String newvalue)
  {
    fieldE15GCGLSP.setString(newvalue);
  }

  /**
  * Get value of field E15GCGLSP as a String.
  */
  public String getE15GCGLSP()
  {
    return fieldE15GCGLSP.getString();
  }

  /**
  * Set field E15GCMONT using a String value.
  */
  public void setE15GCMONT(String newvalue)
  {
    fieldE15GCMONT.setString(newvalue);
  }

  /**
  * Get value of field E15GCMONT as a String.
  */
  public String getE15GCMONT()
  {
    return fieldE15GCMONT.getString();
  }

  /**
  * Set numeric field E15GCMONT using a BigDecimal value.
  */
  public void setE15GCMONT(BigDecimal newvalue)
  {
    fieldE15GCMONT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E15GCMONT as a BigDecimal.
  */
  public BigDecimal getBigDecimalE15GCMONT()
  {
    return fieldE15GCMONT.getBigDecimal();
  }

  /**
  * Set field E15GCRETO using a String value.
  */
  public void setE15GCRETO(String newvalue)
  {
    fieldE15GCRETO.setString(newvalue);
  }

  /**
  * Get value of field E15GCRETO as a String.
  */
  public String getE15GCRETO()
  {
    return fieldE15GCRETO.getString();
  }

  /**
  * Set numeric field E15GCRETO using a BigDecimal value.
  */
  public void setE15GCRETO(BigDecimal newvalue)
  {
    fieldE15GCRETO.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E15GCRETO as a BigDecimal.
  */
  public BigDecimal getBigDecimalE15GCRETO()
  {
    return fieldE15GCRETO.getBigDecimal();
  }

  /**
  * Set field E15GCSOLI using a String value.
  */
  public void setE15GCSOLI(String newvalue)
  {
    fieldE15GCSOLI.setString(newvalue);
  }

  /**
  * Get value of field E15GCSOLI as a String.
  */
  public String getE15GCSOLI()
  {
    return fieldE15GCSOLI.getString();
  }

  /**
  * Set numeric field E15GCSOLI using a BigDecimal value.
  */
  public void setE15GCSOLI(BigDecimal newvalue)
  {
    fieldE15GCSOLI.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E15GCSOLI as a BigDecimal.
  */
  public BigDecimal getBigDecimalE15GCSOLI()
  {
    return fieldE15GCSOLI.getBigDecimal();
  }

}

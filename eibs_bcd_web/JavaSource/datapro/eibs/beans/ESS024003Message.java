package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ESS024003 physical file definition.
* 
* File level identifier is 1160830132348.
* Record format level identifier is 599BE39FF2EDC.
*/

public class ESS024003Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H03USERID",
                                     "H03PROGRM",
                                     "H03TIMSYS",
                                     "H03SCRCOD",
                                     "H03OPECOD",
                                     "H03FLGMAS",
                                     "H03FLGWK1",
                                     "H03FLGWK2",
                                     "H03FLGWK3",
                                     "E03NUMACC",
                                     "E03NUMREF",
                                     "E03DATERM",
                                     "E03DATERD",
                                     "E03DATERY",
                                     "E03VALTIM",
                                     "E03FLDDSC",
                                     "E03VALBEF",
                                     "E03VALAFT",
                                     "E03MNPPRG",
                                     "E03MNPFIL",
                                     "E03USERID",
                                     "E03APLCDE",
                                     "E03CDTYPE"
                                   };
  final static String tnames[] = {
                                   "H03USERID",
                                   "H03PROGRM",
                                   "H03TIMSYS",
                                   "H03SCRCOD",
                                   "H03OPECOD",
                                   "H03FLGMAS",
                                   "H03FLGWK1",
                                   "H03FLGWK2",
                                   "H03FLGWK3",
                                   "E03NUMACC",
                                   "E03NUMREF",
                                   "E03DATERM",
                                   "E03DATERD",
                                   "E03DATERY",
                                   "E03VALTIM",
                                   "E03FLDDSC",
                                   "E03VALBEF",
                                   "E03VALAFT",
                                   "E03MNPPRG",
                                   "E03MNPFIL",
                                   "E03USERID",
                                   "E03APLCDE",
                                   "E03CDTYPE"
                                 };
  final static String fid = "1160830132348";
  final static String rid = "599BE39FF2EDC";
  final static String fmtname = "ESS024003";
  final int FIELDCOUNT = 23;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH03USERID = null;
  private CharacterField fieldH03PROGRM = null;
  private CharacterField fieldH03TIMSYS = null;
  private CharacterField fieldH03SCRCOD = null;
  private CharacterField fieldH03OPECOD = null;
  private CharacterField fieldH03FLGMAS = null;
  private CharacterField fieldH03FLGWK1 = null;
  private CharacterField fieldH03FLGWK2 = null;
  private CharacterField fieldH03FLGWK3 = null;
  private DecimalField fieldE03NUMACC = null;
  private DecimalField fieldE03NUMREF = null;
  private DecimalField fieldE03DATERM = null;
  private DecimalField fieldE03DATERD = null;
  private DecimalField fieldE03DATERY = null;
  private CharacterField fieldE03VALTIM = null;
  private CharacterField fieldE03FLDDSC = null;
  private CharacterField fieldE03VALBEF = null;
  private CharacterField fieldE03VALAFT = null;
  private CharacterField fieldE03MNPPRG = null;
  private CharacterField fieldE03MNPFIL = null;
  private CharacterField fieldE03USERID = null;
  private CharacterField fieldE03APLCDE = null;
  private CharacterField fieldE03CDTYPE = null;

  /**
  * Constructor for ESS024003Message.
  */
  public ESS024003Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 361;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH03USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H03USERID");
    fields[1] = fieldH03PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H03PROGRM");
    fields[2] = fieldH03TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H03TIMSYS");
    fields[3] = fieldH03SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H03SCRCOD");
    fields[4] = fieldH03OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H03OPECOD");
    fields[5] = fieldH03FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H03FLGMAS");
    fields[6] = fieldH03FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H03FLGWK1");
    fields[7] = fieldH03FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H03FLGWK2");
    fields[8] = fieldH03FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H03FLGWK3");
    fields[9] = fieldE03NUMACC =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "E03NUMACC");
    fields[10] = fieldE03NUMREF =
    new DecimalField(message, HEADERSIZE + 55, 13, 0, "E03NUMREF");
    fields[11] = fieldE03DATERM =
    new DecimalField(message, HEADERSIZE + 68, 3, 0, "E03DATERM");
    fields[12] = fieldE03DATERD =
    new DecimalField(message, HEADERSIZE + 71, 3, 0, "E03DATERD");
    fields[13] = fieldE03DATERY =
    new DecimalField(message, HEADERSIZE + 74, 5, 0, "E03DATERY");
    fields[14] = fieldE03VALTIM =
    new CharacterField(message, HEADERSIZE + 79, 26, "E03VALTIM");
    fields[15] = fieldE03FLDDSC =
    new CharacterField(message, HEADERSIZE + 105, 60, "E03FLDDSC");
    fields[16] = fieldE03VALBEF =
    new CharacterField(message, HEADERSIZE + 165, 80, "E03VALBEF");
    fields[17] = fieldE03VALAFT =
    new CharacterField(message, HEADERSIZE + 245, 80, "E03VALAFT");
    fields[18] = fieldE03MNPPRG =
    new CharacterField(message, HEADERSIZE + 325, 10, "E03MNPPRG");
    fields[19] = fieldE03MNPFIL =
    new CharacterField(message, HEADERSIZE + 335, 10, "E03MNPFIL");
    fields[20] = fieldE03USERID =
    new CharacterField(message, HEADERSIZE + 345, 10, "E03USERID");
    fields[21] = fieldE03APLCDE =
    new CharacterField(message, HEADERSIZE + 355, 2, "E03APLCDE");
    fields[22] = fieldE03CDTYPE =
    new CharacterField(message, HEADERSIZE + 357, 4, "E03CDTYPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H03USERID using a String value.
  */
  public void setH03USERID(String newvalue)
  {
    fieldH03USERID.setString(newvalue);
  }

  /**
  * Get value of field H03USERID as a String.
  */
  public String getH03USERID()
  {
    return fieldH03USERID.getString();
  }

  /**
  * Set field H03PROGRM using a String value.
  */
  public void setH03PROGRM(String newvalue)
  {
    fieldH03PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H03PROGRM as a String.
  */
  public String getH03PROGRM()
  {
    return fieldH03PROGRM.getString();
  }

  /**
  * Set field H03TIMSYS using a String value.
  */
  public void setH03TIMSYS(String newvalue)
  {
    fieldH03TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H03TIMSYS as a String.
  */
  public String getH03TIMSYS()
  {
    return fieldH03TIMSYS.getString();
  }

  /**
  * Set field H03SCRCOD using a String value.
  */
  public void setH03SCRCOD(String newvalue)
  {
    fieldH03SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H03SCRCOD as a String.
  */
  public String getH03SCRCOD()
  {
    return fieldH03SCRCOD.getString();
  }

  /**
  * Set field H03OPECOD using a String value.
  */
  public void setH03OPECOD(String newvalue)
  {
    fieldH03OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H03OPECOD as a String.
  */
  public String getH03OPECOD()
  {
    return fieldH03OPECOD.getString();
  }

  /**
  * Set field H03FLGMAS using a String value.
  */
  public void setH03FLGMAS(String newvalue)
  {
    fieldH03FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H03FLGMAS as a String.
  */
  public String getH03FLGMAS()
  {
    return fieldH03FLGMAS.getString();
  }

  /**
  * Set field H03FLGWK1 using a String value.
  */
  public void setH03FLGWK1(String newvalue)
  {
    fieldH03FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H03FLGWK1 as a String.
  */
  public String getH03FLGWK1()
  {
    return fieldH03FLGWK1.getString();
  }

  /**
  * Set field H03FLGWK2 using a String value.
  */
  public void setH03FLGWK2(String newvalue)
  {
    fieldH03FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H03FLGWK2 as a String.
  */
  public String getH03FLGWK2()
  {
    return fieldH03FLGWK2.getString();
  }

  /**
  * Set field H03FLGWK3 using a String value.
  */
  public void setH03FLGWK3(String newvalue)
  {
    fieldH03FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H03FLGWK3 as a String.
  */
  public String getH03FLGWK3()
  {
    return fieldH03FLGWK3.getString();
  }

  /**
  * Set field E03NUMACC using a String value.
  */
  public void setE03NUMACC(String newvalue)
  {
    fieldE03NUMACC.setString(newvalue);
  }

  /**
  * Get value of field E03NUMACC as a String.
  */
  public String getE03NUMACC()
  {
    return fieldE03NUMACC.getString();
  }

  /**
  * Set numeric field E03NUMACC using a BigDecimal value.
  */
  public void setE03NUMACC(BigDecimal newvalue)
  {
    fieldE03NUMACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E03NUMACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalE03NUMACC()
  {
    return fieldE03NUMACC.getBigDecimal();
  }

  /**
  * Set field E03NUMREF using a String value.
  */
  public void setE03NUMREF(String newvalue)
  {
    fieldE03NUMREF.setString(newvalue);
  }

  /**
  * Get value of field E03NUMREF as a String.
  */
  public String getE03NUMREF()
  {
    return fieldE03NUMREF.getString();
  }

  /**
  * Set numeric field E03NUMREF using a BigDecimal value.
  */
  public void setE03NUMREF(BigDecimal newvalue)
  {
    fieldE03NUMREF.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E03NUMREF as a BigDecimal.
  */
  public BigDecimal getBigDecimalE03NUMREF()
  {
    return fieldE03NUMREF.getBigDecimal();
  }

  /**
  * Set field E03DATERM using a String value.
  */
  public void setE03DATERM(String newvalue)
  {
    fieldE03DATERM.setString(newvalue);
  }

  /**
  * Get value of field E03DATERM as a String.
  */
  public String getE03DATERM()
  {
    return fieldE03DATERM.getString();
  }

  /**
  * Set numeric field E03DATERM using a BigDecimal value.
  */
  public void setE03DATERM(BigDecimal newvalue)
  {
    fieldE03DATERM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E03DATERM as a BigDecimal.
  */
  public BigDecimal getBigDecimalE03DATERM()
  {
    return fieldE03DATERM.getBigDecimal();
  }

  /**
  * Set field E03DATERD using a String value.
  */
  public void setE03DATERD(String newvalue)
  {
    fieldE03DATERD.setString(newvalue);
  }

  /**
  * Get value of field E03DATERD as a String.
  */
  public String getE03DATERD()
  {
    return fieldE03DATERD.getString();
  }

  /**
  * Set numeric field E03DATERD using a BigDecimal value.
  */
  public void setE03DATERD(BigDecimal newvalue)
  {
    fieldE03DATERD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E03DATERD as a BigDecimal.
  */
  public BigDecimal getBigDecimalE03DATERD()
  {
    return fieldE03DATERD.getBigDecimal();
  }

  /**
  * Set field E03DATERY using a String value.
  */
  public void setE03DATERY(String newvalue)
  {
    fieldE03DATERY.setString(newvalue);
  }

  /**
  * Get value of field E03DATERY as a String.
  */
  public String getE03DATERY()
  {
    return fieldE03DATERY.getString();
  }

  /**
  * Set numeric field E03DATERY using a BigDecimal value.
  */
  public void setE03DATERY(BigDecimal newvalue)
  {
    fieldE03DATERY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E03DATERY as a BigDecimal.
  */
  public BigDecimal getBigDecimalE03DATERY()
  {
    return fieldE03DATERY.getBigDecimal();
  }

  /**
  * Set field E03VALTIM using a String value.
  */
  public void setE03VALTIM(String newvalue)
  {
    fieldE03VALTIM.setString(newvalue);
  }

  /**
  * Get value of field E03VALTIM as a String.
  */
  public String getE03VALTIM()
  {
    return fieldE03VALTIM.getString();
  }

  /**
  * Set field E03FLDDSC using a String value.
  */
  public void setE03FLDDSC(String newvalue)
  {
    fieldE03FLDDSC.setString(newvalue);
  }

  /**
  * Get value of field E03FLDDSC as a String.
  */
  public String getE03FLDDSC()
  {
    return fieldE03FLDDSC.getString();
  }

  /**
  * Set field E03VALBEF using a String value.
  */
  public void setE03VALBEF(String newvalue)
  {
    fieldE03VALBEF.setString(newvalue);
  }

  /**
  * Get value of field E03VALBEF as a String.
  */
  public String getE03VALBEF()
  {
    return fieldE03VALBEF.getString();
  }

  /**
  * Set field E03VALAFT using a String value.
  */
  public void setE03VALAFT(String newvalue)
  {
    fieldE03VALAFT.setString(newvalue);
  }

  /**
  * Get value of field E03VALAFT as a String.
  */
  public String getE03VALAFT()
  {
    return fieldE03VALAFT.getString();
  }

  /**
  * Set field E03MNPPRG using a String value.
  */
  public void setE03MNPPRG(String newvalue)
  {
    fieldE03MNPPRG.setString(newvalue);
  }

  /**
  * Get value of field E03MNPPRG as a String.
  */
  public String getE03MNPPRG()
  {
    return fieldE03MNPPRG.getString();
  }

  /**
  * Set field E03MNPFIL using a String value.
  */
  public void setE03MNPFIL(String newvalue)
  {
    fieldE03MNPFIL.setString(newvalue);
  }

  /**
  * Get value of field E03MNPFIL as a String.
  */
  public String getE03MNPFIL()
  {
    return fieldE03MNPFIL.getString();
  }

  /**
  * Set field E03USERID using a String value.
  */
  public void setE03USERID(String newvalue)
  {
    fieldE03USERID.setString(newvalue);
  }

  /**
  * Get value of field E03USERID as a String.
  */
  public String getE03USERID()
  {
    return fieldE03USERID.getString();
  }

  /**
  * Set field E03APLCDE using a String value.
  */
  public void setE03APLCDE(String newvalue)
  {
    fieldE03APLCDE.setString(newvalue);
  }

  /**
  * Get value of field E03APLCDE as a String.
  */
  public String getE03APLCDE()
  {
    return fieldE03APLCDE.getString();
  }

  /**
  * Set field E03CDTYPE using a String value.
  */
  public void setE03CDTYPE(String newvalue)
  {
    fieldE03CDTYPE.setString(newvalue);
  }

  /**
  * Get value of field E03CDTYPE as a String.
  */
  public String getE03CDTYPE()
  {
    return fieldE03CDTYPE.getString();
  }

}

package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWS005001 physical file definition.
* 
* File level identifier is 1130611113511.
* Record format level identifier is 54777E9652881.
*/

public class EWS005001Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H50USR",
                                     "H50PGM",
                                     "H50TIM",
                                     "H50SCR",
                                     "H50OPE",
                                     "H50MAS",
                                     "H50WK1",
                                     "H50WK2",
                                     "H50WK3",
                                     "E50BNK",
                                     "E50CCY",
                                     "E50GLN",
                                     "E50CCN"
                                   };
  final static String tnames[] = {
                                   "H50USR",
                                   "H50PGM",
                                   "H50TIM",
                                   "H50SCR",
                                   "H50OPE",
                                   "H50MAS",
                                   "H50WK1",
                                   "H50WK2",
                                   "H50WK3",
                                   "E50BNK",
                                   "E50CCY",
                                   "E50GLN",
                                   "E50CCN"
                                 };
  final static String fid = "1130611113511";
  final static String rid = "54777E9652881";
  final static String fmtname = "EWS005001";
  final int FIELDCOUNT = 13;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH50USR = null;
  private CharacterField fieldH50PGM = null;
  private CharacterField fieldH50TIM = null;
  private CharacterField fieldH50SCR = null;
  private CharacterField fieldH50OPE = null;
  private CharacterField fieldH50MAS = null;
  private CharacterField fieldH50WK1 = null;
  private CharacterField fieldH50WK2 = null;
  private CharacterField fieldH50WK3 = null;
  private CharacterField fieldE50BNK = null;
  private CharacterField fieldE50CCY = null;
  private DecimalField fieldE50GLN = null;
  private DecimalField fieldE50CCN = null;

  /**
  * Constructor for EWS005001Message.
  */
  public EWS005001Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 73;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH50USR =
    new CharacterField(message, HEADERSIZE + 0, 10, "H50USR");
    fields[1] = fieldH50PGM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H50PGM");
    fields[2] = fieldH50TIM =
    new CharacterField(message, HEADERSIZE + 20, 12, "H50TIM");
    fields[3] = fieldH50SCR =
    new CharacterField(message, HEADERSIZE + 32, 2, "H50SCR");
    fields[4] = fieldH50OPE =
    new CharacterField(message, HEADERSIZE + 34, 4, "H50OPE");
    fields[5] = fieldH50MAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H50MAS");
    fields[6] = fieldH50WK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H50WK1");
    fields[7] = fieldH50WK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H50WK2");
    fields[8] = fieldH50WK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H50WK3");
    fields[9] = fieldE50BNK =
    new CharacterField(message, HEADERSIZE + 42, 2, "E50BNK");
    fields[10] = fieldE50CCY =
    new CharacterField(message, HEADERSIZE + 44, 3, "E50CCY");
    fields[11] = fieldE50GLN =
    new DecimalField(message, HEADERSIZE + 47, 17, 0, "E50GLN");
    fields[12] = fieldE50CCN =
    new DecimalField(message, HEADERSIZE + 64, 9, 0, "E50CCN");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H50USR using a String value.
  */
  public void setH50USR(String newvalue)
  {
    fieldH50USR.setString(newvalue);
  }

  /**
  * Get value of field H50USR as a String.
  */
  public String getH50USR()
  {
    return fieldH50USR.getString();
  }

  /**
  * Set field H50PGM using a String value.
  */
  public void setH50PGM(String newvalue)
  {
    fieldH50PGM.setString(newvalue);
  }

  /**
  * Get value of field H50PGM as a String.
  */
  public String getH50PGM()
  {
    return fieldH50PGM.getString();
  }

  /**
  * Set field H50TIM using a String value.
  */
  public void setH50TIM(String newvalue)
  {
    fieldH50TIM.setString(newvalue);
  }

  /**
  * Get value of field H50TIM as a String.
  */
  public String getH50TIM()
  {
    return fieldH50TIM.getString();
  }

  /**
  * Set field H50SCR using a String value.
  */
  public void setH50SCR(String newvalue)
  {
    fieldH50SCR.setString(newvalue);
  }

  /**
  * Get value of field H50SCR as a String.
  */
  public String getH50SCR()
  {
    return fieldH50SCR.getString();
  }

  /**
  * Set field H50OPE using a String value.
  */
  public void setH50OPE(String newvalue)
  {
    fieldH50OPE.setString(newvalue);
  }

  /**
  * Get value of field H50OPE as a String.
  */
  public String getH50OPE()
  {
    return fieldH50OPE.getString();
  }

  /**
  * Set field H50MAS using a String value.
  */
  public void setH50MAS(String newvalue)
  {
    fieldH50MAS.setString(newvalue);
  }

  /**
  * Get value of field H50MAS as a String.
  */
  public String getH50MAS()
  {
    return fieldH50MAS.getString();
  }

  /**
  * Set field H50WK1 using a String value.
  */
  public void setH50WK1(String newvalue)
  {
    fieldH50WK1.setString(newvalue);
  }

  /**
  * Get value of field H50WK1 as a String.
  */
  public String getH50WK1()
  {
    return fieldH50WK1.getString();
  }

  /**
  * Set field H50WK2 using a String value.
  */
  public void setH50WK2(String newvalue)
  {
    fieldH50WK2.setString(newvalue);
  }

  /**
  * Get value of field H50WK2 as a String.
  */
  public String getH50WK2()
  {
    return fieldH50WK2.getString();
  }

  /**
  * Set field H50WK3 using a String value.
  */
  public void setH50WK3(String newvalue)
  {
    fieldH50WK3.setString(newvalue);
  }

  /**
  * Get value of field H50WK3 as a String.
  */
  public String getH50WK3()
  {
    return fieldH50WK3.getString();
  }

  /**
  * Set field E50BNK using a String value.
  */
  public void setE50BNK(String newvalue)
  {
    fieldE50BNK.setString(newvalue);
  }

  /**
  * Get value of field E50BNK as a String.
  */
  public String getE50BNK()
  {
    return fieldE50BNK.getString();
  }

  /**
  * Set field E50CCY using a String value.
  */
  public void setE50CCY(String newvalue)
  {
    fieldE50CCY.setString(newvalue);
  }

  /**
  * Get value of field E50CCY as a String.
  */
  public String getE50CCY()
  {
    return fieldE50CCY.getString();
  }

  /**
  * Set field E50GLN using a String value.
  */
  public void setE50GLN(String newvalue)
  {
    fieldE50GLN.setString(newvalue);
  }

  /**
  * Get value of field E50GLN as a String.
  */
  public String getE50GLN()
  {
    return fieldE50GLN.getString();
  }

  /**
  * Set numeric field E50GLN using a BigDecimal value.
  */
  public void setE50GLN(BigDecimal newvalue)
  {
    fieldE50GLN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E50GLN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE50GLN()
  {
    return fieldE50GLN.getBigDecimal();
  }

  /**
  * Set field E50CCN using a String value.
  */
  public void setE50CCN(String newvalue)
  {
    fieldE50CCN.setString(newvalue);
  }

  /**
  * Get value of field E50CCN as a String.
  */
  public String getE50CCN()
  {
    return fieldE50CCN.getString();
  }

  /**
  * Set numeric field E50CCN using a BigDecimal value.
  */
  public void setE50CCN(BigDecimal newvalue)
  {
    fieldE50CCN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E50CCN as a BigDecimal.
  */
  public BigDecimal getBigDecimalE50CCN()
  {
    return fieldE50CCN.getBigDecimal();
  }

}

package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EGC070015 physical file definition.
* 
* File level identifier is 1100706173619.
* Record format level identifier is 3C27D275F8B84.
*/

public class EGC070015Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USERID",
                                     "H01PROGRM",
                                     "H01TIMSYS",
                                     "H01SCRCOD",
                                     "H01OPECOD",
                                     "H01FLGMAS",
                                     "H01FLGWK1",
                                     "H01FLGWK2",
                                     "H01FLGWK3",
                                     "EGCACC",
                                     "EGCPRO",
                                     "EGCXCN",
                                     "CPRDTM",
                                     "CPRDTY",
                                     "CPRAVG",
                                     "EGCXRT"
                                   };
  final static String tnames[] = {
                                   "H01USERID",
                                   "H01PROGRM",
                                   "H01TIMSYS",
                                   "H01SCRCOD",
                                   "H01OPECOD",
                                   "H01FLGMAS",
                                   "H01FLGWK1",
                                   "H01FLGWK2",
                                   "H01FLGWK3",
                                   "EGCACC",
                                   "EGCPRO",
                                   "EGCXCN",
                                   "CPRDTM",
                                   "CPRDTY",
                                   "CPRAVG",
                                   "EGCXRT"
                                 };
  final static String fid = "1100706173619";
  final static String rid = "3C27D275F8B84";
  final static String fmtname = "EGC070015";
  final int FIELDCOUNT = 16;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USERID = null;
  private CharacterField fieldH01PROGRM = null;
  private CharacterField fieldH01TIMSYS = null;
  private CharacterField fieldH01SCRCOD = null;
  private CharacterField fieldH01OPECOD = null;
  private CharacterField fieldH01FLGMAS = null;
  private CharacterField fieldH01FLGWK1 = null;
  private CharacterField fieldH01FLGWK2 = null;
  private CharacterField fieldH01FLGWK3 = null;
  private DecimalField fieldEGCACC = null;
  private CharacterField fieldEGCPRO = null;
  private DecimalField fieldEGCXCN = null;
  private DecimalField fieldCPRDTM = null;
  private DecimalField fieldCPRDTY = null;
  private DecimalField fieldCPRAVG = null;
  private DecimalField fieldEGCXRT = null;

  /**
  * Constructor for EGC070015Message.
  */
  public EGC070015Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 89;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USERID");
    fields[1] = fieldH01PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PROGRM");
    fields[2] = fieldH01TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIMSYS");
    fields[3] = fieldH01SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCRCOD");
    fields[4] = fieldH01OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPECOD");
    fields[5] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01FLGMAS");
    fields[6] = fieldH01FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01FLGWK1");
    fields[7] = fieldH01FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01FLGWK2");
    fields[8] = fieldH01FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01FLGWK3");
    fields[9] = fieldEGCACC =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "EGCACC");
    fields[10] = fieldEGCPRO =
    new CharacterField(message, HEADERSIZE + 55, 4, "EGCPRO");
    fields[11] = fieldEGCXCN =
    new DecimalField(message, HEADERSIZE + 59, 3, 0, "EGCXCN");
    fields[12] = fieldCPRDTM =
    new DecimalField(message, HEADERSIZE + 62, 3, 0, "CPRDTM");
    fields[13] = fieldCPRDTY =
    new DecimalField(message, HEADERSIZE + 65, 3, 0, "CPRDTY");
    fields[14] = fieldCPRAVG =
    new DecimalField(message, HEADERSIZE + 68, 19, 2, "CPRAVG");
    fields[15] = fieldEGCXRT =
    new DecimalField(message, HEADERSIZE + 87, 2, 0, "EGCXRT");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USERID using a String value.
  */
  public void setH01USERID(String newvalue)
  {
    fieldH01USERID.setString(newvalue);
  }

  /**
  * Get value of field H01USERID as a String.
  */
  public String getH01USERID()
  {
    return fieldH01USERID.getString();
  }

  /**
  * Set field H01PROGRM using a String value.
  */
  public void setH01PROGRM(String newvalue)
  {
    fieldH01PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H01PROGRM as a String.
  */
  public String getH01PROGRM()
  {
    return fieldH01PROGRM.getString();
  }

  /**
  * Set field H01TIMSYS using a String value.
  */
  public void setH01TIMSYS(String newvalue)
  {
    fieldH01TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H01TIMSYS as a String.
  */
  public String getH01TIMSYS()
  {
    return fieldH01TIMSYS.getString();
  }

  /**
  * Set field H01SCRCOD using a String value.
  */
  public void setH01SCRCOD(String newvalue)
  {
    fieldH01SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H01SCRCOD as a String.
  */
  public String getH01SCRCOD()
  {
    return fieldH01SCRCOD.getString();
  }

  /**
  * Set field H01OPECOD using a String value.
  */
  public void setH01OPECOD(String newvalue)
  {
    fieldH01OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H01OPECOD as a String.
  */
  public String getH01OPECOD()
  {
    return fieldH01OPECOD.getString();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

  /**
  * Set field H01FLGWK1 using a String value.
  */
  public void setH01FLGWK1(String newvalue)
  {
    fieldH01FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK1 as a String.
  */
  public String getH01FLGWK1()
  {
    return fieldH01FLGWK1.getString();
  }

  /**
  * Set field H01FLGWK2 using a String value.
  */
  public void setH01FLGWK2(String newvalue)
  {
    fieldH01FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK2 as a String.
  */
  public String getH01FLGWK2()
  {
    return fieldH01FLGWK2.getString();
  }

  /**
  * Set field H01FLGWK3 using a String value.
  */
  public void setH01FLGWK3(String newvalue)
  {
    fieldH01FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK3 as a String.
  */
  public String getH01FLGWK3()
  {
    return fieldH01FLGWK3.getString();
  }

  /**
  * Set field EGCACC using a String value.
  */
  public void setEGCACC(String newvalue)
  {
    fieldEGCACC.setString(newvalue);
  }

  /**
  * Get value of field EGCACC as a String.
  */
  public String getEGCACC()
  {
    return fieldEGCACC.getString();
  }

  /**
  * Set numeric field EGCACC using a BigDecimal value.
  */
  public void setEGCACC(BigDecimal newvalue)
  {
    fieldEGCACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EGCACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalEGCACC()
  {
    return fieldEGCACC.getBigDecimal();
  }

  /**
  * Set field EGCPRO using a String value.
  */
  public void setEGCPRO(String newvalue)
  {
    fieldEGCPRO.setString(newvalue);
  }

  /**
  * Get value of field EGCPRO as a String.
  */
  public String getEGCPRO()
  {
    return fieldEGCPRO.getString();
  }

  /**
  * Set field EGCXCN using a String value.
  */
  public void setEGCXCN(String newvalue)
  {
    fieldEGCXCN.setString(newvalue);
  }

  /**
  * Get value of field EGCXCN as a String.
  */
  public String getEGCXCN()
  {
    return fieldEGCXCN.getString();
  }

  /**
  * Set numeric field EGCXCN using a BigDecimal value.
  */
  public void setEGCXCN(BigDecimal newvalue)
  {
    fieldEGCXCN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EGCXCN as a BigDecimal.
  */
  public BigDecimal getBigDecimalEGCXCN()
  {
    return fieldEGCXCN.getBigDecimal();
  }

  /**
  * Set field CPRDTM using a String value.
  */
  public void setCPRDTM(String newvalue)
  {
    fieldCPRDTM.setString(newvalue);
  }

  /**
  * Get value of field CPRDTM as a String.
  */
  public String getCPRDTM()
  {
    return fieldCPRDTM.getString();
  }

  /**
  * Set numeric field CPRDTM using a BigDecimal value.
  */
  public void setCPRDTM(BigDecimal newvalue)
  {
    fieldCPRDTM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CPRDTM as a BigDecimal.
  */
  public BigDecimal getBigDecimalCPRDTM()
  {
    return fieldCPRDTM.getBigDecimal();
  }

  /**
  * Set field CPRDTY using a String value.
  */
  public void setCPRDTY(String newvalue)
  {
    fieldCPRDTY.setString(newvalue);
  }

  /**
  * Get value of field CPRDTY as a String.
  */
  public String getCPRDTY()
  {
    return fieldCPRDTY.getString();
  }

  /**
  * Set numeric field CPRDTY using a BigDecimal value.
  */
  public void setCPRDTY(BigDecimal newvalue)
  {
    fieldCPRDTY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CPRDTY as a BigDecimal.
  */
  public BigDecimal getBigDecimalCPRDTY()
  {
    return fieldCPRDTY.getBigDecimal();
  }

  /**
  * Set field CPRAVG using a String value.
  */
  public void setCPRAVG(String newvalue)
  {
    fieldCPRAVG.setString(newvalue);
  }

  /**
  * Get value of field CPRAVG as a String.
  */
  public String getCPRAVG()
  {
    return fieldCPRAVG.getString();
  }

  /**
  * Set numeric field CPRAVG using a BigDecimal value.
  */
  public void setCPRAVG(BigDecimal newvalue)
  {
    fieldCPRAVG.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CPRAVG as a BigDecimal.
  */
  public BigDecimal getBigDecimalCPRAVG()
  {
    return fieldCPRAVG.getBigDecimal();
  }

  /**
  * Set field EGCXRT using a String value.
  */
  public void setEGCXRT(String newvalue)
  {
    fieldEGCXRT.setString(newvalue);
  }

  /**
  * Get value of field EGCXRT as a String.
  */
  public String getEGCXRT()
  {
    return fieldEGCXRT.getString();
  }

  /**
  * Set numeric field EGCXRT using a BigDecimal value.
  */
  public void setEGCXRT(BigDecimal newvalue)
  {
    fieldEGCXRT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EGCXRT as a BigDecimal.
  */
  public BigDecimal getBigDecimalEGCXRT()
  {
    return fieldEGCXRT.getBigDecimal();
  }

}

package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ECM000102 physical file definition.
* 
* File level identifier is 1100706173541.
* Record format level identifier is 4C07063C25E50.
*/

public class ECM000102Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H02USERID",
                                     "H02PROGRM",
                                     "H02TIMSYS",
                                     "H02SCRCOD",
                                     "H02OPECOD",
                                     "H02FLGMAS",
                                     "H02FLGWK1",
                                     "H02FLGWK2",
                                     "H02FLGWK3",
                                     "CMSFEC",
                                     "CMSCUN",
                                     "CMSACC",
                                     "CMSMON",
                                     "CMSNRO",
                                     "CMSMTO",
                                     "FILLER1"
                                   };
  final static String tnames[] = {
                                   "H02USERID",
                                   "H02PROGRM",
                                   "H02TIMSYS",
                                   "H02SCRCOD",
                                   "H02OPECOD",
                                   "H02FLGMAS",
                                   "H02FLGWK1",
                                   "H02FLGWK2",
                                   "H02FLGWK3",
                                   "CMSFEC",
                                   "CMSCUN",
                                   "CMSACC",
                                   "CMSMON",
                                   "CMSNRO",
                                   "CMSMTO",
                                   "FILLER1"
                                 };
  final static String fid = "1100706173541";
  final static String rid = "4C07063C25E50";
  final static String fmtname = "ECM000102";
  final int FIELDCOUNT = 16;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH02USERID = null;
  private CharacterField fieldH02PROGRM = null;
  private CharacterField fieldH02TIMSYS = null;
  private CharacterField fieldH02SCRCOD = null;
  private CharacterField fieldH02OPECOD = null;
  private CharacterField fieldH02FLGMAS = null;
  private CharacterField fieldH02FLGWK1 = null;
  private CharacterField fieldH02FLGWK2 = null;
  private CharacterField fieldH02FLGWK3 = null;
  private DecimalField fieldCMSFEC = null;
  private DecimalField fieldCMSCUN = null;
  private DecimalField fieldCMSACC = null;
  private CharacterField fieldCMSMON = null;
  private DecimalField fieldCMSNRO = null;
  private DecimalField fieldCMSMTO = null;
  private CharacterField fieldFILLER1 = null;

  /**
  * Constructor for ECM000102Message.
  */
  public ECM000102Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 596;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH02USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H02USERID");
    fields[1] = fieldH02PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H02PROGRM");
    fields[2] = fieldH02TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H02TIMSYS");
    fields[3] = fieldH02SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H02SCRCOD");
    fields[4] = fieldH02OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H02OPECOD");
    fields[5] = fieldH02FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H02FLGMAS");
    fields[6] = fieldH02FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H02FLGWK1");
    fields[7] = fieldH02FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H02FLGWK2");
    fields[8] = fieldH02FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H02FLGWK3");
    fields[9] = fieldCMSFEC =
    new DecimalField(message, HEADERSIZE + 42, 9, 0, "CMSFEC");
    fields[10] = fieldCMSCUN =
    new DecimalField(message, HEADERSIZE + 51, 10, 0, "CMSCUN");
    fields[11] = fieldCMSACC =
    new DecimalField(message, HEADERSIZE + 61, 13, 0, "CMSACC");
    fields[12] = fieldCMSMON =
    new CharacterField(message, HEADERSIZE + 74, 3, "CMSMON");
    fields[13] = fieldCMSNRO =
    new DecimalField(message, HEADERSIZE + 77, 4, 0, "CMSNRO");
    fields[14] = fieldCMSMTO =
    new DecimalField(message, HEADERSIZE + 81, 15, 4, "CMSMTO");
    fields[15] = fieldFILLER1 =
    new CharacterField(message, HEADERSIZE + 96, 500, "FILLER1");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H02USERID using a String value.
  */
  public void setH02USERID(String newvalue)
  {
    fieldH02USERID.setString(newvalue);
  }

  /**
  * Get value of field H02USERID as a String.
  */
  public String getH02USERID()
  {
    return fieldH02USERID.getString();
  }

  /**
  * Set field H02PROGRM using a String value.
  */
  public void setH02PROGRM(String newvalue)
  {
    fieldH02PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H02PROGRM as a String.
  */
  public String getH02PROGRM()
  {
    return fieldH02PROGRM.getString();
  }

  /**
  * Set field H02TIMSYS using a String value.
  */
  public void setH02TIMSYS(String newvalue)
  {
    fieldH02TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H02TIMSYS as a String.
  */
  public String getH02TIMSYS()
  {
    return fieldH02TIMSYS.getString();
  }

  /**
  * Set field H02SCRCOD using a String value.
  */
  public void setH02SCRCOD(String newvalue)
  {
    fieldH02SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H02SCRCOD as a String.
  */
  public String getH02SCRCOD()
  {
    return fieldH02SCRCOD.getString();
  }

  /**
  * Set field H02OPECOD using a String value.
  */
  public void setH02OPECOD(String newvalue)
  {
    fieldH02OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H02OPECOD as a String.
  */
  public String getH02OPECOD()
  {
    return fieldH02OPECOD.getString();
  }

  /**
  * Set field H02FLGMAS using a String value.
  */
  public void setH02FLGMAS(String newvalue)
  {
    fieldH02FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H02FLGMAS as a String.
  */
  public String getH02FLGMAS()
  {
    return fieldH02FLGMAS.getString();
  }

  /**
  * Set field H02FLGWK1 using a String value.
  */
  public void setH02FLGWK1(String newvalue)
  {
    fieldH02FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK1 as a String.
  */
  public String getH02FLGWK1()
  {
    return fieldH02FLGWK1.getString();
  }

  /**
  * Set field H02FLGWK2 using a String value.
  */
  public void setH02FLGWK2(String newvalue)
  {
    fieldH02FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK2 as a String.
  */
  public String getH02FLGWK2()
  {
    return fieldH02FLGWK2.getString();
  }

  /**
  * Set field H02FLGWK3 using a String value.
  */
  public void setH02FLGWK3(String newvalue)
  {
    fieldH02FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK3 as a String.
  */
  public String getH02FLGWK3()
  {
    return fieldH02FLGWK3.getString();
  }

  /**
  * Set field CMSFEC using a String value.
  */
  public void setCMSFEC(String newvalue)
  {
    fieldCMSFEC.setString(newvalue);
  }

  /**
  * Get value of field CMSFEC as a String.
  */
  public String getCMSFEC()
  {
    return fieldCMSFEC.getString();
  }

  /**
  * Set numeric field CMSFEC using a BigDecimal value.
  */
  public void setCMSFEC(BigDecimal newvalue)
  {
    fieldCMSFEC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CMSFEC as a BigDecimal.
  */
  public BigDecimal getBigDecimalCMSFEC()
  {
    return fieldCMSFEC.getBigDecimal();
  }

  /**
  * Set field CMSCUN using a String value.
  */
  public void setCMSCUN(String newvalue)
  {
    fieldCMSCUN.setString(newvalue);
  }

  /**
  * Get value of field CMSCUN as a String.
  */
  public String getCMSCUN()
  {
    return fieldCMSCUN.getString();
  }

  /**
  * Set numeric field CMSCUN using a BigDecimal value.
  */
  public void setCMSCUN(BigDecimal newvalue)
  {
    fieldCMSCUN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CMSCUN as a BigDecimal.
  */
  public BigDecimal getBigDecimalCMSCUN()
  {
    return fieldCMSCUN.getBigDecimal();
  }

  /**
  * Set field CMSACC using a String value.
  */
  public void setCMSACC(String newvalue)
  {
    fieldCMSACC.setString(newvalue);
  }

  /**
  * Get value of field CMSACC as a String.
  */
  public String getCMSACC()
  {
    return fieldCMSACC.getString();
  }

  /**
  * Set numeric field CMSACC using a BigDecimal value.
  */
  public void setCMSACC(BigDecimal newvalue)
  {
    fieldCMSACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CMSACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalCMSACC()
  {
    return fieldCMSACC.getBigDecimal();
  }

  /**
  * Set field CMSMON using a String value.
  */
  public void setCMSMON(String newvalue)
  {
    fieldCMSMON.setString(newvalue);
  }

  /**
  * Get value of field CMSMON as a String.
  */
  public String getCMSMON()
  {
    return fieldCMSMON.getString();
  }

  /**
  * Set field CMSNRO using a String value.
  */
  public void setCMSNRO(String newvalue)
  {
    fieldCMSNRO.setString(newvalue);
  }

  /**
  * Get value of field CMSNRO as a String.
  */
  public String getCMSNRO()
  {
    return fieldCMSNRO.getString();
  }

  /**
  * Set numeric field CMSNRO using a BigDecimal value.
  */
  public void setCMSNRO(BigDecimal newvalue)
  {
    fieldCMSNRO.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CMSNRO as a BigDecimal.
  */
  public BigDecimal getBigDecimalCMSNRO()
  {
    return fieldCMSNRO.getBigDecimal();
  }

  /**
  * Set field CMSMTO using a String value.
  */
  public void setCMSMTO(String newvalue)
  {
    fieldCMSMTO.setString(newvalue);
  }

  /**
  * Get value of field CMSMTO as a String.
  */
  public String getCMSMTO()
  {
    return fieldCMSMTO.getString();
  }

  /**
  * Set numeric field CMSMTO using a BigDecimal value.
  */
  public void setCMSMTO(BigDecimal newvalue)
  {
    fieldCMSMTO.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field CMSMTO as a BigDecimal.
  */
  public BigDecimal getBigDecimalCMSMTO()
  {
    return fieldCMSMTO.getBigDecimal();
  }

  /**
  * Set field FILLER1 using a String value.
  */
  public void setFILLER1(String newvalue)
  {
    fieldFILLER1.setString(newvalue);
  }

  /**
  * Get value of field FILLER1 as a String.
  */
  public String getFILLER1()
  {
    return fieldFILLER1.getString();
  }

}

package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0210DS physical file definition.
* 
* File level identifier is 1170208122939.
* Record format level identifier is 51C267997F6C0.
*/

public class EWD0210DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EWDCOD",
                                     "EWDPLN",
                                     "EWDDSC",
                                     "EWDTRM",
                                     "EWDPMI",
                                     "EWDPMX",
                                     "EWDOPE"
                                   };
  final static String tnames[] = {
                                   "EWDCOD",
                                   "EWDPLN",
                                   "EWDDSC",
                                   "EWDTRM",
                                   "EWDPMI",
                                   "EWDPMX",
                                   "EWDOPE"
                                 };
  final static String fid = "1170208122939";
  final static String rid = "51C267997F6C0";
  final static String fmtname = "EWD0210DS";
  final int FIELDCOUNT = 7;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldEWDCOD = null;
  private DecimalField fieldEWDPLN = null;
  private CharacterField fieldEWDDSC = null;
  private DecimalField fieldEWDTRM = null;
  private DecimalField fieldEWDPMI = null;
  private DecimalField fieldEWDPMX = null;
  private CharacterField fieldEWDOPE = null;

  /**
  * Constructor for EWD0210DSMessage.
  */
  public EWD0210DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 71;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEWDCOD =
    new CharacterField(message, HEADERSIZE + 0, 4, "EWDCOD");
    fields[1] = fieldEWDPLN =
    new DecimalField(message, HEADERSIZE + 4, 3, 0, "EWDPLN");
    fields[2] = fieldEWDDSC =
    new CharacterField(message, HEADERSIZE + 7, 45, "EWDDSC");
    fields[3] = fieldEWDTRM =
    new DecimalField(message, HEADERSIZE + 52, 6, 0, "EWDTRM");
    fields[4] = fieldEWDPMI =
    new DecimalField(message, HEADERSIZE + 58, 6, 0, "EWDPMI");
    fields[5] = fieldEWDPMX =
    new DecimalField(message, HEADERSIZE + 64, 6, 0, "EWDPMX");
    fields[6] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 70, 1, "EWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EWDCOD using a String value.
  */
  public void setEWDCOD(String newvalue)
  {
    fieldEWDCOD.setString(newvalue);
  }

  /**
  * Get value of field EWDCOD as a String.
  */
  public String getEWDCOD()
  {
    return fieldEWDCOD.getString();
  }

  /**
  * Set field EWDPLN using a String value.
  */
  public void setEWDPLN(String newvalue)
  {
    fieldEWDPLN.setString(newvalue);
  }

  /**
  * Get value of field EWDPLN as a String.
  */
  public String getEWDPLN()
  {
    return fieldEWDPLN.getString();
  }

  /**
  * Set numeric field EWDPLN using a BigDecimal value.
  */
  public void setEWDPLN(BigDecimal newvalue)
  {
    fieldEWDPLN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDPLN as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDPLN()
  {
    return fieldEWDPLN.getBigDecimal();
  }

  /**
  * Set field EWDDSC using a String value.
  */
  public void setEWDDSC(String newvalue)
  {
    fieldEWDDSC.setString(newvalue);
  }

  /**
  * Get value of field EWDDSC as a String.
  */
  public String getEWDDSC()
  {
    return fieldEWDDSC.getString();
  }

  /**
  * Set field EWDTRM using a String value.
  */
  public void setEWDTRM(String newvalue)
  {
    fieldEWDTRM.setString(newvalue);
  }

  /**
  * Get value of field EWDTRM as a String.
  */
  public String getEWDTRM()
  {
    return fieldEWDTRM.getString();
  }

  /**
  * Set numeric field EWDTRM using a BigDecimal value.
  */
  public void setEWDTRM(BigDecimal newvalue)
  {
    fieldEWDTRM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDTRM as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDTRM()
  {
    return fieldEWDTRM.getBigDecimal();
  }

  /**
  * Set field EWDPMI using a String value.
  */
  public void setEWDPMI(String newvalue)
  {
    fieldEWDPMI.setString(newvalue);
  }

  /**
  * Get value of field EWDPMI as a String.
  */
  public String getEWDPMI()
  {
    return fieldEWDPMI.getString();
  }

  /**
  * Set numeric field EWDPMI using a BigDecimal value.
  */
  public void setEWDPMI(BigDecimal newvalue)
  {
    fieldEWDPMI.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDPMI as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDPMI()
  {
    return fieldEWDPMI.getBigDecimal();
  }

  /**
  * Set field EWDPMX using a String value.
  */
  public void setEWDPMX(String newvalue)
  {
    fieldEWDPMX.setString(newvalue);
  }

  /**
  * Get value of field EWDPMX as a String.
  */
  public String getEWDPMX()
  {
    return fieldEWDPMX.getString();
  }

  /**
  * Set numeric field EWDPMX using a BigDecimal value.
  */
  public void setEWDPMX(BigDecimal newvalue)
  {
    fieldEWDPMX.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDPMX as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDPMX()
  {
    return fieldEWDPMX.getBigDecimal();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

}

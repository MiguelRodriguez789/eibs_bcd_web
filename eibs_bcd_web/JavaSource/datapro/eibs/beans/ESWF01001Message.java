package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ESWF01001 physical file definition.
* 
* File level identifier is 1170224123130.
* Record format level identifier is 51AC7455EA276.
*/

public class ESWF01001Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USR",
                                     "H01PGM",
                                     "H01TIM",
                                     "H01SCR",
                                     "H01OPE",
                                     "H01MAS",
                                     "H01WK1",
                                     "H01WK2",
                                     "H01WK3",
                                     "ESW1ACR",
                                     "ESW1FOR",
                                     "ESW1USR",
                                     "ESW1REF",
                                     "ESW1RLR",
                                     "ESW1SWI",
                                     "ESW1DTM",
                                     "ESW1DTD",
                                     "ESW1DTY",
                                     "ESW1LIN",
                                     "ESW1STS"
                                   };
  final static String tnames[] = {
                                   "H01USR",
                                   "H01PGM",
                                   "H01TIM",
                                   "H01SCR",
                                   "H01OPE",
                                   "H01MAS",
                                   "H01WK1",
                                   "H01WK2",
                                   "H01WK3",
                                   "ESW1ACR",
                                   "ESW1FOR",
                                   "ESW1USR",
                                   "ESW1REF",
                                   "ESW1RLR",
                                   "ESW1SWI",
                                   "ESW1DTM",
                                   "ESW1DTD",
                                   "ESW1DTY",
                                   "ESW1LIN",
                                   "ESW1STS"
                                 };
  final static String fid = "1170224123130";
  final static String rid = "51AC7455EA276";
  final static String fmtname = "ESWF01001";
  final int FIELDCOUNT = 20;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USR = null;
  private CharacterField fieldH01PGM = null;
  private CharacterField fieldH01TIM = null;
  private CharacterField fieldH01SCR = null;
  private CharacterField fieldH01OPE = null;
  private CharacterField fieldH01MAS = null;
  private CharacterField fieldH01WK1 = null;
  private CharacterField fieldH01WK2 = null;
  private CharacterField fieldH01WK3 = null;
  private DecimalField fieldESW1ACR = null;
  private DecimalField fieldESW1FOR = null;
  private CharacterField fieldESW1USR = null;
  private CharacterField fieldESW1REF = null;
  private CharacterField fieldESW1RLR = null;
  private CharacterField fieldESW1SWI = null;
  private DecimalField fieldESW1DTM = null;
  private DecimalField fieldESW1DTD = null;
  private DecimalField fieldESW1DTY = null;
  private DecimalField fieldESW1LIN = null;
  private CharacterField fieldESW1STS = null;

  /**
  * Constructor for ESWF01001Message.
  */
  public ESWF01001Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 130;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USR =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USR");
    fields[1] = fieldH01PGM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PGM");
    fields[2] = fieldH01TIM =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIM");
    fields[3] = fieldH01SCR =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCR");
    fields[4] = fieldH01OPE =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPE");
    fields[5] = fieldH01MAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01MAS");
    fields[6] = fieldH01WK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01WK1");
    fields[7] = fieldH01WK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01WK2");
    fields[8] = fieldH01WK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01WK3");
    fields[9] = fieldESW1ACR =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "ESW1ACR");
    fields[10] = fieldESW1FOR =
    new DecimalField(message, HEADERSIZE + 55, 4, 0, "ESW1FOR");
    fields[11] = fieldESW1USR =
    new CharacterField(message, HEADERSIZE + 59, 10, "ESW1USR");
    fields[12] = fieldESW1REF =
    new CharacterField(message, HEADERSIZE + 69, 16, "ESW1REF");
    fields[13] = fieldESW1RLR =
    new CharacterField(message, HEADERSIZE + 85, 16, "ESW1RLR");
    fields[14] = fieldESW1SWI =
    new CharacterField(message, HEADERSIZE + 101, 12, "ESW1SWI");
    fields[15] = fieldESW1DTM =
    new DecimalField(message, HEADERSIZE + 113, 3, 0, "ESW1DTM");
    fields[16] = fieldESW1DTD =
    new DecimalField(message, HEADERSIZE + 116, 3, 0, "ESW1DTD");
    fields[17] = fieldESW1DTY =
    new DecimalField(message, HEADERSIZE + 119, 5, 0, "ESW1DTY");
    fields[18] = fieldESW1LIN =
    new DecimalField(message, HEADERSIZE + 124, 5, 0, "ESW1LIN");
    fields[19] = fieldESW1STS =
    new CharacterField(message, HEADERSIZE + 129, 1, "ESW1STS");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USR using a String value.
  */
  public void setH01USR(String newvalue)
  {
    fieldH01USR.setString(newvalue);
  }

  /**
  * Get value of field H01USR as a String.
  */
  public String getH01USR()
  {
    return fieldH01USR.getString();
  }

  /**
  * Set field H01PGM using a String value.
  */
  public void setH01PGM(String newvalue)
  {
    fieldH01PGM.setString(newvalue);
  }

  /**
  * Get value of field H01PGM as a String.
  */
  public String getH01PGM()
  {
    return fieldH01PGM.getString();
  }

  /**
  * Set field H01TIM using a String value.
  */
  public void setH01TIM(String newvalue)
  {
    fieldH01TIM.setString(newvalue);
  }

  /**
  * Get value of field H01TIM as a String.
  */
  public String getH01TIM()
  {
    return fieldH01TIM.getString();
  }

  /**
  * Set field H01SCR using a String value.
  */
  public void setH01SCR(String newvalue)
  {
    fieldH01SCR.setString(newvalue);
  }

  /**
  * Get value of field H01SCR as a String.
  */
  public String getH01SCR()
  {
    return fieldH01SCR.getString();
  }

  /**
  * Set field H01OPE using a String value.
  */
  public void setH01OPE(String newvalue)
  {
    fieldH01OPE.setString(newvalue);
  }

  /**
  * Get value of field H01OPE as a String.
  */
  public String getH01OPE()
  {
    return fieldH01OPE.getString();
  }

  /**
  * Set field H01MAS using a String value.
  */
  public void setH01MAS(String newvalue)
  {
    fieldH01MAS.setString(newvalue);
  }

  /**
  * Get value of field H01MAS as a String.
  */
  public String getH01MAS()
  {
    return fieldH01MAS.getString();
  }

  /**
  * Set field H01WK1 using a String value.
  */
  public void setH01WK1(String newvalue)
  {
    fieldH01WK1.setString(newvalue);
  }

  /**
  * Get value of field H01WK1 as a String.
  */
  public String getH01WK1()
  {
    return fieldH01WK1.getString();
  }

  /**
  * Set field H01WK2 using a String value.
  */
  public void setH01WK2(String newvalue)
  {
    fieldH01WK2.setString(newvalue);
  }

  /**
  * Get value of field H01WK2 as a String.
  */
  public String getH01WK2()
  {
    return fieldH01WK2.getString();
  }

  /**
  * Set field H01WK3 using a String value.
  */
  public void setH01WK3(String newvalue)
  {
    fieldH01WK3.setString(newvalue);
  }

  /**
  * Get value of field H01WK3 as a String.
  */
  public String getH01WK3()
  {
    return fieldH01WK3.getString();
  }

  /**
  * Set field ESW1ACR using a String value.
  */
  public void setESW1ACR(String newvalue)
  {
    fieldESW1ACR.setString(newvalue);
  }

  /**
  * Get value of field ESW1ACR as a String.
  */
  public String getESW1ACR()
  {
    return fieldESW1ACR.getString();
  }

  /**
  * Set numeric field ESW1ACR using a BigDecimal value.
  */
  public void setESW1ACR(BigDecimal newvalue)
  {
    fieldESW1ACR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ESW1ACR as a BigDecimal.
  */
  public BigDecimal getBigDecimalESW1ACR()
  {
    return fieldESW1ACR.getBigDecimal();
  }

  /**
  * Set field ESW1FOR using a String value.
  */
  public void setESW1FOR(String newvalue)
  {
    fieldESW1FOR.setString(newvalue);
  }

  /**
  * Get value of field ESW1FOR as a String.
  */
  public String getESW1FOR()
  {
    return fieldESW1FOR.getString();
  }

  /**
  * Set numeric field ESW1FOR using a BigDecimal value.
  */
  public void setESW1FOR(BigDecimal newvalue)
  {
    fieldESW1FOR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ESW1FOR as a BigDecimal.
  */
  public BigDecimal getBigDecimalESW1FOR()
  {
    return fieldESW1FOR.getBigDecimal();
  }

  /**
  * Set field ESW1USR using a String value.
  */
  public void setESW1USR(String newvalue)
  {
    fieldESW1USR.setString(newvalue);
  }

  /**
  * Get value of field ESW1USR as a String.
  */
  public String getESW1USR()
  {
    return fieldESW1USR.getString();
  }

  /**
  * Set field ESW1REF using a String value.
  */
  public void setESW1REF(String newvalue)
  {
    fieldESW1REF.setString(newvalue);
  }

  /**
  * Get value of field ESW1REF as a String.
  */
  public String getESW1REF()
  {
    return fieldESW1REF.getString();
  }

  /**
  * Set field ESW1RLR using a String value.
  */
  public void setESW1RLR(String newvalue)
  {
    fieldESW1RLR.setString(newvalue);
  }

  /**
  * Get value of field ESW1RLR as a String.
  */
  public String getESW1RLR()
  {
    return fieldESW1RLR.getString();
  }

  /**
  * Set field ESW1SWI using a String value.
  */
  public void setESW1SWI(String newvalue)
  {
    fieldESW1SWI.setString(newvalue);
  }

  /**
  * Get value of field ESW1SWI as a String.
  */
  public String getESW1SWI()
  {
    return fieldESW1SWI.getString();
  }

  /**
  * Set field ESW1DTM using a String value.
  */
  public void setESW1DTM(String newvalue)
  {
    fieldESW1DTM.setString(newvalue);
  }

  /**
  * Get value of field ESW1DTM as a String.
  */
  public String getESW1DTM()
  {
    return fieldESW1DTM.getString();
  }

  /**
  * Set numeric field ESW1DTM using a BigDecimal value.
  */
  public void setESW1DTM(BigDecimal newvalue)
  {
    fieldESW1DTM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ESW1DTM as a BigDecimal.
  */
  public BigDecimal getBigDecimalESW1DTM()
  {
    return fieldESW1DTM.getBigDecimal();
  }

  /**
  * Set field ESW1DTD using a String value.
  */
  public void setESW1DTD(String newvalue)
  {
    fieldESW1DTD.setString(newvalue);
  }

  /**
  * Get value of field ESW1DTD as a String.
  */
  public String getESW1DTD()
  {
    return fieldESW1DTD.getString();
  }

  /**
  * Set numeric field ESW1DTD using a BigDecimal value.
  */
  public void setESW1DTD(BigDecimal newvalue)
  {
    fieldESW1DTD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ESW1DTD as a BigDecimal.
  */
  public BigDecimal getBigDecimalESW1DTD()
  {
    return fieldESW1DTD.getBigDecimal();
  }

  /**
  * Set field ESW1DTY using a String value.
  */
  public void setESW1DTY(String newvalue)
  {
    fieldESW1DTY.setString(newvalue);
  }

  /**
  * Get value of field ESW1DTY as a String.
  */
  public String getESW1DTY()
  {
    return fieldESW1DTY.getString();
  }

  /**
  * Set numeric field ESW1DTY using a BigDecimal value.
  */
  public void setESW1DTY(BigDecimal newvalue)
  {
    fieldESW1DTY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ESW1DTY as a BigDecimal.
  */
  public BigDecimal getBigDecimalESW1DTY()
  {
    return fieldESW1DTY.getBigDecimal();
  }

  /**
  * Set field ESW1LIN using a String value.
  */
  public void setESW1LIN(String newvalue)
  {
    fieldESW1LIN.setString(newvalue);
  }

  /**
  * Get value of field ESW1LIN as a String.
  */
  public String getESW1LIN()
  {
    return fieldESW1LIN.getString();
  }

  /**
  * Set numeric field ESW1LIN using a BigDecimal value.
  */
  public void setESW1LIN(BigDecimal newvalue)
  {
    fieldESW1LIN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field ESW1LIN as a BigDecimal.
  */
  public BigDecimal getBigDecimalESW1LIN()
  {
    return fieldESW1LIN.getBigDecimal();
  }

  /**
  * Set field ESW1STS using a String value.
  */
  public void setESW1STS(String newvalue)
  {
    fieldESW1STS.setString(newvalue);
  }

  /**
  * Get value of field ESW1STS as a String.
  */
  public String getESW1STS()
  {
    return fieldESW1STS.getString();
  }

}

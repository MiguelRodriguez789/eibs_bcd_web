package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EPV022002 physical file definition.
* 
* File level identifier is 1100706173644.
* Record format level identifier is 3C0202F57EC12.
*/

public class EPV022002Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H02USERID",
                                     "H02PROGRM",
                                     "H02TIMSYS",
                                     "H02SCRCOD",
                                     "H02OPECOD",
                                     "H02FLGMAS",
                                     "H02FLGWK1",
                                     "H02FLGWK2",
                                     "H02FLGWK3",
                                     "EPVMTO",
                                     "EPVTAS",
                                     "EPVNUC",
                                     "EPVDIC",
                                     "EPVPEB",
                                     "EPVMET",
                                     "EPVVAC",
                                     "EPVFAP"
                                   };
  final static String tnames[] = {
                                   "H02USERID",
                                   "H02PROGRM",
                                   "H02TIMSYS",
                                   "H02SCRCOD",
                                   "H02OPECOD",
                                   "H02FLGMAS",
                                   "H02FLGWK1",
                                   "H02FLGWK2",
                                   "H02FLGWK3",
                                   "EPVMTO",
                                   "EPVTAS",
                                   "EPVNUC",
                                   "EPVDIC",
                                   "EPVPEB",
                                   "EPVMET",
                                   "EPVVAC",
                                   "EPVFAP"
                                 };
  final static String fid = "1100706173644";
  final static String rid = "3C0202F57EC12";
  final static String fmtname = "EPV022002";
  final int FIELDCOUNT = 17;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH02USERID = null;
  private CharacterField fieldH02PROGRM = null;
  private CharacterField fieldH02TIMSYS = null;
  private CharacterField fieldH02SCRCOD = null;
  private CharacterField fieldH02OPECOD = null;
  private CharacterField fieldH02FLGMAS = null;
  private CharacterField fieldH02FLGWK1 = null;
  private CharacterField fieldH02FLGWK2 = null;
  private CharacterField fieldH02FLGWK3 = null;
  private DecimalField fieldEPVMTO = null;
  private DecimalField fieldEPVTAS = null;
  private DecimalField fieldEPVNUC = null;
  private DecimalField fieldEPVDIC = null;
  private DecimalField fieldEPVPEB = null;
  private CharacterField fieldEPVMET = null;
  private DecimalField fieldEPVVAC = null;
  private DecimalField fieldEPVFAP = null;

  /**
  * Constructor for EPV022002Message.
  */
  public EPV022002Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 118;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH02USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H02USERID");
    fields[1] = fieldH02PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H02PROGRM");
    fields[2] = fieldH02TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H02TIMSYS");
    fields[3] = fieldH02SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H02SCRCOD");
    fields[4] = fieldH02OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H02OPECOD");
    fields[5] = fieldH02FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H02FLGMAS");
    fields[6] = fieldH02FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H02FLGWK1");
    fields[7] = fieldH02FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H02FLGWK2");
    fields[8] = fieldH02FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H02FLGWK3");
    fields[9] = fieldEPVMTO =
    new DecimalField(message, HEADERSIZE + 42, 17, 2, "EPVMTO");
    fields[10] = fieldEPVTAS =
    new DecimalField(message, HEADERSIZE + 59, 11, 6, "EPVTAS");
    fields[11] = fieldEPVNUC =
    new DecimalField(message, HEADERSIZE + 70, 4, 0, "EPVNUC");
    fields[12] = fieldEPVDIC =
    new DecimalField(message, HEADERSIZE + 74, 9, 4, "EPVDIC");
    fields[13] = fieldEPVPEB =
    new DecimalField(message, HEADERSIZE + 83, 4, 0, "EPVPEB");
    fields[14] = fieldEPVMET =
    new CharacterField(message, HEADERSIZE + 87, 1, "EPVMET");
    fields[15] = fieldEPVVAC =
    new DecimalField(message, HEADERSIZE + 88, 17, 2, "EPVVAC");
    fields[16] = fieldEPVFAP =
    new DecimalField(message, HEADERSIZE + 105, 13, 9, "EPVFAP");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H02USERID using a String value.
  */
  public void setH02USERID(String newvalue)
  {
    fieldH02USERID.setString(newvalue);
  }

  /**
  * Get value of field H02USERID as a String.
  */
  public String getH02USERID()
  {
    return fieldH02USERID.getString();
  }

  /**
  * Set field H02PROGRM using a String value.
  */
  public void setH02PROGRM(String newvalue)
  {
    fieldH02PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H02PROGRM as a String.
  */
  public String getH02PROGRM()
  {
    return fieldH02PROGRM.getString();
  }

  /**
  * Set field H02TIMSYS using a String value.
  */
  public void setH02TIMSYS(String newvalue)
  {
    fieldH02TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H02TIMSYS as a String.
  */
  public String getH02TIMSYS()
  {
    return fieldH02TIMSYS.getString();
  }

  /**
  * Set field H02SCRCOD using a String value.
  */
  public void setH02SCRCOD(String newvalue)
  {
    fieldH02SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H02SCRCOD as a String.
  */
  public String getH02SCRCOD()
  {
    return fieldH02SCRCOD.getString();
  }

  /**
  * Set field H02OPECOD using a String value.
  */
  public void setH02OPECOD(String newvalue)
  {
    fieldH02OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H02OPECOD as a String.
  */
  public String getH02OPECOD()
  {
    return fieldH02OPECOD.getString();
  }

  /**
  * Set field H02FLGMAS using a String value.
  */
  public void setH02FLGMAS(String newvalue)
  {
    fieldH02FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H02FLGMAS as a String.
  */
  public String getH02FLGMAS()
  {
    return fieldH02FLGMAS.getString();
  }

  /**
  * Set field H02FLGWK1 using a String value.
  */
  public void setH02FLGWK1(String newvalue)
  {
    fieldH02FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK1 as a String.
  */
  public String getH02FLGWK1()
  {
    return fieldH02FLGWK1.getString();
  }

  /**
  * Set field H02FLGWK2 using a String value.
  */
  public void setH02FLGWK2(String newvalue)
  {
    fieldH02FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK2 as a String.
  */
  public String getH02FLGWK2()
  {
    return fieldH02FLGWK2.getString();
  }

  /**
  * Set field H02FLGWK3 using a String value.
  */
  public void setH02FLGWK3(String newvalue)
  {
    fieldH02FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK3 as a String.
  */
  public String getH02FLGWK3()
  {
    return fieldH02FLGWK3.getString();
  }

  /**
  * Set field EPVMTO using a String value.
  */
  public void setEPVMTO(String newvalue)
  {
    fieldEPVMTO.setString(newvalue);
  }

  /**
  * Get value of field EPVMTO as a String.
  */
  public String getEPVMTO()
  {
    return fieldEPVMTO.getString();
  }

  /**
  * Set numeric field EPVMTO using a BigDecimal value.
  */
  public void setEPVMTO(BigDecimal newvalue)
  {
    fieldEPVMTO.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EPVMTO as a BigDecimal.
  */
  public BigDecimal getBigDecimalEPVMTO()
  {
    return fieldEPVMTO.getBigDecimal();
  }

  /**
  * Set field EPVTAS using a String value.
  */
  public void setEPVTAS(String newvalue)
  {
    fieldEPVTAS.setString(newvalue);
  }

  /**
  * Get value of field EPVTAS as a String.
  */
  public String getEPVTAS()
  {
    return fieldEPVTAS.getString();
  }

  /**
  * Set numeric field EPVTAS using a BigDecimal value.
  */
  public void setEPVTAS(BigDecimal newvalue)
  {
    fieldEPVTAS.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EPVTAS as a BigDecimal.
  */
  public BigDecimal getBigDecimalEPVTAS()
  {
    return fieldEPVTAS.getBigDecimal();
  }

  /**
  * Set field EPVNUC using a String value.
  */
  public void setEPVNUC(String newvalue)
  {
    fieldEPVNUC.setString(newvalue);
  }

  /**
  * Get value of field EPVNUC as a String.
  */
  public String getEPVNUC()
  {
    return fieldEPVNUC.getString();
  }

  /**
  * Set numeric field EPVNUC using a BigDecimal value.
  */
  public void setEPVNUC(BigDecimal newvalue)
  {
    fieldEPVNUC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EPVNUC as a BigDecimal.
  */
  public BigDecimal getBigDecimalEPVNUC()
  {
    return fieldEPVNUC.getBigDecimal();
  }

  /**
  * Set field EPVDIC using a String value.
  */
  public void setEPVDIC(String newvalue)
  {
    fieldEPVDIC.setString(newvalue);
  }

  /**
  * Get value of field EPVDIC as a String.
  */
  public String getEPVDIC()
  {
    return fieldEPVDIC.getString();
  }

  /**
  * Set numeric field EPVDIC using a BigDecimal value.
  */
  public void setEPVDIC(BigDecimal newvalue)
  {
    fieldEPVDIC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EPVDIC as a BigDecimal.
  */
  public BigDecimal getBigDecimalEPVDIC()
  {
    return fieldEPVDIC.getBigDecimal();
  }

  /**
  * Set field EPVPEB using a String value.
  */
  public void setEPVPEB(String newvalue)
  {
    fieldEPVPEB.setString(newvalue);
  }

  /**
  * Get value of field EPVPEB as a String.
  */
  public String getEPVPEB()
  {
    return fieldEPVPEB.getString();
  }

  /**
  * Set numeric field EPVPEB using a BigDecimal value.
  */
  public void setEPVPEB(BigDecimal newvalue)
  {
    fieldEPVPEB.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EPVPEB as a BigDecimal.
  */
  public BigDecimal getBigDecimalEPVPEB()
  {
    return fieldEPVPEB.getBigDecimal();
  }

  /**
  * Set field EPVMET using a String value.
  */
  public void setEPVMET(String newvalue)
  {
    fieldEPVMET.setString(newvalue);
  }

  /**
  * Get value of field EPVMET as a String.
  */
  public String getEPVMET()
  {
    return fieldEPVMET.getString();
  }

  /**
  * Set field EPVVAC using a String value.
  */
  public void setEPVVAC(String newvalue)
  {
    fieldEPVVAC.setString(newvalue);
  }

  /**
  * Get value of field EPVVAC as a String.
  */
  public String getEPVVAC()
  {
    return fieldEPVVAC.getString();
  }

  /**
  * Set numeric field EPVVAC using a BigDecimal value.
  */
  public void setEPVVAC(BigDecimal newvalue)
  {
    fieldEPVVAC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EPVVAC as a BigDecimal.
  */
  public BigDecimal getBigDecimalEPVVAC()
  {
    return fieldEPVVAC.getBigDecimal();
  }

  /**
  * Set field EPVFAP using a String value.
  */
  public void setEPVFAP(String newvalue)
  {
    fieldEPVFAP.setString(newvalue);
  }

  /**
  * Get value of field EPVFAP as a String.
  */
  public String getEPVFAP()
  {
    return fieldEPVFAP.getString();
  }

  /**
  * Set numeric field EPVFAP using a BigDecimal value.
  */
  public void setEPVFAP(BigDecimal newvalue)
  {
    fieldEPVFAP.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EPVFAP as a BigDecimal.
  */
  public BigDecimal getBigDecimalEPVFAP()
  {
    return fieldEPVFAP.getBigDecimal();
  }

}

package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EDD152001 physical file definition.
* 
* File level identifier is 1130611131458.
* Record format level identifier is 33437C01A88C8.
*/

public class EDD152001Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USER",
                                     "RUTDIFUNTO",
                                     "FECHADEFUN",
                                     "H01FLGMAS"
                                   };
  final static String tnames[] = {
                                   "H01USER",
                                   "RUTDIFUNTO",
                                   "FECHADEFUN",
                                   "H01FLGMAS"
                                 };
  final static String fid = "1130611131458";
  final static String rid = "33437C01A88C8";
  final static String fmtname = "EDD152001";
  final int FIELDCOUNT = 4;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USER = null;
  private CharacterField fieldRUTDIFUNTO = null;
  private DecimalField fieldFECHADEFUN = null;
  private CharacterField fieldH01FLGMAS = null;

  /**
  * Constructor for EDD152001Message.
  */
  public EDD152001Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 30;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USER =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USER");
    fields[1] = fieldRUTDIFUNTO =
    new CharacterField(message, HEADERSIZE + 10, 10, "RUTDIFUNTO");
    fields[2] = fieldFECHADEFUN =
    new DecimalField(message, HEADERSIZE + 20, 9, 0, "FECHADEFUN");
    fields[3] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 29, 1, "H01FLGMAS");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USER using a String value.
  */
  public void setH01USER(String newvalue)
  {
    fieldH01USER.setString(newvalue);
  }

  /**
  * Get value of field H01USER as a String.
  */
  public String getH01USER()
  {
    return fieldH01USER.getString();
  }

  /**
  * Set field RUTDIFUNTO using a String value.
  */
  public void setRUTDIFUNTO(String newvalue)
  {
    fieldRUTDIFUNTO.setString(newvalue);
  }

  /**
  * Get value of field RUTDIFUNTO as a String.
  */
  public String getRUTDIFUNTO()
  {
    return fieldRUTDIFUNTO.getString();
  }

  /**
  * Set field FECHADEFUN using a String value.
  */
  public void setFECHADEFUN(String newvalue)
  {
    fieldFECHADEFUN.setString(newvalue);
  }

  /**
  * Get value of field FECHADEFUN as a String.
  */
  public String getFECHADEFUN()
  {
    return fieldFECHADEFUN.getString();
  }

  /**
  * Set numeric field FECHADEFUN using a BigDecimal value.
  */
  public void setFECHADEFUN(BigDecimal newvalue)
  {
    fieldFECHADEFUN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field FECHADEFUN as a BigDecimal.
  */
  public BigDecimal getBigDecimalFECHADEFUN()
  {
    return fieldFECHADEFUN.getBigDecimal();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

}

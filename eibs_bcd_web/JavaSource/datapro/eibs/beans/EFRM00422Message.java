package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EFRM00422 physical file definition.
* 
* File level identifier is 1170202115324.
* Record format level identifier is 423DC93850693.
*/

public class EFRM00422Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "DCIACC",
                                     "DCISEQ",
                                     "DCIDES",
                                     "DCIFRE",
                                     "DCIFRED",
                                     "DCISTA",
                                     "DCISTAD",
                                     "DCIEDD",
                                     "DCIEMM",
                                     "DCIEYY",
                                     "DTDCIE",
                                     "DCIRDD",
                                     "DCIRMM",
                                     "DCIRYY",
                                     "DTDCIR",
                                     "DCICOM",
                                     "H22FLGMAS"
                                   };
  final static String tnames[] = {
                                   "numCuenta",
                                   "secuenciaDoc",
                                   "descDocumento",
                                   "codFrecuencia",
                                   "descCodFrecuencia",
                                   "codEstadoDoc",
                                   "descCodEstadoDoc",
                                   "diaExpiracionDoc",
                                   "mesExpiracionDoc",
                                   "anoExpiracionDoc",
                                   "fechaExpiracionDoc",
                                   "diaExpedicionDoc",
                                   "mesExpedicionDoc",
                                   "anoExpedicionDoc",
                                   "fechaExpedicionDoc",
                                   "comentariosDoc",
                                   "*flgMas"
                                 };
  final static String fid = "1170202115324";
  final static String rid = "423DC93850693";
  final static String fmtname = "EFRM00422";
  final int FIELDCOUNT = 17;
  private static Hashtable tlookup = new Hashtable();
  private DecimalField fieldDCIACC = null;
  private DecimalField fieldDCISEQ = null;
  private CharacterField fieldDCIDES = null;
  private CharacterField fieldDCIFRE = null;
  private CharacterField fieldDCIFRED = null;
  private CharacterField fieldDCISTA = null;
  private CharacterField fieldDCISTAD = null;
  private DecimalField fieldDCIEDD = null;
  private DecimalField fieldDCIEMM = null;
  private DecimalField fieldDCIEYY = null;
  private CharacterField fieldDTDCIE = null;
  private DecimalField fieldDCIRDD = null;
  private DecimalField fieldDCIRMM = null;
  private DecimalField fieldDCIRYY = null;
  private CharacterField fieldDTDCIR = null;
  private CharacterField fieldDCICOM = null;
  private CharacterField fieldH22FLGMAS = null;

  /**
  * Constructor for EFRM00422Message.
  */
  public EFRM00422Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 469;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldDCIACC =
    new DecimalField(message, HEADERSIZE + 0, 13, 0, "numCuenta");
    fields[1] = fieldDCISEQ =
    new DecimalField(message, HEADERSIZE + 13, 4, 0, "secuenciaDoc");
    fields[2] = fieldDCIDES =
    new CharacterField(message, HEADERSIZE + 17, 60, "descDocumento");
    fields[3] = fieldDCIFRE =
    new CharacterField(message, HEADERSIZE + 77, 1, "codFrecuencia");
    fields[4] = fieldDCIFRED =
    new CharacterField(message, HEADERSIZE + 78, 35, "descCodFrecuencia");
    fields[5] = fieldDCISTA =
    new CharacterField(message, HEADERSIZE + 113, 2, "codEstadoDoc");
    fields[6] = fieldDCISTAD =
    new CharacterField(message, HEADERSIZE + 115, 25, "descCodEstadoDoc");
    fields[7] = fieldDCIEDD =
    new DecimalField(message, HEADERSIZE + 140, 3, 0, "diaExpiracionDoc");
    fields[8] = fieldDCIEMM =
    new DecimalField(message, HEADERSIZE + 143, 3, 0, "mesExpiracionDoc");
    fields[9] = fieldDCIEYY =
    new DecimalField(message, HEADERSIZE + 146, 5, 0, "anoExpiracionDoc");
    fields[10] = fieldDTDCIE =
    new CharacterField(message, HEADERSIZE + 151, 25, "fechaExpiracionDoc");
    fields[11] = fieldDCIRDD =
    new DecimalField(message, HEADERSIZE + 176, 3, 0, "diaExpedicionDoc");
    fields[12] = fieldDCIRMM =
    new DecimalField(message, HEADERSIZE + 179, 3, 0, "mesExpedicionDoc");
    fields[13] = fieldDCIRYY =
    new DecimalField(message, HEADERSIZE + 182, 5, 0, "anoExpedicionDoc");
    fields[14] = fieldDTDCIR =
    new CharacterField(message, HEADERSIZE + 187, 25, "fechaExpedicionDoc");
    fields[15] = fieldDCICOM =
    new CharacterField(message, HEADERSIZE + 212, 256, "comentariosDoc");
    fields[16] = fieldH22FLGMAS =
    new CharacterField(message, HEADERSIZE + 468, 1, "*flgMas");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field DCIACC using a String value.
  */
  public void setDCIACC(String newvalue)
  {
    fieldDCIACC.setString(newvalue);
  }

  /**
  * Get value of field DCIACC as a String.
  */
  public String getDCIACC()
  {
    return fieldDCIACC.getString();
  }

  /**
  * Set numeric field DCIACC using a BigDecimal value.
  */
  public void setDCIACC(BigDecimal newvalue)
  {
    fieldDCIACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DCIACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalDCIACC()
  {
    return fieldDCIACC.getBigDecimal();
  }

  /**
  * Set field DCISEQ using a String value.
  */
  public void setDCISEQ(String newvalue)
  {
    fieldDCISEQ.setString(newvalue);
  }

  /**
  * Get value of field DCISEQ as a String.
  */
  public String getDCISEQ()
  {
    return fieldDCISEQ.getString();
  }

  /**
  * Set numeric field DCISEQ using a BigDecimal value.
  */
  public void setDCISEQ(BigDecimal newvalue)
  {
    fieldDCISEQ.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DCISEQ as a BigDecimal.
  */
  public BigDecimal getBigDecimalDCISEQ()
  {
    return fieldDCISEQ.getBigDecimal();
  }

  /**
  * Set field DCIDES using a String value.
  */
  public void setDCIDES(String newvalue)
  {
    fieldDCIDES.setString(newvalue);
  }

  /**
  * Get value of field DCIDES as a String.
  */
  public String getDCIDES()
  {
    return fieldDCIDES.getString();
  }

  /**
  * Set field DCIFRE using a String value.
  */
  public void setDCIFRE(String newvalue)
  {
    fieldDCIFRE.setString(newvalue);
  }

  /**
  * Get value of field DCIFRE as a String.
  */
  public String getDCIFRE()
  {
    return fieldDCIFRE.getString();
  }

  /**
  * Set field DCIFRED using a String value.
  */
  public void setDCIFRED(String newvalue)
  {
    fieldDCIFRED.setString(newvalue);
  }

  /**
  * Get value of field DCIFRED as a String.
  */
  public String getDCIFRED()
  {
    return fieldDCIFRED.getString();
  }

  /**
  * Set field DCISTA using a String value.
  */
  public void setDCISTA(String newvalue)
  {
    fieldDCISTA.setString(newvalue);
  }

  /**
  * Get value of field DCISTA as a String.
  */
  public String getDCISTA()
  {
    return fieldDCISTA.getString();
  }

  /**
  * Set field DCISTAD using a String value.
  */
  public void setDCISTAD(String newvalue)
  {
    fieldDCISTAD.setString(newvalue);
  }

  /**
  * Get value of field DCISTAD as a String.
  */
  public String getDCISTAD()
  {
    return fieldDCISTAD.getString();
  }

  /**
  * Set field DCIEDD using a String value.
  */
  public void setDCIEDD(String newvalue)
  {
    fieldDCIEDD.setString(newvalue);
  }

  /**
  * Get value of field DCIEDD as a String.
  */
  public String getDCIEDD()
  {
    return fieldDCIEDD.getString();
  }

  /**
  * Set numeric field DCIEDD using a BigDecimal value.
  */
  public void setDCIEDD(BigDecimal newvalue)
  {
    fieldDCIEDD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DCIEDD as a BigDecimal.
  */
  public BigDecimal getBigDecimalDCIEDD()
  {
    return fieldDCIEDD.getBigDecimal();
  }

  /**
  * Set field DCIEMM using a String value.
  */
  public void setDCIEMM(String newvalue)
  {
    fieldDCIEMM.setString(newvalue);
  }

  /**
  * Get value of field DCIEMM as a String.
  */
  public String getDCIEMM()
  {
    return fieldDCIEMM.getString();
  }

  /**
  * Set numeric field DCIEMM using a BigDecimal value.
  */
  public void setDCIEMM(BigDecimal newvalue)
  {
    fieldDCIEMM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DCIEMM as a BigDecimal.
  */
  public BigDecimal getBigDecimalDCIEMM()
  {
    return fieldDCIEMM.getBigDecimal();
  }

  /**
  * Set field DCIEYY using a String value.
  */
  public void setDCIEYY(String newvalue)
  {
    fieldDCIEYY.setString(newvalue);
  }

  /**
  * Get value of field DCIEYY as a String.
  */
  public String getDCIEYY()
  {
    return fieldDCIEYY.getString();
  }

  /**
  * Set numeric field DCIEYY using a BigDecimal value.
  */
  public void setDCIEYY(BigDecimal newvalue)
  {
    fieldDCIEYY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DCIEYY as a BigDecimal.
  */
  public BigDecimal getBigDecimalDCIEYY()
  {
    return fieldDCIEYY.getBigDecimal();
  }

  /**
  * Set field DTDCIE using a String value.
  */
  public void setDTDCIE(String newvalue)
  {
    fieldDTDCIE.setString(newvalue);
  }

  /**
  * Get value of field DTDCIE as a String.
  */
  public String getDTDCIE()
  {
    return fieldDTDCIE.getString();
  }

  /**
  * Set field DCIRDD using a String value.
  */
  public void setDCIRDD(String newvalue)
  {
    fieldDCIRDD.setString(newvalue);
  }

  /**
  * Get value of field DCIRDD as a String.
  */
  public String getDCIRDD()
  {
    return fieldDCIRDD.getString();
  }

  /**
  * Set numeric field DCIRDD using a BigDecimal value.
  */
  public void setDCIRDD(BigDecimal newvalue)
  {
    fieldDCIRDD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DCIRDD as a BigDecimal.
  */
  public BigDecimal getBigDecimalDCIRDD()
  {
    return fieldDCIRDD.getBigDecimal();
  }

  /**
  * Set field DCIRMM using a String value.
  */
  public void setDCIRMM(String newvalue)
  {
    fieldDCIRMM.setString(newvalue);
  }

  /**
  * Get value of field DCIRMM as a String.
  */
  public String getDCIRMM()
  {
    return fieldDCIRMM.getString();
  }

  /**
  * Set numeric field DCIRMM using a BigDecimal value.
  */
  public void setDCIRMM(BigDecimal newvalue)
  {
    fieldDCIRMM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DCIRMM as a BigDecimal.
  */
  public BigDecimal getBigDecimalDCIRMM()
  {
    return fieldDCIRMM.getBigDecimal();
  }

  /**
  * Set field DCIRYY using a String value.
  */
  public void setDCIRYY(String newvalue)
  {
    fieldDCIRYY.setString(newvalue);
  }

  /**
  * Get value of field DCIRYY as a String.
  */
  public String getDCIRYY()
  {
    return fieldDCIRYY.getString();
  }

  /**
  * Set numeric field DCIRYY using a BigDecimal value.
  */
  public void setDCIRYY(BigDecimal newvalue)
  {
    fieldDCIRYY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DCIRYY as a BigDecimal.
  */
  public BigDecimal getBigDecimalDCIRYY()
  {
    return fieldDCIRYY.getBigDecimal();
  }

  /**
  * Set field DTDCIR using a String value.
  */
  public void setDTDCIR(String newvalue)
  {
    fieldDTDCIR.setString(newvalue);
  }

  /**
  * Get value of field DTDCIR as a String.
  */
  public String getDTDCIR()
  {
    return fieldDTDCIR.getString();
  }

  /**
  * Set field DCICOM using a String value.
  */
  public void setDCICOM(String newvalue)
  {
    fieldDCICOM.setString(newvalue);
  }

  /**
  * Get value of field DCICOM as a String.
  */
  public String getDCICOM()
  {
    return fieldDCICOM.getString();
  }

  /**
  * Set field H22FLGMAS using a String value.
  */
  public void setH22FLGMAS(String newvalue)
  {
    fieldH22FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H22FLGMAS as a String.
  */
  public String getH22FLGMAS()
  {
    return fieldH22FLGMAS.getString();
  }

}

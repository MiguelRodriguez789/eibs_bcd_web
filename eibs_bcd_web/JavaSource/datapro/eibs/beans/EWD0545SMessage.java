package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0545S physical file definition.
* 
* File level identifier is 1170113171625.
* Record format level identifier is 4B42B5A0752CC.
*/

public class EWD0545SMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "SWDCUN",
                                     "SWDNA1",
                                     "SWDSHN",
                                     "SWDACC",
                                     "SWDSWI",
                                     "SWDBRN",
                                     "SWDNAM",
                                     "SWDCTY",
                                     "SWDCNT",
                                     "SWDREC",
                                     "SWDOPE"
                                   };
  final static String tnames[] = {
                                   "SWDCUN",
                                   "SWDNA1",
                                   "SWDSHN",
                                   "SWDACC",
                                   "SWDSWI",
                                   "SWDBRN",
                                   "SWDNAM",
                                   "SWDCTY",
                                   "SWDCNT",
                                   "SWDREC",
                                   "SWDOPE"
                                 };
  final static String fid = "1170113171625";
  final static String rid = "4B42B5A0752CC";
  final static String fmtname = "EWD0545S";
  final int FIELDCOUNT = 11;
  private static Hashtable tlookup = new Hashtable();
  private DecimalField fieldSWDCUN = null;
  private CharacterField fieldSWDNA1 = null;
  private CharacterField fieldSWDSHN = null;
  private DecimalField fieldSWDACC = null;
  private CharacterField fieldSWDSWI = null;
  private CharacterField fieldSWDBRN = null;
  private CharacterField fieldSWDNAM = null;
  private CharacterField fieldSWDCTY = null;
  private CharacterField fieldSWDCNT = null;
  private DecimalField fieldSWDREC = null;
  private CharacterField fieldSWDOPE = null;

  /**
  * Constructor for EWD0545SMessage.
  */
  public EWD0545SMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 268;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldSWDCUN =
    new DecimalField(message, HEADERSIZE + 0, 10, 0, "SWDCUN");
    fields[1] = fieldSWDNA1 =
    new CharacterField(message, HEADERSIZE + 10, 60, "SWDNA1");
    fields[2] = fieldSWDSHN =
    new CharacterField(message, HEADERSIZE + 70, 25, "SWDSHN");
    fields[3] = fieldSWDACC =
    new DecimalField(message, HEADERSIZE + 95, 13, 0, "SWDACC");
    fields[4] = fieldSWDSWI =
    new CharacterField(message, HEADERSIZE + 108, 12, "SWDSWI");
    fields[5] = fieldSWDBRN =
    new CharacterField(message, HEADERSIZE + 120, 4, "SWDBRN");
    fields[6] = fieldSWDNAM =
    new CharacterField(message, HEADERSIZE + 124, 45, "SWDNAM");
    fields[7] = fieldSWDCTY =
    new CharacterField(message, HEADERSIZE + 169, 45, "SWDCTY");
    fields[8] = fieldSWDCNT =
    new CharacterField(message, HEADERSIZE + 214, 45, "SWDCNT");
    fields[9] = fieldSWDREC =
    new DecimalField(message, HEADERSIZE + 259, 8, 0, "SWDREC");
    fields[10] = fieldSWDOPE =
    new CharacterField(message, HEADERSIZE + 267, 1, "SWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field SWDCUN using a String value.
  */
  public void setSWDCUN(String newvalue)
  {
    fieldSWDCUN.setString(newvalue);
  }

  /**
  * Get value of field SWDCUN as a String.
  */
  public String getSWDCUN()
  {
    return fieldSWDCUN.getString();
  }

  /**
  * Set numeric field SWDCUN using a BigDecimal value.
  */
  public void setSWDCUN(BigDecimal newvalue)
  {
    fieldSWDCUN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDCUN as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDCUN()
  {
    return fieldSWDCUN.getBigDecimal();
  }

  /**
  * Set field SWDNA1 using a String value.
  */
  public void setSWDNA1(String newvalue)
  {
    fieldSWDNA1.setString(newvalue);
  }

  /**
  * Get value of field SWDNA1 as a String.
  */
  public String getSWDNA1()
  {
    return fieldSWDNA1.getString();
  }

  /**
  * Set field SWDSHN using a String value.
  */
  public void setSWDSHN(String newvalue)
  {
    fieldSWDSHN.setString(newvalue);
  }

  /**
  * Get value of field SWDSHN as a String.
  */
  public String getSWDSHN()
  {
    return fieldSWDSHN.getString();
  }

  /**
  * Set field SWDACC using a String value.
  */
  public void setSWDACC(String newvalue)
  {
    fieldSWDACC.setString(newvalue);
  }

  /**
  * Get value of field SWDACC as a String.
  */
  public String getSWDACC()
  {
    return fieldSWDACC.getString();
  }

  /**
  * Set numeric field SWDACC using a BigDecimal value.
  */
  public void setSWDACC(BigDecimal newvalue)
  {
    fieldSWDACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDACC()
  {
    return fieldSWDACC.getBigDecimal();
  }

  /**
  * Set field SWDSWI using a String value.
  */
  public void setSWDSWI(String newvalue)
  {
    fieldSWDSWI.setString(newvalue);
  }

  /**
  * Get value of field SWDSWI as a String.
  */
  public String getSWDSWI()
  {
    return fieldSWDSWI.getString();
  }

  /**
  * Set field SWDBRN using a String value.
  */
  public void setSWDBRN(String newvalue)
  {
    fieldSWDBRN.setString(newvalue);
  }

  /**
  * Get value of field SWDBRN as a String.
  */
  public String getSWDBRN()
  {
    return fieldSWDBRN.getString();
  }

  /**
  * Set field SWDNAM using a String value.
  */
  public void setSWDNAM(String newvalue)
  {
    fieldSWDNAM.setString(newvalue);
  }

  /**
  * Get value of field SWDNAM as a String.
  */
  public String getSWDNAM()
  {
    return fieldSWDNAM.getString();
  }

  /**
  * Set field SWDCTY using a String value.
  */
  public void setSWDCTY(String newvalue)
  {
    fieldSWDCTY.setString(newvalue);
  }

  /**
  * Get value of field SWDCTY as a String.
  */
  public String getSWDCTY()
  {
    return fieldSWDCTY.getString();
  }

  /**
  * Set field SWDCNT using a String value.
  */
  public void setSWDCNT(String newvalue)
  {
    fieldSWDCNT.setString(newvalue);
  }

  /**
  * Get value of field SWDCNT as a String.
  */
  public String getSWDCNT()
  {
    return fieldSWDCNT.getString();
  }

  /**
  * Set field SWDREC using a String value.
  */
  public void setSWDREC(String newvalue)
  {
    fieldSWDREC.setString(newvalue);
  }

  /**
  * Get value of field SWDREC as a String.
  */
  public String getSWDREC()
  {
    return fieldSWDREC.getString();
  }

  /**
  * Set numeric field SWDREC using a BigDecimal value.
  */
  public void setSWDREC(BigDecimal newvalue)
  {
    fieldSWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSWDREC()
  {
    return fieldSWDREC.getBigDecimal();
  }

  /**
  * Set field SWDOPE using a String value.
  */
  public void setSWDOPE(String newvalue)
  {
    fieldSWDOPE.setString(newvalue);
  }

  /**
  * Get value of field SWDOPE as a String.
  */
  public String getSWDOPE()
  {
    return fieldSWDOPE.getString();
  }

}

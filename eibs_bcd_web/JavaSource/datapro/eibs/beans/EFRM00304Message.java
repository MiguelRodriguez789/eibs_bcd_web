package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EFRM00304 physical file definition.
* 
* File level identifier is 1170202115315.
* Record format level identifier is 357B0E3E4F490.
*/

public class EFRM00304Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H04FLGMAS",
                                     "H04FLGWK1",
                                     "H04FLGWK2",
                                     "H04FLGWK3",
                                     "DPZTNR",
                                     "DPZTRE",
                                     "DPZTRED",
                                     "DPZFAD",
                                     "DPZFAM",
                                     "DPZFAY",
                                     "DTEVENCE",
                                     "DPZMUN",
                                     "DPZMUND",
                                     "DPZPRF",
                                     "DPZPLA"
                                   };
  final static String tnames[] = {
                                   "MORE",
                                   "LENGUAJE",
                                   "FLAG",
                                   "FLAG",
                                   "DPZTNR",
                                   "DPZTRE",
                                   "DPZTRED",
                                   "DPZFAD",
                                   "DPZFAM",
                                   "DPZFAY",
                                   "DTEVENCE",
                                   "DPZMUN",
                                   "DPZMUND",
                                   "DPZPRF",
                                   "DPZPLA"
                                 };
  final static String fid = "1170202115315";
  final static String rid = "357B0E3E4F490";
  final static String fmtname = "EFRM00304";
  final int FIELDCOUNT = 15;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH04FLGMAS = null;
  private CharacterField fieldH04FLGWK1 = null;
  private CharacterField fieldH04FLGWK2 = null;
  private CharacterField fieldH04FLGWK3 = null;
  private CharacterField fieldDPZTNR = null;
  private CharacterField fieldDPZTRE = null;
  private CharacterField fieldDPZTRED = null;
  private DecimalField fieldDPZFAD = null;
  private DecimalField fieldDPZFAM = null;
  private DecimalField fieldDPZFAY = null;
  private CharacterField fieldDTEVENCE = null;
  private CharacterField fieldDPZMUN = null;
  private CharacterField fieldDPZMUND = null;
  private CharacterField fieldDPZPRF = null;
  private CharacterField fieldDPZPLA = null;

  /**
  * Constructor for EFRM00304Message.
  */
  public EFRM00304Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 140;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH04FLGMAS =
    new CharacterField(message, HEADERSIZE + 0, 1, "MORE");
    fields[1] = fieldH04FLGWK1 =
    new CharacterField(message, HEADERSIZE + 1, 1, "LENGUAJE");
    fields[2] = fieldH04FLGWK2 =
    new CharacterField(message, HEADERSIZE + 2, 1, "FLAG");
    fields[3] = fieldH04FLGWK3 =
    new CharacterField(message, HEADERSIZE + 3, 1, "FLAG");
    fields[4] = fieldDPZTNR =
    new CharacterField(message, HEADERSIZE + 4, 15, "DPZTNR");
    fields[5] = fieldDPZTRE =
    new CharacterField(message, HEADERSIZE + 19, 4, "DPZTRE");
    fields[6] = fieldDPZTRED =
    new CharacterField(message, HEADERSIZE + 23, 45, "DPZTRED");
    fields[7] = fieldDPZFAD =
    new DecimalField(message, HEADERSIZE + 68, 3, 0, "DPZFAD");
    fields[8] = fieldDPZFAM =
    new DecimalField(message, HEADERSIZE + 71, 3, 0, "DPZFAM");
    fields[9] = fieldDPZFAY =
    new DecimalField(message, HEADERSIZE + 74, 5, 0, "DPZFAY");
    fields[10] = fieldDTEVENCE =
    new CharacterField(message, HEADERSIZE + 79, 10, "DTEVENCE");
    fields[11] = fieldDPZMUN =
    new CharacterField(message, HEADERSIZE + 89, 4, "DPZMUN");
    fields[12] = fieldDPZMUND =
    new CharacterField(message, HEADERSIZE + 93, 45, "DPZMUND");
    fields[13] = fieldDPZPRF =
    new CharacterField(message, HEADERSIZE + 138, 1, "DPZPRF");
    fields[14] = fieldDPZPLA =
    new CharacterField(message, HEADERSIZE + 139, 1, "DPZPLA");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H04FLGMAS using a String value.
  */
  public void setH04FLGMAS(String newvalue)
  {
    fieldH04FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H04FLGMAS as a String.
  */
  public String getH04FLGMAS()
  {
    return fieldH04FLGMAS.getString();
  }

  /**
  * Set field H04FLGWK1 using a String value.
  */
  public void setH04FLGWK1(String newvalue)
  {
    fieldH04FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H04FLGWK1 as a String.
  */
  public String getH04FLGWK1()
  {
    return fieldH04FLGWK1.getString();
  }

  /**
  * Set field H04FLGWK2 using a String value.
  */
  public void setH04FLGWK2(String newvalue)
  {
    fieldH04FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H04FLGWK2 as a String.
  */
  public String getH04FLGWK2()
  {
    return fieldH04FLGWK2.getString();
  }

  /**
  * Set field H04FLGWK3 using a String value.
  */
  public void setH04FLGWK3(String newvalue)
  {
    fieldH04FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H04FLGWK3 as a String.
  */
  public String getH04FLGWK3()
  {
    return fieldH04FLGWK3.getString();
  }

  /**
  * Set field DPZTNR using a String value.
  */
  public void setDPZTNR(String newvalue)
  {
    fieldDPZTNR.setString(newvalue);
  }

  /**
  * Get value of field DPZTNR as a String.
  */
  public String getDPZTNR()
  {
    return fieldDPZTNR.getString();
  }

  /**
  * Set field DPZTRE using a String value.
  */
  public void setDPZTRE(String newvalue)
  {
    fieldDPZTRE.setString(newvalue);
  }

  /**
  * Get value of field DPZTRE as a String.
  */
  public String getDPZTRE()
  {
    return fieldDPZTRE.getString();
  }

  /**
  * Set field DPZTRED using a String value.
  */
  public void setDPZTRED(String newvalue)
  {
    fieldDPZTRED.setString(newvalue);
  }

  /**
  * Get value of field DPZTRED as a String.
  */
  public String getDPZTRED()
  {
    return fieldDPZTRED.getString();
  }

  /**
  * Set field DPZFAD using a String value.
  */
  public void setDPZFAD(String newvalue)
  {
    fieldDPZFAD.setString(newvalue);
  }

  /**
  * Get value of field DPZFAD as a String.
  */
  public String getDPZFAD()
  {
    return fieldDPZFAD.getString();
  }

  /**
  * Set numeric field DPZFAD using a BigDecimal value.
  */
  public void setDPZFAD(BigDecimal newvalue)
  {
    fieldDPZFAD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DPZFAD as a BigDecimal.
  */
  public BigDecimal getBigDecimalDPZFAD()
  {
    return fieldDPZFAD.getBigDecimal();
  }

  /**
  * Set field DPZFAM using a String value.
  */
  public void setDPZFAM(String newvalue)
  {
    fieldDPZFAM.setString(newvalue);
  }

  /**
  * Get value of field DPZFAM as a String.
  */
  public String getDPZFAM()
  {
    return fieldDPZFAM.getString();
  }

  /**
  * Set numeric field DPZFAM using a BigDecimal value.
  */
  public void setDPZFAM(BigDecimal newvalue)
  {
    fieldDPZFAM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DPZFAM as a BigDecimal.
  */
  public BigDecimal getBigDecimalDPZFAM()
  {
    return fieldDPZFAM.getBigDecimal();
  }

  /**
  * Set field DPZFAY using a String value.
  */
  public void setDPZFAY(String newvalue)
  {
    fieldDPZFAY.setString(newvalue);
  }

  /**
  * Get value of field DPZFAY as a String.
  */
  public String getDPZFAY()
  {
    return fieldDPZFAY.getString();
  }

  /**
  * Set numeric field DPZFAY using a BigDecimal value.
  */
  public void setDPZFAY(BigDecimal newvalue)
  {
    fieldDPZFAY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DPZFAY as a BigDecimal.
  */
  public BigDecimal getBigDecimalDPZFAY()
  {
    return fieldDPZFAY.getBigDecimal();
  }

  /**
  * Set field DTEVENCE using a String value.
  */
  public void setDTEVENCE(String newvalue)
  {
    fieldDTEVENCE.setString(newvalue);
  }

  /**
  * Get value of field DTEVENCE as a String.
  */
  public String getDTEVENCE()
  {
    return fieldDTEVENCE.getString();
  }

  /**
  * Set field DPZMUN using a String value.
  */
  public void setDPZMUN(String newvalue)
  {
    fieldDPZMUN.setString(newvalue);
  }

  /**
  * Get value of field DPZMUN as a String.
  */
  public String getDPZMUN()
  {
    return fieldDPZMUN.getString();
  }

  /**
  * Set field DPZMUND using a String value.
  */
  public void setDPZMUND(String newvalue)
  {
    fieldDPZMUND.setString(newvalue);
  }

  /**
  * Get value of field DPZMUND as a String.
  */
  public String getDPZMUND()
  {
    return fieldDPZMUND.getString();
  }

  /**
  * Set field DPZPRF using a String value.
  */
  public void setDPZPRF(String newvalue)
  {
    fieldDPZPRF.setString(newvalue);
  }

  /**
  * Get value of field DPZPRF as a String.
  */
  public String getDPZPRF()
  {
    return fieldDPZPRF.getString();
  }

  /**
  * Set field DPZPLA using a String value.
  */
  public void setDPZPLA(String newvalue)
  {
    fieldDPZPLA.setString(newvalue);
  }

  /**
  * Get value of field DPZPLA as a String.
  */
  public String getDPZPLA()
  {
    return fieldDPZPLA.getString();
  }

}

package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EAV00015 physical file definition.
* 
* File level identifier is 1100706173514.
* Record format level identifier is 4A11E184305AF.
*/

public class EAV00015Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USERID",
                                     "H01PROGRM",
                                     "H01TIMSYS",
                                     "H01SCRCOD",
                                     "H01OPECOD",
                                     "H01FLGMAS",
                                     "H01FLGWK1",
                                     "H01FLGWK2",
                                     "H01FLGWK3",
                                     "AVMACC",
                                     "AVMSEM",
                                     "AVMSTD",
                                     "AVMSTM",
                                     "AVMSTY",
                                     "AVMSPR",
                                     "AVMSAL"
                                   };
  final static String tnames[] = {
                                   "H01USERID",
                                   "H01PROGRM",
                                   "H01TIMSYS",
                                   "H01SCRCOD",
                                   "H01OPECOD",
                                   "H01FLGMAS",
                                   "H01FLGWK1",
                                   "H01FLGWK2",
                                   "H01FLGWK3",
                                   "AVMACC",
                                   "AVMSEM",
                                   "AVMSTD",
                                   "AVMSTM",
                                   "AVMSTY",
                                   "AVMSPR",
                                   "AVMSAL"
                                 };
  final static String fid = "1100706173514";
  final static String rid = "4A11E184305AF";
  final static String fmtname = "EAV00015";
  final int FIELDCOUNT = 16;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USERID = null;
  private CharacterField fieldH01PROGRM = null;
  private CharacterField fieldH01TIMSYS = null;
  private CharacterField fieldH01SCRCOD = null;
  private CharacterField fieldH01OPECOD = null;
  private CharacterField fieldH01FLGMAS = null;
  private CharacterField fieldH01FLGWK1 = null;
  private CharacterField fieldH01FLGWK2 = null;
  private CharacterField fieldH01FLGWK3 = null;
  private DecimalField fieldAVMACC = null;
  private DecimalField fieldAVMSEM = null;
  private DecimalField fieldAVMSTD = null;
  private DecimalField fieldAVMSTM = null;
  private DecimalField fieldAVMSTY = null;
  private DecimalField fieldAVMSPR = null;
  private DecimalField fieldAVMSAL = null;

  /**
  * Constructor for EAV00015Message.
  */
  public EAV00015Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 89;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USERID");
    fields[1] = fieldH01PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PROGRM");
    fields[2] = fieldH01TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIMSYS");
    fields[3] = fieldH01SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCRCOD");
    fields[4] = fieldH01OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPECOD");
    fields[5] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01FLGMAS");
    fields[6] = fieldH01FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01FLGWK1");
    fields[7] = fieldH01FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01FLGWK2");
    fields[8] = fieldH01FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01FLGWK3");
    fields[9] = fieldAVMACC =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "AVMACC");
    fields[10] = fieldAVMSEM =
    new DecimalField(message, HEADERSIZE + 55, 3, 0, "AVMSEM");
    fields[11] = fieldAVMSTD =
    new DecimalField(message, HEADERSIZE + 58, 3, 0, "AVMSTD");
    fields[12] = fieldAVMSTM =
    new DecimalField(message, HEADERSIZE + 61, 3, 0, "AVMSTM");
    fields[13] = fieldAVMSTY =
    new DecimalField(message, HEADERSIZE + 64, 5, 0, "AVMSTY");
    fields[14] = fieldAVMSPR =
    new DecimalField(message, HEADERSIZE + 69, 10, 2, "AVMSPR");
    fields[15] = fieldAVMSAL =
    new DecimalField(message, HEADERSIZE + 79, 10, 2, "AVMSAL");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USERID using a String value.
  */
  public void setH01USERID(String newvalue)
  {
    fieldH01USERID.setString(newvalue);
  }

  /**
  * Get value of field H01USERID as a String.
  */
  public String getH01USERID()
  {
    return fieldH01USERID.getString();
  }

  /**
  * Set field H01PROGRM using a String value.
  */
  public void setH01PROGRM(String newvalue)
  {
    fieldH01PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H01PROGRM as a String.
  */
  public String getH01PROGRM()
  {
    return fieldH01PROGRM.getString();
  }

  /**
  * Set field H01TIMSYS using a String value.
  */
  public void setH01TIMSYS(String newvalue)
  {
    fieldH01TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H01TIMSYS as a String.
  */
  public String getH01TIMSYS()
  {
    return fieldH01TIMSYS.getString();
  }

  /**
  * Set field H01SCRCOD using a String value.
  */
  public void setH01SCRCOD(String newvalue)
  {
    fieldH01SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H01SCRCOD as a String.
  */
  public String getH01SCRCOD()
  {
    return fieldH01SCRCOD.getString();
  }

  /**
  * Set field H01OPECOD using a String value.
  */
  public void setH01OPECOD(String newvalue)
  {
    fieldH01OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H01OPECOD as a String.
  */
  public String getH01OPECOD()
  {
    return fieldH01OPECOD.getString();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

  /**
  * Set field H01FLGWK1 using a String value.
  */
  public void setH01FLGWK1(String newvalue)
  {
    fieldH01FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK1 as a String.
  */
  public String getH01FLGWK1()
  {
    return fieldH01FLGWK1.getString();
  }

  /**
  * Set field H01FLGWK2 using a String value.
  */
  public void setH01FLGWK2(String newvalue)
  {
    fieldH01FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK2 as a String.
  */
  public String getH01FLGWK2()
  {
    return fieldH01FLGWK2.getString();
  }

  /**
  * Set field H01FLGWK3 using a String value.
  */
  public void setH01FLGWK3(String newvalue)
  {
    fieldH01FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK3 as a String.
  */
  public String getH01FLGWK3()
  {
    return fieldH01FLGWK3.getString();
  }

  /**
  * Set field AVMACC using a String value.
  */
  public void setAVMACC(String newvalue)
  {
    fieldAVMACC.setString(newvalue);
  }

  /**
  * Get value of field AVMACC as a String.
  */
  public String getAVMACC()
  {
    return fieldAVMACC.getString();
  }

  /**
  * Set numeric field AVMACC using a BigDecimal value.
  */
  public void setAVMACC(BigDecimal newvalue)
  {
    fieldAVMACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field AVMACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalAVMACC()
  {
    return fieldAVMACC.getBigDecimal();
  }

  /**
  * Set field AVMSEM using a String value.
  */
  public void setAVMSEM(String newvalue)
  {
    fieldAVMSEM.setString(newvalue);
  }

  /**
  * Get value of field AVMSEM as a String.
  */
  public String getAVMSEM()
  {
    return fieldAVMSEM.getString();
  }

  /**
  * Set numeric field AVMSEM using a BigDecimal value.
  */
  public void setAVMSEM(BigDecimal newvalue)
  {
    fieldAVMSEM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field AVMSEM as a BigDecimal.
  */
  public BigDecimal getBigDecimalAVMSEM()
  {
    return fieldAVMSEM.getBigDecimal();
  }

  /**
  * Set field AVMSTD using a String value.
  */
  public void setAVMSTD(String newvalue)
  {
    fieldAVMSTD.setString(newvalue);
  }

  /**
  * Get value of field AVMSTD as a String.
  */
  public String getAVMSTD()
  {
    return fieldAVMSTD.getString();
  }

  /**
  * Set numeric field AVMSTD using a BigDecimal value.
  */
  public void setAVMSTD(BigDecimal newvalue)
  {
    fieldAVMSTD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field AVMSTD as a BigDecimal.
  */
  public BigDecimal getBigDecimalAVMSTD()
  {
    return fieldAVMSTD.getBigDecimal();
  }

  /**
  * Set field AVMSTM using a String value.
  */
  public void setAVMSTM(String newvalue)
  {
    fieldAVMSTM.setString(newvalue);
  }

  /**
  * Get value of field AVMSTM as a String.
  */
  public String getAVMSTM()
  {
    return fieldAVMSTM.getString();
  }

  /**
  * Set numeric field AVMSTM using a BigDecimal value.
  */
  public void setAVMSTM(BigDecimal newvalue)
  {
    fieldAVMSTM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field AVMSTM as a BigDecimal.
  */
  public BigDecimal getBigDecimalAVMSTM()
  {
    return fieldAVMSTM.getBigDecimal();
  }

  /**
  * Set field AVMSTY using a String value.
  */
  public void setAVMSTY(String newvalue)
  {
    fieldAVMSTY.setString(newvalue);
  }

  /**
  * Get value of field AVMSTY as a String.
  */
  public String getAVMSTY()
  {
    return fieldAVMSTY.getString();
  }

  /**
  * Set numeric field AVMSTY using a BigDecimal value.
  */
  public void setAVMSTY(BigDecimal newvalue)
  {
    fieldAVMSTY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field AVMSTY as a BigDecimal.
  */
  public BigDecimal getBigDecimalAVMSTY()
  {
    return fieldAVMSTY.getBigDecimal();
  }

  /**
  * Set field AVMSPR using a String value.
  */
  public void setAVMSPR(String newvalue)
  {
    fieldAVMSPR.setString(newvalue);
  }

  /**
  * Get value of field AVMSPR as a String.
  */
  public String getAVMSPR()
  {
    return fieldAVMSPR.getString();
  }

  /**
  * Set numeric field AVMSPR using a BigDecimal value.
  */
  public void setAVMSPR(BigDecimal newvalue)
  {
    fieldAVMSPR.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field AVMSPR as a BigDecimal.
  */
  public BigDecimal getBigDecimalAVMSPR()
  {
    return fieldAVMSPR.getBigDecimal();
  }

  /**
  * Set field AVMSAL using a String value.
  */
  public void setAVMSAL(String newvalue)
  {
    fieldAVMSAL.setString(newvalue);
  }

  /**
  * Get value of field AVMSAL as a String.
  */
  public String getAVMSAL()
  {
    return fieldAVMSAL.getString();
  }

  /**
  * Set numeric field AVMSAL using a BigDecimal value.
  */
  public void setAVMSAL(BigDecimal newvalue)
  {
    fieldAVMSAL.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field AVMSAL as a BigDecimal.
  */
  public BigDecimal getBigDecimalAVMSAL()
  {
    return fieldAVMSAL.getBigDecimal();
  }

}

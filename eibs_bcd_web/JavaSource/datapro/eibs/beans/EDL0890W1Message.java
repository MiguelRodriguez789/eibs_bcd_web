package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EDL0890W1 physical file definition.
* 
* File level identifier is 1130611112921.
* Record format level identifier is 53985ECAA2E71.
*/

public class EDL0890W1Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "DL8UID",
                                     "DL8CLF",
                                     "DL8CUN",
                                     "DL8DID",
                                     "DL8RST",
                                     "DL8CCY",
                                     "DL8MAM",
                                     "DL8MAD",
                                     "DL8MAY",
                                     "DL8OAM",
                                     "DL8DTP"
                                   };
  final static String tnames[] = {
                                   "DL8UID",
                                   "DL8CLF",
                                   "DL8CUN",
                                   "DL8DID",
                                   "DL8RST",
                                   "DL8CCY",
                                   "DL8MAM",
                                   "DL8MAD",
                                   "DL8MAY",
                                   "DL8OAM",
                                   "DL8DTP"
                                 };
  final static String fid = "1130611112921";
  final static String rid = "53985ECAA2E71";
  final static String fmtname = "EDL0890W1";
  final int FIELDCOUNT = 11;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldDL8UID = null;
  private CharacterField fieldDL8CLF = null;
  private DecimalField fieldDL8CUN = null;
  private CharacterField fieldDL8DID = null;
  private CharacterField fieldDL8RST = null;
  private CharacterField fieldDL8CCY = null;
  private DecimalField fieldDL8MAM = null;
  private DecimalField fieldDL8MAD = null;
  private DecimalField fieldDL8MAY = null;
  private DecimalField fieldDL8OAM = null;
  private CharacterField fieldDL8DTP = null;

  /**
  * Constructor for EDL0890W1Message.
  */
  public EDL0890W1Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 79;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldDL8UID =
    new CharacterField(message, HEADERSIZE + 0, 10, "DL8UID");
    fields[1] = fieldDL8CLF =
    new CharacterField(message, HEADERSIZE + 10, 1, "DL8CLF");
    fields[2] = fieldDL8CUN =
    new DecimalField(message, HEADERSIZE + 11, 10, 0, "DL8CUN");
    fields[3] = fieldDL8DID =
    new CharacterField(message, HEADERSIZE + 21, 25, "DL8DID");
    fields[4] = fieldDL8RST =
    new CharacterField(message, HEADERSIZE + 46, 1, "DL8RST");
    fields[5] = fieldDL8CCY =
    new CharacterField(message, HEADERSIZE + 47, 3, "DL8CCY");
    fields[6] = fieldDL8MAM =
    new DecimalField(message, HEADERSIZE + 50, 3, 0, "DL8MAM");
    fields[7] = fieldDL8MAD =
    new DecimalField(message, HEADERSIZE + 53, 3, 0, "DL8MAD");
    fields[8] = fieldDL8MAY =
    new DecimalField(message, HEADERSIZE + 56, 5, 0, "DL8MAY");
    fields[9] = fieldDL8OAM =
    new DecimalField(message, HEADERSIZE + 61, 17, 2, "DL8OAM");
    fields[10] = fieldDL8DTP =
    new CharacterField(message, HEADERSIZE + 78, 1, "DL8DTP");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field DL8UID using a String value.
  */
  public void setDL8UID(String newvalue)
  {
    fieldDL8UID.setString(newvalue);
  }

  /**
  * Get value of field DL8UID as a String.
  */
  public String getDL8UID()
  {
    return fieldDL8UID.getString();
  }

  /**
  * Set field DL8CLF using a String value.
  */
  public void setDL8CLF(String newvalue)
  {
    fieldDL8CLF.setString(newvalue);
  }

  /**
  * Get value of field DL8CLF as a String.
  */
  public String getDL8CLF()
  {
    return fieldDL8CLF.getString();
  }

  /**
  * Set field DL8CUN using a String value.
  */
  public void setDL8CUN(String newvalue)
  {
    fieldDL8CUN.setString(newvalue);
  }

  /**
  * Get value of field DL8CUN as a String.
  */
  public String getDL8CUN()
  {
    return fieldDL8CUN.getString();
  }

  /**
  * Set numeric field DL8CUN using a BigDecimal value.
  */
  public void setDL8CUN(BigDecimal newvalue)
  {
    fieldDL8CUN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DL8CUN as a BigDecimal.
  */
  public BigDecimal getBigDecimalDL8CUN()
  {
    return fieldDL8CUN.getBigDecimal();
  }

  /**
  * Set field DL8DID using a String value.
  */
  public void setDL8DID(String newvalue)
  {
    fieldDL8DID.setString(newvalue);
  }

  /**
  * Get value of field DL8DID as a String.
  */
  public String getDL8DID()
  {
    return fieldDL8DID.getString();
  }

  /**
  * Set field DL8RST using a String value.
  */
  public void setDL8RST(String newvalue)
  {
    fieldDL8RST.setString(newvalue);
  }

  /**
  * Get value of field DL8RST as a String.
  */
  public String getDL8RST()
  {
    return fieldDL8RST.getString();
  }

  /**
  * Set field DL8CCY using a String value.
  */
  public void setDL8CCY(String newvalue)
  {
    fieldDL8CCY.setString(newvalue);
  }

  /**
  * Get value of field DL8CCY as a String.
  */
  public String getDL8CCY()
  {
    return fieldDL8CCY.getString();
  }

  /**
  * Set field DL8MAM using a String value.
  */
  public void setDL8MAM(String newvalue)
  {
    fieldDL8MAM.setString(newvalue);
  }

  /**
  * Get value of field DL8MAM as a String.
  */
  public String getDL8MAM()
  {
    return fieldDL8MAM.getString();
  }

  /**
  * Set numeric field DL8MAM using a BigDecimal value.
  */
  public void setDL8MAM(BigDecimal newvalue)
  {
    fieldDL8MAM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DL8MAM as a BigDecimal.
  */
  public BigDecimal getBigDecimalDL8MAM()
  {
    return fieldDL8MAM.getBigDecimal();
  }

  /**
  * Set field DL8MAD using a String value.
  */
  public void setDL8MAD(String newvalue)
  {
    fieldDL8MAD.setString(newvalue);
  }

  /**
  * Get value of field DL8MAD as a String.
  */
  public String getDL8MAD()
  {
    return fieldDL8MAD.getString();
  }

  /**
  * Set numeric field DL8MAD using a BigDecimal value.
  */
  public void setDL8MAD(BigDecimal newvalue)
  {
    fieldDL8MAD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DL8MAD as a BigDecimal.
  */
  public BigDecimal getBigDecimalDL8MAD()
  {
    return fieldDL8MAD.getBigDecimal();
  }

  /**
  * Set field DL8MAY using a String value.
  */
  public void setDL8MAY(String newvalue)
  {
    fieldDL8MAY.setString(newvalue);
  }

  /**
  * Get value of field DL8MAY as a String.
  */
  public String getDL8MAY()
  {
    return fieldDL8MAY.getString();
  }

  /**
  * Set numeric field DL8MAY using a BigDecimal value.
  */
  public void setDL8MAY(BigDecimal newvalue)
  {
    fieldDL8MAY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DL8MAY as a BigDecimal.
  */
  public BigDecimal getBigDecimalDL8MAY()
  {
    return fieldDL8MAY.getBigDecimal();
  }

  /**
  * Set field DL8OAM using a String value.
  */
  public void setDL8OAM(String newvalue)
  {
    fieldDL8OAM.setString(newvalue);
  }

  /**
  * Get value of field DL8OAM as a String.
  */
  public String getDL8OAM()
  {
    return fieldDL8OAM.getString();
  }

  /**
  * Set numeric field DL8OAM using a BigDecimal value.
  */
  public void setDL8OAM(BigDecimal newvalue)
  {
    fieldDL8OAM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DL8OAM as a BigDecimal.
  */
  public BigDecimal getBigDecimalDL8OAM()
  {
    return fieldDL8OAM.getBigDecimal();
  }

  /**
  * Set field DL8DTP using a String value.
  */
  public void setDL8DTP(String newvalue)
  {
    fieldDL8DTP.setString(newvalue);
  }

  /**
  * Get value of field DL8DTP as a String.
  */
  public String getDL8DTP()
  {
    return fieldDL8DTP.getString();
  }

}

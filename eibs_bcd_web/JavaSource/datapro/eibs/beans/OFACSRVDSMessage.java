package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from OFACSRVDS physical file definition.
* 
* File level identifier is 1130703175453.
* Record format level identifier is 49AB0B10C997B.
*/

public class OFACSRVDSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "DNACD",
                                     "DNMOD",
                                     "DNUSR",
                                     "DNBNK",
                                     "DNCUA",
                                     "DNPRO",
                                     "DNPGM",
                                     "DNFID",
                                     "DNCCY",
                                     "DNGLN",
                                     "DNSR",
                                     "DNIDN",
                                     "DNSFL",
                                     "DNFI1",
                                     "DNNRO"
                                   };
  final static String tnames[] = {
                                   "DNACD",
                                   "DNMOD",
                                   "DNUSR",
                                   "DNBNK",
                                   "DNCUA",
                                   "DNPRO",
                                   "DNPGM",
                                   "DNFID",
                                   "DNCCY",
                                   "DNGLN",
                                   "DNSR",
                                   "DNIDN",
                                   "DNSFL",
                                   "DNFI1",
                                   "DNNRO"
                                 };
  final static String fid = "1130703175453";
  final static String rid = "49AB0B10C997B";
  final static String fmtname = "OFACSRVDS";
  final int FIELDCOUNT = 15;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldDNACD = null;
  private CharacterField fieldDNMOD = null;
  private CharacterField fieldDNUSR = null;
  private CharacterField fieldDNBNK = null;
  private DecimalField fieldDNCUA = null;
  private CharacterField fieldDNPRO = null;
  private CharacterField fieldDNPGM = null;
  private CharacterField fieldDNFID = null;
  private CharacterField fieldDNCCY = null;
  private DecimalField fieldDNGLN = null;
  private CharacterField fieldDNSR = null;
  private CharacterField fieldDNIDN = null;
  private CharacterField fieldDNSFL = null;
  private CharacterField fieldDNFI1 = null;
  private DecimalField fieldDNNRO = null;

  /**
  * Constructor for OFACSRVDSMessage.
  */
  public OFACSRVDSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 4803;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldDNACD =
    new CharacterField(message, HEADERSIZE + 0, 2, "DNACD");
    fields[1] = fieldDNMOD =
    new CharacterField(message, HEADERSIZE + 2, 1, "DNMOD");
    fields[2] = fieldDNUSR =
    new CharacterField(message, HEADERSIZE + 3, 10, "DNUSR");
    fields[3] = fieldDNBNK =
    new CharacterField(message, HEADERSIZE + 13, 2, "DNBNK");
    fields[4] = fieldDNCUA =
    new DecimalField(message, HEADERSIZE + 15, 13, 0, "DNCUA");
    fields[5] = fieldDNPRO =
    new CharacterField(message, HEADERSIZE + 28, 1, "DNPRO");
    fields[6] = fieldDNPGM =
    new CharacterField(message, HEADERSIZE + 29, 10, "DNPGM");
    fields[7] = fieldDNFID =
    new CharacterField(message, HEADERSIZE + 39, 1, "DNFID");
    fields[8] = fieldDNCCY =
    new CharacterField(message, HEADERSIZE + 40, 3, "DNCCY");
    fields[9] = fieldDNGLN =
    new DecimalField(message, HEADERSIZE + 43, 17, 0, "DNGLN");
    fields[10] = fieldDNSR =
    new CharacterField(message, HEADERSIZE + 60, 4200, "DNSR");
    fields[11] = fieldDNIDN =
    new CharacterField(message, HEADERSIZE + 4260, 500, "DNIDN");
    fields[12] = fieldDNSFL =
    new CharacterField(message, HEADERSIZE + 4760, 20, "DNSFL");
    fields[13] = fieldDNFI1 =
    new CharacterField(message, HEADERSIZE + 4780, 10, "DNFI1");
    fields[14] = fieldDNNRO =
    new DecimalField(message, HEADERSIZE + 4790, 13, 0, "DNNRO");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field DNACD using a String value.
  */
  public void setDNACD(String newvalue)
  {
    fieldDNACD.setString(newvalue);
  }

  /**
  * Get value of field DNACD as a String.
  */
  public String getDNACD()
  {
    return fieldDNACD.getString();
  }

  /**
  * Set field DNMOD using a String value.
  */
  public void setDNMOD(String newvalue)
  {
    fieldDNMOD.setString(newvalue);
  }

  /**
  * Get value of field DNMOD as a String.
  */
  public String getDNMOD()
  {
    return fieldDNMOD.getString();
  }

  /**
  * Set field DNUSR using a String value.
  */
  public void setDNUSR(String newvalue)
  {
    fieldDNUSR.setString(newvalue);
  }

  /**
  * Get value of field DNUSR as a String.
  */
  public String getDNUSR()
  {
    return fieldDNUSR.getString();
  }

  /**
  * Set field DNBNK using a String value.
  */
  public void setDNBNK(String newvalue)
  {
    fieldDNBNK.setString(newvalue);
  }

  /**
  * Get value of field DNBNK as a String.
  */
  public String getDNBNK()
  {
    return fieldDNBNK.getString();
  }

  /**
  * Set field DNCUA using a String value.
  */
  public void setDNCUA(String newvalue)
  {
    fieldDNCUA.setString(newvalue);
  }

  /**
  * Get value of field DNCUA as a String.
  */
  public String getDNCUA()
  {
    return fieldDNCUA.getString();
  }

  /**
  * Set numeric field DNCUA using a BigDecimal value.
  */
  public void setDNCUA(BigDecimal newvalue)
  {
    fieldDNCUA.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DNCUA as a BigDecimal.
  */
  public BigDecimal getBigDecimalDNCUA()
  {
    return fieldDNCUA.getBigDecimal();
  }

  /**
  * Set field DNPRO using a String value.
  */
  public void setDNPRO(String newvalue)
  {
    fieldDNPRO.setString(newvalue);
  }

  /**
  * Get value of field DNPRO as a String.
  */
  public String getDNPRO()
  {
    return fieldDNPRO.getString();
  }

  /**
  * Set field DNPGM using a String value.
  */
  public void setDNPGM(String newvalue)
  {
    fieldDNPGM.setString(newvalue);
  }

  /**
  * Get value of field DNPGM as a String.
  */
  public String getDNPGM()
  {
    return fieldDNPGM.getString();
  }

  /**
  * Set field DNFID using a String value.
  */
  public void setDNFID(String newvalue)
  {
    fieldDNFID.setString(newvalue);
  }

  /**
  * Get value of field DNFID as a String.
  */
  public String getDNFID()
  {
    return fieldDNFID.getString();
  }

  /**
  * Set field DNCCY using a String value.
  */
  public void setDNCCY(String newvalue)
  {
    fieldDNCCY.setString(newvalue);
  }

  /**
  * Get value of field DNCCY as a String.
  */
  public String getDNCCY()
  {
    return fieldDNCCY.getString();
  }

  /**
  * Set field DNGLN using a String value.
  */
  public void setDNGLN(String newvalue)
  {
    fieldDNGLN.setString(newvalue);
  }

  /**
  * Get value of field DNGLN as a String.
  */
  public String getDNGLN()
  {
    return fieldDNGLN.getString();
  }

  /**
  * Set numeric field DNGLN using a BigDecimal value.
  */
  public void setDNGLN(BigDecimal newvalue)
  {
    fieldDNGLN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DNGLN as a BigDecimal.
  */
  public BigDecimal getBigDecimalDNGLN()
  {
    return fieldDNGLN.getBigDecimal();
  }

  /**
  * Set field DNSR using a String value.
  */
  public void setDNSR(String newvalue)
  {
    fieldDNSR.setString(newvalue);
  }

  /**
  * Get value of field DNSR as a String.
  */
  public String getDNSR()
  {
    return fieldDNSR.getString();
  }

  /**
  * Set field DNIDN using a String value.
  */
  public void setDNIDN(String newvalue)
  {
    fieldDNIDN.setString(newvalue);
  }

  /**
  * Get value of field DNIDN as a String.
  */
  public String getDNIDN()
  {
    return fieldDNIDN.getString();
  }

  /**
  * Set field DNSFL using a String value.
  */
  public void setDNSFL(String newvalue)
  {
    fieldDNSFL.setString(newvalue);
  }

  /**
  * Get value of field DNSFL as a String.
  */
  public String getDNSFL()
  {
    return fieldDNSFL.getString();
  }

  /**
  * Set field DNFI1 using a String value.
  */
  public void setDNFI1(String newvalue)
  {
    fieldDNFI1.setString(newvalue);
  }

  /**
  * Get value of field DNFI1 as a String.
  */
  public String getDNFI1()
  {
    return fieldDNFI1.getString();
  }

  /**
  * Set field DNNRO using a String value.
  */
  public void setDNNRO(String newvalue)
  {
    fieldDNNRO.setString(newvalue);
  }

  /**
  * Get value of field DNNRO as a String.
  */
  public String getDNNRO()
  {
    return fieldDNNRO.getString();
  }

  /**
  * Set numeric field DNNRO using a BigDecimal value.
  */
  public void setDNNRO(BigDecimal newvalue)
  {
    fieldDNNRO.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DNNRO as a BigDecimal.
  */
  public BigDecimal getBigDecimalDNNRO()
  {
    return fieldDNNRO.getBigDecimal();
  }

}

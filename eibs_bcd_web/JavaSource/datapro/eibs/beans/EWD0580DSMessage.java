package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0580DS physical file definition.
* 
* File level identifier is 1130611113509.
* Record format level identifier is 30F936B256EC7.
*/

public class EWD0580DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EWDUSR",
                                     "EWDSTYP",
                                     "EWDFRC",
                                     "EWDNUM",
                                     "EWDTYP",
                                     "EWDKIN",
                                     "EWDKIND",
                                     "EWDREF",
                                     "EWDDSC",
                                     "EWDCOD",
                                     "EWDVEND",
                                     "EWDSTA",
                                     "EWDREC",
                                     "EWDOPE"
                                   };
  final static String tnames[] = {
                                   "EWDUSR",
                                   "EWDSTYP",
                                   "EWDFRC",
                                   "EWDNUM",
                                   "EWDTYP",
                                   "EWDKIN",
                                   "EWDKIND",
                                   "EWDREF",
                                   "EWDDSC",
                                   "EWDCOD",
                                   "EWDVEND",
                                   "EWDSTA",
                                   "EWDREC",
                                   "EWDOPE"
                                 };
  final static String fid = "1130611113509";
  final static String rid = "30F936B256EC7";
  final static String fmtname = "EWD0580DS";
  final int FIELDCOUNT = 14;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldEWDUSR = null;
  private CharacterField fieldEWDSTYP = null;
  private DecimalField fieldEWDFRC = null;
  private DecimalField fieldEWDNUM = null;
  private CharacterField fieldEWDTYP = null;
  private CharacterField fieldEWDKIN = null;
  private CharacterField fieldEWDKIND = null;
  private CharacterField fieldEWDREF = null;
  private CharacterField fieldEWDDSC = null;
  private DecimalField fieldEWDCOD = null;
  private CharacterField fieldEWDVEND = null;
  private CharacterField fieldEWDSTA = null;
  private DecimalField fieldEWDREC = null;
  private CharacterField fieldEWDOPE = null;

  /**
  * Constructor for EWD0580DSMessage.
  */
  public EWD0580DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 247;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEWDUSR =
    new CharacterField(message, HEADERSIZE + 0, 10, "EWDUSR");
    fields[1] = fieldEWDSTYP =
    new CharacterField(message, HEADERSIZE + 10, 1, "EWDSTYP");
    fields[2] = fieldEWDFRC =
    new DecimalField(message, HEADERSIZE + 11, 8, 0, "EWDFRC");
    fields[3] = fieldEWDNUM =
    new DecimalField(message, HEADERSIZE + 19, 13, 0, "EWDNUM");
    fields[4] = fieldEWDTYP =
    new CharacterField(message, HEADERSIZE + 32, 1, "EWDTYP");
    fields[5] = fieldEWDKIN =
    new CharacterField(message, HEADERSIZE + 33, 4, "EWDKIN");
    fields[6] = fieldEWDKIND =
    new CharacterField(message, HEADERSIZE + 37, 45, "EWDKIND");
    fields[7] = fieldEWDREF =
    new CharacterField(message, HEADERSIZE + 82, 25, "EWDREF");
    fields[8] = fieldEWDDSC =
    new CharacterField(message, HEADERSIZE + 107, 60, "EWDDSC");
    fields[9] = fieldEWDCOD =
    new DecimalField(message, HEADERSIZE + 167, 10, 0, "EWDCOD");
    fields[10] = fieldEWDVEND =
    new CharacterField(message, HEADERSIZE + 177, 60, "EWDVEND");
    fields[11] = fieldEWDSTA =
    new CharacterField(message, HEADERSIZE + 237, 1, "EWDSTA");
    fields[12] = fieldEWDREC =
    new DecimalField(message, HEADERSIZE + 238, 8, 0, "EWDREC");
    fields[13] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 246, 1, "EWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EWDUSR using a String value.
  */
  public void setEWDUSR(String newvalue)
  {
    fieldEWDUSR.setString(newvalue);
  }

  /**
  * Get value of field EWDUSR as a String.
  */
  public String getEWDUSR()
  {
    return fieldEWDUSR.getString();
  }

  /**
  * Set field EWDSTYP using a String value.
  */
  public void setEWDSTYP(String newvalue)
  {
    fieldEWDSTYP.setString(newvalue);
  }

  /**
  * Get value of field EWDSTYP as a String.
  */
  public String getEWDSTYP()
  {
    return fieldEWDSTYP.getString();
  }

  /**
  * Set field EWDFRC using a String value.
  */
  public void setEWDFRC(String newvalue)
  {
    fieldEWDFRC.setString(newvalue);
  }

  /**
  * Get value of field EWDFRC as a String.
  */
  public String getEWDFRC()
  {
    return fieldEWDFRC.getString();
  }

  /**
  * Set numeric field EWDFRC using a BigDecimal value.
  */
  public void setEWDFRC(BigDecimal newvalue)
  {
    fieldEWDFRC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDFRC as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDFRC()
  {
    return fieldEWDFRC.getBigDecimal();
  }

  /**
  * Set field EWDNUM using a String value.
  */
  public void setEWDNUM(String newvalue)
  {
    fieldEWDNUM.setString(newvalue);
  }

  /**
  * Get value of field EWDNUM as a String.
  */
  public String getEWDNUM()
  {
    return fieldEWDNUM.getString();
  }

  /**
  * Set numeric field EWDNUM using a BigDecimal value.
  */
  public void setEWDNUM(BigDecimal newvalue)
  {
    fieldEWDNUM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDNUM as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDNUM()
  {
    return fieldEWDNUM.getBigDecimal();
  }

  /**
  * Set field EWDTYP using a String value.
  */
  public void setEWDTYP(String newvalue)
  {
    fieldEWDTYP.setString(newvalue);
  }

  /**
  * Get value of field EWDTYP as a String.
  */
  public String getEWDTYP()
  {
    return fieldEWDTYP.getString();
  }

  /**
  * Set field EWDKIN using a String value.
  */
  public void setEWDKIN(String newvalue)
  {
    fieldEWDKIN.setString(newvalue);
  }

  /**
  * Get value of field EWDKIN as a String.
  */
  public String getEWDKIN()
  {
    return fieldEWDKIN.getString();
  }

  /**
  * Set field EWDKIND using a String value.
  */
  public void setEWDKIND(String newvalue)
  {
    fieldEWDKIND.setString(newvalue);
  }

  /**
  * Get value of field EWDKIND as a String.
  */
  public String getEWDKIND()
  {
    return fieldEWDKIND.getString();
  }

  /**
  * Set field EWDREF using a String value.
  */
  public void setEWDREF(String newvalue)
  {
    fieldEWDREF.setString(newvalue);
  }

  /**
  * Get value of field EWDREF as a String.
  */
  public String getEWDREF()
  {
    return fieldEWDREF.getString();
  }

  /**
  * Set field EWDDSC using a String value.
  */
  public void setEWDDSC(String newvalue)
  {
    fieldEWDDSC.setString(newvalue);
  }

  /**
  * Get value of field EWDDSC as a String.
  */
  public String getEWDDSC()
  {
    return fieldEWDDSC.getString();
  }

  /**
  * Set field EWDCOD using a String value.
  */
  public void setEWDCOD(String newvalue)
  {
    fieldEWDCOD.setString(newvalue);
  }

  /**
  * Get value of field EWDCOD as a String.
  */
  public String getEWDCOD()
  {
    return fieldEWDCOD.getString();
  }

  /**
  * Set numeric field EWDCOD using a BigDecimal value.
  */
  public void setEWDCOD(BigDecimal newvalue)
  {
    fieldEWDCOD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDCOD as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDCOD()
  {
    return fieldEWDCOD.getBigDecimal();
  }

  /**
  * Set field EWDVEND using a String value.
  */
  public void setEWDVEND(String newvalue)
  {
    fieldEWDVEND.setString(newvalue);
  }

  /**
  * Get value of field EWDVEND as a String.
  */
  public String getEWDVEND()
  {
    return fieldEWDVEND.getString();
  }

  /**
  * Set field EWDSTA using a String value.
  */
  public void setEWDSTA(String newvalue)
  {
    fieldEWDSTA.setString(newvalue);
  }

  /**
  * Get value of field EWDSTA as a String.
  */
  public String getEWDSTA()
  {
    return fieldEWDSTA.getString();
  }

  /**
  * Set field EWDREC using a String value.
  */
  public void setEWDREC(String newvalue)
  {
    fieldEWDREC.setString(newvalue);
  }

  /**
  * Get value of field EWDREC as a String.
  */
  public String getEWDREC()
  {
    return fieldEWDREC.getString();
  }

  /**
  * Set numeric field EWDREC using a BigDecimal value.
  */
  public void setEWDREC(BigDecimal newvalue)
  {
    fieldEWDREC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDREC as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDREC()
  {
    return fieldEWDREC.getBigDecimal();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

}

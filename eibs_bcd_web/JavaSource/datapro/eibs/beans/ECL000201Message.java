package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ECL000201 physical file definition.
* 
* File level identifier is 1100706173538.
* Record format level identifier is 3E9B8B3ECD7A0.
*/

public class ECL000201Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H02USERID",
                                     "H02PROGRM",
                                     "H02TIMSYS",
                                     "H02SCRCOD",
                                     "H02OPECOD",
                                     "H02FLGMAS",
                                     "H02FLGWK1",
                                     "H02FLGWK2",
                                     "H02FLGWK3",
                                     "RUTCLI",
                                     "NUMCLI",
                                     "FONCLI",
                                     "FAXCLI",
                                     "DIRIAD",
                                     "DIRWEB"
                                   };
  final static String tnames[] = {
                                   "H02USERID",
                                   "H02PROGRM",
                                   "H02TIMSYS",
                                   "H02SCRCOD",
                                   "H02OPECOD",
                                   "H02FLGMAS",
                                   "H02FLGWK1",
                                   "H02FLGWK2",
                                   "H02FLGWK3",
                                   "RUTCLI",
                                   "NUMCLI",
                                   "FONCLI",
                                   "FAXCLI",
                                   "DIRIAD",
                                   "DIRWEB"
                                 };
  final static String fid = "1100706173538";
  final static String rid = "3E9B8B3ECD7A0";
  final static String fmtname = "ECL000201";
  final int FIELDCOUNT = 15;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH02USERID = null;
  private CharacterField fieldH02PROGRM = null;
  private CharacterField fieldH02TIMSYS = null;
  private CharacterField fieldH02SCRCOD = null;
  private CharacterField fieldH02OPECOD = null;
  private CharacterField fieldH02FLGMAS = null;
  private CharacterField fieldH02FLGWK1 = null;
  private CharacterField fieldH02FLGWK2 = null;
  private CharacterField fieldH02FLGWK3 = null;
  private CharacterField fieldRUTCLI = null;
  private DecimalField fieldNUMCLI = null;
  private DecimalField fieldFONCLI = null;
  private DecimalField fieldFAXCLI = null;
  private CharacterField fieldDIRIAD = null;
  private CharacterField fieldDIRWEB = null;

  /**
  * Constructor for ECL000201Message.
  */
  public ECL000201Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 171;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH02USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H02USERID");
    fields[1] = fieldH02PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H02PROGRM");
    fields[2] = fieldH02TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H02TIMSYS");
    fields[3] = fieldH02SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H02SCRCOD");
    fields[4] = fieldH02OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H02OPECOD");
    fields[5] = fieldH02FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H02FLGMAS");
    fields[6] = fieldH02FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H02FLGWK1");
    fields[7] = fieldH02FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H02FLGWK2");
    fields[8] = fieldH02FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H02FLGWK3");
    fields[9] = fieldRUTCLI =
    new CharacterField(message, HEADERSIZE + 42, 15, "RUTCLI");
    fields[10] = fieldNUMCLI =
    new DecimalField(message, HEADERSIZE + 57, 10, 0, "NUMCLI");
    fields[11] = fieldFONCLI =
    new DecimalField(message, HEADERSIZE + 67, 12, 0, "FONCLI");
    fields[12] = fieldFAXCLI =
    new DecimalField(message, HEADERSIZE + 79, 12, 0, "FAXCLI");
    fields[13] = fieldDIRIAD =
    new CharacterField(message, HEADERSIZE + 91, 40, "DIRIAD");
    fields[14] = fieldDIRWEB =
    new CharacterField(message, HEADERSIZE + 131, 40, "DIRWEB");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H02USERID using a String value.
  */
  public void setH02USERID(String newvalue)
  {
    fieldH02USERID.setString(newvalue);
  }

  /**
  * Get value of field H02USERID as a String.
  */
  public String getH02USERID()
  {
    return fieldH02USERID.getString();
  }

  /**
  * Set field H02PROGRM using a String value.
  */
  public void setH02PROGRM(String newvalue)
  {
    fieldH02PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H02PROGRM as a String.
  */
  public String getH02PROGRM()
  {
    return fieldH02PROGRM.getString();
  }

  /**
  * Set field H02TIMSYS using a String value.
  */
  public void setH02TIMSYS(String newvalue)
  {
    fieldH02TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H02TIMSYS as a String.
  */
  public String getH02TIMSYS()
  {
    return fieldH02TIMSYS.getString();
  }

  /**
  * Set field H02SCRCOD using a String value.
  */
  public void setH02SCRCOD(String newvalue)
  {
    fieldH02SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H02SCRCOD as a String.
  */
  public String getH02SCRCOD()
  {
    return fieldH02SCRCOD.getString();
  }

  /**
  * Set field H02OPECOD using a String value.
  */
  public void setH02OPECOD(String newvalue)
  {
    fieldH02OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H02OPECOD as a String.
  */
  public String getH02OPECOD()
  {
    return fieldH02OPECOD.getString();
  }

  /**
  * Set field H02FLGMAS using a String value.
  */
  public void setH02FLGMAS(String newvalue)
  {
    fieldH02FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H02FLGMAS as a String.
  */
  public String getH02FLGMAS()
  {
    return fieldH02FLGMAS.getString();
  }

  /**
  * Set field H02FLGWK1 using a String value.
  */
  public void setH02FLGWK1(String newvalue)
  {
    fieldH02FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK1 as a String.
  */
  public String getH02FLGWK1()
  {
    return fieldH02FLGWK1.getString();
  }

  /**
  * Set field H02FLGWK2 using a String value.
  */
  public void setH02FLGWK2(String newvalue)
  {
    fieldH02FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK2 as a String.
  */
  public String getH02FLGWK2()
  {
    return fieldH02FLGWK2.getString();
  }

  /**
  * Set field H02FLGWK3 using a String value.
  */
  public void setH02FLGWK3(String newvalue)
  {
    fieldH02FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK3 as a String.
  */
  public String getH02FLGWK3()
  {
    return fieldH02FLGWK3.getString();
  }

  /**
  * Set field RUTCLI using a String value.
  */
  public void setRUTCLI(String newvalue)
  {
    fieldRUTCLI.setString(newvalue);
  }

  /**
  * Get value of field RUTCLI as a String.
  */
  public String getRUTCLI()
  {
    return fieldRUTCLI.getString();
  }

  /**
  * Set field NUMCLI using a String value.
  */
  public void setNUMCLI(String newvalue)
  {
    fieldNUMCLI.setString(newvalue);
  }

  /**
  * Get value of field NUMCLI as a String.
  */
  public String getNUMCLI()
  {
    return fieldNUMCLI.getString();
  }

  /**
  * Set numeric field NUMCLI using a BigDecimal value.
  */
  public void setNUMCLI(BigDecimal newvalue)
  {
    fieldNUMCLI.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field NUMCLI as a BigDecimal.
  */
  public BigDecimal getBigDecimalNUMCLI()
  {
    return fieldNUMCLI.getBigDecimal();
  }

  /**
  * Set field FONCLI using a String value.
  */
  public void setFONCLI(String newvalue)
  {
    fieldFONCLI.setString(newvalue);
  }

  /**
  * Get value of field FONCLI as a String.
  */
  public String getFONCLI()
  {
    return fieldFONCLI.getString();
  }

  /**
  * Set numeric field FONCLI using a BigDecimal value.
  */
  public void setFONCLI(BigDecimal newvalue)
  {
    fieldFONCLI.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field FONCLI as a BigDecimal.
  */
  public BigDecimal getBigDecimalFONCLI()
  {
    return fieldFONCLI.getBigDecimal();
  }

  /**
  * Set field FAXCLI using a String value.
  */
  public void setFAXCLI(String newvalue)
  {
    fieldFAXCLI.setString(newvalue);
  }

  /**
  * Get value of field FAXCLI as a String.
  */
  public String getFAXCLI()
  {
    return fieldFAXCLI.getString();
  }

  /**
  * Set numeric field FAXCLI using a BigDecimal value.
  */
  public void setFAXCLI(BigDecimal newvalue)
  {
    fieldFAXCLI.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field FAXCLI as a BigDecimal.
  */
  public BigDecimal getBigDecimalFAXCLI()
  {
    return fieldFAXCLI.getBigDecimal();
  }

  /**
  * Set field DIRIAD using a String value.
  */
  public void setDIRIAD(String newvalue)
  {
    fieldDIRIAD.setString(newvalue);
  }

  /**
  * Get value of field DIRIAD as a String.
  */
  public String getDIRIAD()
  {
    return fieldDIRIAD.getString();
  }

  /**
  * Set field DIRWEB using a String value.
  */
  public void setDIRWEB(String newvalue)
  {
    fieldDIRWEB.setString(newvalue);
  }

  /**
  * Get value of field DIRWEB as a String.
  */
  public String getDIRWEB()
  {
    return fieldDIRWEB.getString();
  }

}

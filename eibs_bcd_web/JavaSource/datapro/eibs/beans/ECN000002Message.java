package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ECN000002 physical file definition.
* 
* File level identifier is 1151111124621.
* Record format level identifier is 52EBFE5AABDC3.
*/

public class ECN000002Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H02USERID",
                                     "H02PROGRM",
                                     "H02TIMSYS",
                                     "H02SCRCOD",
                                     "H02OPECOD",
                                     "H02FLGMAS",
                                     "H02FLGWK1",
                                     "H02FLGWK2",
                                     "H02FLGWK3",
                                     "E02CDRRTB",
                                     "E02CDRSFL",
                                     "E02CDRCCY",
                                     "E02CDRDTM",
                                     "E02CDRDTD",
                                     "E02CDRDTY",
                                     "E02CFRRTB",
                                     "E02CFRDTM",
                                     "E02CFRDTD",
                                     "E02CFRDTY",
                                     "E02CFRCCY"
                                   };
  final static String tnames[] = {
                                   "H02USERID",
                                   "H02PROGRM",
                                   "H02TIMSYS",
                                   "H02SCRCOD",
                                   "H02OPECOD",
                                   "H02FLGMAS",
                                   "H02FLGWK1",
                                   "H02FLGWK2",
                                   "H02FLGWK3",
                                   "E02CDRRTB",
                                   "E02CDRSFL",
                                   "E02CDRCCY",
                                   "E02CDRDTM",
                                   "E02CDRDTD",
                                   "E02CDRDTY",
                                   "E02CFRRTB",
                                   "E02CFRDTM",
                                   "E02CFRDTD",
                                   "E02CFRDTY",
                                   "E02CFRCCY"
                                 };
  final static String fid = "1151111124621";
  final static String rid = "52EBFE5AABDC3";
  final static String fmtname = "ECN000002";
  final int FIELDCOUNT = 20;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH02USERID = null;
  private CharacterField fieldH02PROGRM = null;
  private CharacterField fieldH02TIMSYS = null;
  private CharacterField fieldH02SCRCOD = null;
  private CharacterField fieldH02OPECOD = null;
  private CharacterField fieldH02FLGMAS = null;
  private CharacterField fieldH02FLGWK1 = null;
  private CharacterField fieldH02FLGWK2 = null;
  private CharacterField fieldH02FLGWK3 = null;
  private CharacterField fieldE02CDRRTB = null;
  private CharacterField fieldE02CDRSFL = null;
  private CharacterField fieldE02CDRCCY = null;
  private DecimalField fieldE02CDRDTM = null;
  private DecimalField fieldE02CDRDTD = null;
  private DecimalField fieldE02CDRDTY = null;
  private CharacterField fieldE02CFRRTB = null;
  private DecimalField fieldE02CFRDTM = null;
  private DecimalField fieldE02CFRDTD = null;
  private DecimalField fieldE02CFRDTY = null;
  private CharacterField fieldE02CFRCCY = null;

  /**
  * Constructor for ECN000002Message.
  */
  public ECN000002Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 75;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH02USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H02USERID");
    fields[1] = fieldH02PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H02PROGRM");
    fields[2] = fieldH02TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H02TIMSYS");
    fields[3] = fieldH02SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H02SCRCOD");
    fields[4] = fieldH02OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H02OPECOD");
    fields[5] = fieldH02FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H02FLGMAS");
    fields[6] = fieldH02FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H02FLGWK1");
    fields[7] = fieldH02FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H02FLGWK2");
    fields[8] = fieldH02FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H02FLGWK3");
    fields[9] = fieldE02CDRRTB =
    new CharacterField(message, HEADERSIZE + 42, 2, "E02CDRRTB");
    fields[10] = fieldE02CDRSFL =
    new CharacterField(message, HEADERSIZE + 44, 1, "E02CDRSFL");
    fields[11] = fieldE02CDRCCY =
    new CharacterField(message, HEADERSIZE + 45, 3, "E02CDRCCY");
    fields[12] = fieldE02CDRDTM =
    new DecimalField(message, HEADERSIZE + 48, 3, 0, "E02CDRDTM");
    fields[13] = fieldE02CDRDTD =
    new DecimalField(message, HEADERSIZE + 51, 3, 0, "E02CDRDTD");
    fields[14] = fieldE02CDRDTY =
    new DecimalField(message, HEADERSIZE + 54, 5, 0, "E02CDRDTY");
    fields[15] = fieldE02CFRRTB =
    new CharacterField(message, HEADERSIZE + 59, 2, "E02CFRRTB");
    fields[16] = fieldE02CFRDTM =
    new DecimalField(message, HEADERSIZE + 61, 3, 0, "E02CFRDTM");
    fields[17] = fieldE02CFRDTD =
    new DecimalField(message, HEADERSIZE + 64, 3, 0, "E02CFRDTD");
    fields[18] = fieldE02CFRDTY =
    new DecimalField(message, HEADERSIZE + 67, 5, 0, "E02CFRDTY");
    fields[19] = fieldE02CFRCCY =
    new CharacterField(message, HEADERSIZE + 72, 3, "E02CFRCCY");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H02USERID using a String value.
  */
  public void setH02USERID(String newvalue)
  {
    fieldH02USERID.setString(newvalue);
  }

  /**
  * Get value of field H02USERID as a String.
  */
  public String getH02USERID()
  {
    return fieldH02USERID.getString();
  }

  /**
  * Set field H02PROGRM using a String value.
  */
  public void setH02PROGRM(String newvalue)
  {
    fieldH02PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H02PROGRM as a String.
  */
  public String getH02PROGRM()
  {
    return fieldH02PROGRM.getString();
  }

  /**
  * Set field H02TIMSYS using a String value.
  */
  public void setH02TIMSYS(String newvalue)
  {
    fieldH02TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H02TIMSYS as a String.
  */
  public String getH02TIMSYS()
  {
    return fieldH02TIMSYS.getString();
  }

  /**
  * Set field H02SCRCOD using a String value.
  */
  public void setH02SCRCOD(String newvalue)
  {
    fieldH02SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H02SCRCOD as a String.
  */
  public String getH02SCRCOD()
  {
    return fieldH02SCRCOD.getString();
  }

  /**
  * Set field H02OPECOD using a String value.
  */
  public void setH02OPECOD(String newvalue)
  {
    fieldH02OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H02OPECOD as a String.
  */
  public String getH02OPECOD()
  {
    return fieldH02OPECOD.getString();
  }

  /**
  * Set field H02FLGMAS using a String value.
  */
  public void setH02FLGMAS(String newvalue)
  {
    fieldH02FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H02FLGMAS as a String.
  */
  public String getH02FLGMAS()
  {
    return fieldH02FLGMAS.getString();
  }

  /**
  * Set field H02FLGWK1 using a String value.
  */
  public void setH02FLGWK1(String newvalue)
  {
    fieldH02FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK1 as a String.
  */
  public String getH02FLGWK1()
  {
    return fieldH02FLGWK1.getString();
  }

  /**
  * Set field H02FLGWK2 using a String value.
  */
  public void setH02FLGWK2(String newvalue)
  {
    fieldH02FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK2 as a String.
  */
  public String getH02FLGWK2()
  {
    return fieldH02FLGWK2.getString();
  }

  /**
  * Set field H02FLGWK3 using a String value.
  */
  public void setH02FLGWK3(String newvalue)
  {
    fieldH02FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H02FLGWK3 as a String.
  */
  public String getH02FLGWK3()
  {
    return fieldH02FLGWK3.getString();
  }

  /**
  * Set field E02CDRRTB using a String value.
  */
  public void setE02CDRRTB(String newvalue)
  {
    fieldE02CDRRTB.setString(newvalue);
  }

  /**
  * Get value of field E02CDRRTB as a String.
  */
  public String getE02CDRRTB()
  {
    return fieldE02CDRRTB.getString();
  }

  /**
  * Set field E02CDRSFL using a String value.
  */
  public void setE02CDRSFL(String newvalue)
  {
    fieldE02CDRSFL.setString(newvalue);
  }

  /**
  * Get value of field E02CDRSFL as a String.
  */
  public String getE02CDRSFL()
  {
    return fieldE02CDRSFL.getString();
  }

  /**
  * Set field E02CDRCCY using a String value.
  */
  public void setE02CDRCCY(String newvalue)
  {
    fieldE02CDRCCY.setString(newvalue);
  }

  /**
  * Get value of field E02CDRCCY as a String.
  */
  public String getE02CDRCCY()
  {
    return fieldE02CDRCCY.getString();
  }

  /**
  * Set field E02CDRDTM using a String value.
  */
  public void setE02CDRDTM(String newvalue)
  {
    fieldE02CDRDTM.setString(newvalue);
  }

  /**
  * Get value of field E02CDRDTM as a String.
  */
  public String getE02CDRDTM()
  {
    return fieldE02CDRDTM.getString();
  }

  /**
  * Set numeric field E02CDRDTM using a BigDecimal value.
  */
  public void setE02CDRDTM(BigDecimal newvalue)
  {
    fieldE02CDRDTM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02CDRDTM as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02CDRDTM()
  {
    return fieldE02CDRDTM.getBigDecimal();
  }

  /**
  * Set field E02CDRDTD using a String value.
  */
  public void setE02CDRDTD(String newvalue)
  {
    fieldE02CDRDTD.setString(newvalue);
  }

  /**
  * Get value of field E02CDRDTD as a String.
  */
  public String getE02CDRDTD()
  {
    return fieldE02CDRDTD.getString();
  }

  /**
  * Set numeric field E02CDRDTD using a BigDecimal value.
  */
  public void setE02CDRDTD(BigDecimal newvalue)
  {
    fieldE02CDRDTD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02CDRDTD as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02CDRDTD()
  {
    return fieldE02CDRDTD.getBigDecimal();
  }

  /**
  * Set field E02CDRDTY using a String value.
  */
  public void setE02CDRDTY(String newvalue)
  {
    fieldE02CDRDTY.setString(newvalue);
  }

  /**
  * Get value of field E02CDRDTY as a String.
  */
  public String getE02CDRDTY()
  {
    return fieldE02CDRDTY.getString();
  }

  /**
  * Set numeric field E02CDRDTY using a BigDecimal value.
  */
  public void setE02CDRDTY(BigDecimal newvalue)
  {
    fieldE02CDRDTY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02CDRDTY as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02CDRDTY()
  {
    return fieldE02CDRDTY.getBigDecimal();
  }

  /**
  * Set field E02CFRRTB using a String value.
  */
  public void setE02CFRRTB(String newvalue)
  {
    fieldE02CFRRTB.setString(newvalue);
  }

  /**
  * Get value of field E02CFRRTB as a String.
  */
  public String getE02CFRRTB()
  {
    return fieldE02CFRRTB.getString();
  }

  /**
  * Set field E02CFRDTM using a String value.
  */
  public void setE02CFRDTM(String newvalue)
  {
    fieldE02CFRDTM.setString(newvalue);
  }

  /**
  * Get value of field E02CFRDTM as a String.
  */
  public String getE02CFRDTM()
  {
    return fieldE02CFRDTM.getString();
  }

  /**
  * Set numeric field E02CFRDTM using a BigDecimal value.
  */
  public void setE02CFRDTM(BigDecimal newvalue)
  {
    fieldE02CFRDTM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02CFRDTM as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02CFRDTM()
  {
    return fieldE02CFRDTM.getBigDecimal();
  }

  /**
  * Set field E02CFRDTD using a String value.
  */
  public void setE02CFRDTD(String newvalue)
  {
    fieldE02CFRDTD.setString(newvalue);
  }

  /**
  * Get value of field E02CFRDTD as a String.
  */
  public String getE02CFRDTD()
  {
    return fieldE02CFRDTD.getString();
  }

  /**
  * Set numeric field E02CFRDTD using a BigDecimal value.
  */
  public void setE02CFRDTD(BigDecimal newvalue)
  {
    fieldE02CFRDTD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02CFRDTD as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02CFRDTD()
  {
    return fieldE02CFRDTD.getBigDecimal();
  }

  /**
  * Set field E02CFRDTY using a String value.
  */
  public void setE02CFRDTY(String newvalue)
  {
    fieldE02CFRDTY.setString(newvalue);
  }

  /**
  * Get value of field E02CFRDTY as a String.
  */
  public String getE02CFRDTY()
  {
    return fieldE02CFRDTY.getString();
  }

  /**
  * Set numeric field E02CFRDTY using a BigDecimal value.
  */
  public void setE02CFRDTY(BigDecimal newvalue)
  {
    fieldE02CFRDTY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field E02CFRDTY as a BigDecimal.
  */
  public BigDecimal getBigDecimalE02CFRDTY()
  {
    return fieldE02CFRDTY.getBigDecimal();
  }

  /**
  * Set field E02CFRCCY using a String value.
  */
  public void setE02CFRCCY(String newvalue)
  {
    fieldE02CFRCCY.setString(newvalue);
  }

  /**
  * Get value of field E02CFRCCY as a String.
  */
  public String getE02CFRCCY()
  {
    return fieldE02CFRCCY.getString();
  }

}

package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EWD0100DS physical file definition.
* 
* File level identifier is 1150105112147.
* Record format level identifier is 40922D23C6101.
*/

public class EWD0100DSMessage extends MessageRecord
{
  final static String fldnames[] = {
                                     "EWDTBL",
                                     "EWDPRT",
                                     "EWDSRT",
                                     "EWDNME",
                                     "EWDDTM",
                                     "EWDDTD",
                                     "EWDDTY",
                                     "EWDTYP",
                                     "EWDOPE"
                                   };
  final static String tnames[] = {
                                   "EWDTBL",
                                   "EWDPRT",
                                   "EWDSRT",
                                   "EWDNME",
                                   "EWDDTM",
                                   "EWDDTD",
                                   "EWDDTY",
                                   "EWDTYP",
                                   "EWDOPE"
                                 };
  final static String fid = "1150105112147";
  final static String rid = "40922D23C6101";
  final static String fmtname = "EWD0100DS";
  final int FIELDCOUNT = 9;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldEWDTBL = null;
  private DecimalField fieldEWDPRT = null;
  private DecimalField fieldEWDSRT = null;
  private CharacterField fieldEWDNME = null;
  private DecimalField fieldEWDDTM = null;
  private DecimalField fieldEWDDTD = null;
  private DecimalField fieldEWDDTY = null;
  private CharacterField fieldEWDTYP = null;
  private CharacterField fieldEWDOPE = null;

  /**
  * Constructor for EWD0100DSMessage.
  */
  public EWD0100DSMessage()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 82;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldEWDTBL =
    new CharacterField(message, HEADERSIZE + 0, 2, "EWDTBL");
    fields[1] = fieldEWDPRT =
    new DecimalField(message, HEADERSIZE + 2, 11, 6, "EWDPRT");
    fields[2] = fieldEWDSRT =
    new DecimalField(message, HEADERSIZE + 13, 11, 6, "EWDSRT");
    fields[3] = fieldEWDNME =
    new CharacterField(message, HEADERSIZE + 24, 45, "EWDNME");
    fields[4] = fieldEWDDTM =
    new DecimalField(message, HEADERSIZE + 69, 3, 0, "EWDDTM");
    fields[5] = fieldEWDDTD =
    new DecimalField(message, HEADERSIZE + 72, 3, 0, "EWDDTD");
    fields[6] = fieldEWDDTY =
    new DecimalField(message, HEADERSIZE + 75, 5, 0, "EWDDTY");
    fields[7] = fieldEWDTYP =
    new CharacterField(message, HEADERSIZE + 80, 1, "EWDTYP");
    fields[8] = fieldEWDOPE =
    new CharacterField(message, HEADERSIZE + 81, 1, "EWDOPE");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field EWDTBL using a String value.
  */
  public void setEWDTBL(String newvalue)
  {
    fieldEWDTBL.setString(newvalue);
  }

  /**
  * Get value of field EWDTBL as a String.
  */
  public String getEWDTBL()
  {
    return fieldEWDTBL.getString();
  }

  /**
  * Set field EWDPRT using a String value.
  */
  public void setEWDPRT(String newvalue)
  {
    fieldEWDPRT.setString(newvalue);
  }

  /**
  * Get value of field EWDPRT as a String.
  */
  public String getEWDPRT()
  {
    return fieldEWDPRT.getString();
  }

  /**
  * Set numeric field EWDPRT using a BigDecimal value.
  */
  public void setEWDPRT(BigDecimal newvalue)
  {
    fieldEWDPRT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDPRT as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDPRT()
  {
    return fieldEWDPRT.getBigDecimal();
  }

  /**
  * Set field EWDSRT using a String value.
  */
  public void setEWDSRT(String newvalue)
  {
    fieldEWDSRT.setString(newvalue);
  }

  /**
  * Get value of field EWDSRT as a String.
  */
  public String getEWDSRT()
  {
    return fieldEWDSRT.getString();
  }

  /**
  * Set numeric field EWDSRT using a BigDecimal value.
  */
  public void setEWDSRT(BigDecimal newvalue)
  {
    fieldEWDSRT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDSRT as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDSRT()
  {
    return fieldEWDSRT.getBigDecimal();
  }

  /**
  * Set field EWDNME using a String value.
  */
  public void setEWDNME(String newvalue)
  {
    fieldEWDNME.setString(newvalue);
  }

  /**
  * Get value of field EWDNME as a String.
  */
  public String getEWDNME()
  {
    return fieldEWDNME.getString();
  }

  /**
  * Set field EWDDTM using a String value.
  */
  public void setEWDDTM(String newvalue)
  {
    fieldEWDDTM.setString(newvalue);
  }

  /**
  * Get value of field EWDDTM as a String.
  */
  public String getEWDDTM()
  {
    return fieldEWDDTM.getString();
  }

  /**
  * Set numeric field EWDDTM using a BigDecimal value.
  */
  public void setEWDDTM(BigDecimal newvalue)
  {
    fieldEWDDTM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDDTM as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDDTM()
  {
    return fieldEWDDTM.getBigDecimal();
  }

  /**
  * Set field EWDDTD using a String value.
  */
  public void setEWDDTD(String newvalue)
  {
    fieldEWDDTD.setString(newvalue);
  }

  /**
  * Get value of field EWDDTD as a String.
  */
  public String getEWDDTD()
  {
    return fieldEWDDTD.getString();
  }

  /**
  * Set numeric field EWDDTD using a BigDecimal value.
  */
  public void setEWDDTD(BigDecimal newvalue)
  {
    fieldEWDDTD.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDDTD as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDDTD()
  {
    return fieldEWDDTD.getBigDecimal();
  }

  /**
  * Set field EWDDTY using a String value.
  */
  public void setEWDDTY(String newvalue)
  {
    fieldEWDDTY.setString(newvalue);
  }

  /**
  * Get value of field EWDDTY as a String.
  */
  public String getEWDDTY()
  {
    return fieldEWDDTY.getString();
  }

  /**
  * Set numeric field EWDDTY using a BigDecimal value.
  */
  public void setEWDDTY(BigDecimal newvalue)
  {
    fieldEWDDTY.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EWDDTY as a BigDecimal.
  */
  public BigDecimal getBigDecimalEWDDTY()
  {
    return fieldEWDDTY.getBigDecimal();
  }

  /**
  * Set field EWDTYP using a String value.
  */
  public void setEWDTYP(String newvalue)
  {
    fieldEWDTYP.setString(newvalue);
  }

  /**
  * Get value of field EWDTYP as a String.
  */
  public String getEWDTYP()
  {
    return fieldEWDTYP.getString();
  }

  /**
  * Set field EWDOPE using a String value.
  */
  public void setEWDOPE(String newvalue)
  {
    fieldEWDOPE.setString(newvalue);
  }

  /**
  * Get value of field EWDOPE as a String.
  */
  public String getEWDOPE()
  {
    return fieldEWDOPE.getString();
  }

}

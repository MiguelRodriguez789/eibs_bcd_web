package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from EDC00020 physical file definition.
* 
* File level identifier is 1100706173544.
* Record format level identifier is 51C83EC9E698D.
*/

public class EDC00020Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USERID",
                                     "H01PROGRM",
                                     "H01TIMSYS",
                                     "H01SCRCOD",
                                     "H01OPECOD",
                                     "H01FLGMAS",
                                     "H01FLGWK1",
                                     "H01FLGWK2",
                                     "H01FLGWK3",
                                     "EDCNCL",
                                     "EDCMES",
                                     "EDCANO",
                                     "DCOTLP",
                                     "DCOTIP",
                                     "DCOCOP",
                                     "EDCOPE",
                                     "DCOMND",
                                     "DCOCLA",
                                     "DCOEST",
                                     "EDCMVI",
                                     "EDCMIM",
                                     "DCOMTV",
                                     "DCOMTC",
                                     "EDCTOT",
                                     "EDCXRT"
                                   };
  final static String tnames[] = {
                                   "H01USERID",
                                   "H01PROGRM",
                                   "H01TIMSYS",
                                   "H01SCRCOD",
                                   "H01OPECOD",
                                   "H01FLGMAS",
                                   "H01FLGWK1",
                                   "H01FLGWK2",
                                   "H01FLGWK3",
                                   "EDCNCL",
                                   "EDCMES",
                                   "EDCANO",
                                   "DCOTLP",
                                   "DCOTIP",
                                   "DCOCOP",
                                   "EDCOPE",
                                   "DCOMND",
                                   "DCOCLA",
                                   "DCOEST",
                                   "EDCMVI",
                                   "EDCMIM",
                                   "DCOMTV",
                                   "DCOMTC",
                                   "EDCTOT",
                                   "EDCXRT"
                                 };
  final static String fid = "1100706173544";
  final static String rid = "51C83EC9E698D";
  final static String fmtname = "EDC00020";
  final int FIELDCOUNT = 25;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USERID = null;
  private CharacterField fieldH01PROGRM = null;
  private CharacterField fieldH01TIMSYS = null;
  private CharacterField fieldH01SCRCOD = null;
  private CharacterField fieldH01OPECOD = null;
  private CharacterField fieldH01FLGMAS = null;
  private CharacterField fieldH01FLGWK1 = null;
  private CharacterField fieldH01FLGWK2 = null;
  private CharacterField fieldH01FLGWK3 = null;
  private DecimalField fieldEDCNCL = null;
  private DecimalField fieldEDCMES = null;
  private DecimalField fieldEDCANO = null;
  private CharacterField fieldDCOTLP = null;
  private CharacterField fieldDCOTIP = null;
  private CharacterField fieldDCOCOP = null;
  private CharacterField fieldEDCOPE = null;
  private CharacterField fieldDCOMND = null;
  private CharacterField fieldDCOCLA = null;
  private DecimalField fieldDCOEST = null;
  private DecimalField fieldEDCMVI = null;
  private DecimalField fieldEDCMIM = null;
  private DecimalField fieldDCOMTV = null;
  private DecimalField fieldDCOMTC = null;
  private DecimalField fieldEDCTOT = null;
  private DecimalField fieldEDCXRT = null;

  /**
  * Constructor for EDC00020Message.
  */
  public EDC00020Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 194;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USERID");
    fields[1] = fieldH01PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PROGRM");
    fields[2] = fieldH01TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIMSYS");
    fields[3] = fieldH01SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCRCOD");
    fields[4] = fieldH01OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPECOD");
    fields[5] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01FLGMAS");
    fields[6] = fieldH01FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01FLGWK1");
    fields[7] = fieldH01FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01FLGWK2");
    fields[8] = fieldH01FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01FLGWK3");
    fields[9] = fieldEDCNCL =
    new DecimalField(message, HEADERSIZE + 42, 10, 0, "EDCNCL");
    fields[10] = fieldEDCMES =
    new DecimalField(message, HEADERSIZE + 52, 3, 0, "EDCMES");
    fields[11] = fieldEDCANO =
    new DecimalField(message, HEADERSIZE + 55, 5, 0, "EDCANO");
    fields[12] = fieldDCOTLP =
    new CharacterField(message, HEADERSIZE + 60, 1, "DCOTLP");
    fields[13] = fieldDCOTIP =
    new CharacterField(message, HEADERSIZE + 61, 4, "DCOTIP");
    fields[14] = fieldDCOCOP =
    new CharacterField(message, HEADERSIZE + 65, 4, "DCOCOP");
    fields[15] = fieldEDCOPE =
    new CharacterField(message, HEADERSIZE + 69, 20, "EDCOPE");
    fields[16] = fieldDCOMND =
    new CharacterField(message, HEADERSIZE + 89, 3, "DCOMND");
    fields[17] = fieldDCOCLA =
    new CharacterField(message, HEADERSIZE + 92, 2, "DCOCLA");
    fields[18] = fieldDCOEST =
    new DecimalField(message, HEADERSIZE + 94, 3, 0, "DCOEST");
    fields[19] = fieldEDCMVI =
    new DecimalField(message, HEADERSIZE + 97, 19, 2, "EDCMVI");
    fields[20] = fieldEDCMIM =
    new DecimalField(message, HEADERSIZE + 116, 19, 2, "EDCMIM");
    fields[21] = fieldDCOMTV =
    new DecimalField(message, HEADERSIZE + 135, 19, 2, "DCOMTV");
    fields[22] = fieldDCOMTC =
    new DecimalField(message, HEADERSIZE + 154, 19, 2, "DCOMTC");
    fields[23] = fieldEDCTOT =
    new DecimalField(message, HEADERSIZE + 173, 19, 2, "EDCTOT");
    fields[24] = fieldEDCXRT =
    new DecimalField(message, HEADERSIZE + 192, 2, 0, "EDCXRT");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USERID using a String value.
  */
  public void setH01USERID(String newvalue)
  {
    fieldH01USERID.setString(newvalue);
  }

  /**
  * Get value of field H01USERID as a String.
  */
  public String getH01USERID()
  {
    return fieldH01USERID.getString();
  }

  /**
  * Set field H01PROGRM using a String value.
  */
  public void setH01PROGRM(String newvalue)
  {
    fieldH01PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H01PROGRM as a String.
  */
  public String getH01PROGRM()
  {
    return fieldH01PROGRM.getString();
  }

  /**
  * Set field H01TIMSYS using a String value.
  */
  public void setH01TIMSYS(String newvalue)
  {
    fieldH01TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H01TIMSYS as a String.
  */
  public String getH01TIMSYS()
  {
    return fieldH01TIMSYS.getString();
  }

  /**
  * Set field H01SCRCOD using a String value.
  */
  public void setH01SCRCOD(String newvalue)
  {
    fieldH01SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H01SCRCOD as a String.
  */
  public String getH01SCRCOD()
  {
    return fieldH01SCRCOD.getString();
  }

  /**
  * Set field H01OPECOD using a String value.
  */
  public void setH01OPECOD(String newvalue)
  {
    fieldH01OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H01OPECOD as a String.
  */
  public String getH01OPECOD()
  {
    return fieldH01OPECOD.getString();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

  /**
  * Set field H01FLGWK1 using a String value.
  */
  public void setH01FLGWK1(String newvalue)
  {
    fieldH01FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK1 as a String.
  */
  public String getH01FLGWK1()
  {
    return fieldH01FLGWK1.getString();
  }

  /**
  * Set field H01FLGWK2 using a String value.
  */
  public void setH01FLGWK2(String newvalue)
  {
    fieldH01FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK2 as a String.
  */
  public String getH01FLGWK2()
  {
    return fieldH01FLGWK2.getString();
  }

  /**
  * Set field H01FLGWK3 using a String value.
  */
  public void setH01FLGWK3(String newvalue)
  {
    fieldH01FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK3 as a String.
  */
  public String getH01FLGWK3()
  {
    return fieldH01FLGWK3.getString();
  }

  /**
  * Set field EDCNCL using a String value.
  */
  public void setEDCNCL(String newvalue)
  {
    fieldEDCNCL.setString(newvalue);
  }

  /**
  * Get value of field EDCNCL as a String.
  */
  public String getEDCNCL()
  {
    return fieldEDCNCL.getString();
  }

  /**
  * Set numeric field EDCNCL using a BigDecimal value.
  */
  public void setEDCNCL(BigDecimal newvalue)
  {
    fieldEDCNCL.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EDCNCL as a BigDecimal.
  */
  public BigDecimal getBigDecimalEDCNCL()
  {
    return fieldEDCNCL.getBigDecimal();
  }

  /**
  * Set field EDCMES using a String value.
  */
  public void setEDCMES(String newvalue)
  {
    fieldEDCMES.setString(newvalue);
  }

  /**
  * Get value of field EDCMES as a String.
  */
  public String getEDCMES()
  {
    return fieldEDCMES.getString();
  }

  /**
  * Set numeric field EDCMES using a BigDecimal value.
  */
  public void setEDCMES(BigDecimal newvalue)
  {
    fieldEDCMES.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EDCMES as a BigDecimal.
  */
  public BigDecimal getBigDecimalEDCMES()
  {
    return fieldEDCMES.getBigDecimal();
  }

  /**
  * Set field EDCANO using a String value.
  */
  public void setEDCANO(String newvalue)
  {
    fieldEDCANO.setString(newvalue);
  }

  /**
  * Get value of field EDCANO as a String.
  */
  public String getEDCANO()
  {
    return fieldEDCANO.getString();
  }

  /**
  * Set numeric field EDCANO using a BigDecimal value.
  */
  public void setEDCANO(BigDecimal newvalue)
  {
    fieldEDCANO.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EDCANO as a BigDecimal.
  */
  public BigDecimal getBigDecimalEDCANO()
  {
    return fieldEDCANO.getBigDecimal();
  }

  /**
  * Set field DCOTLP using a String value.
  */
  public void setDCOTLP(String newvalue)
  {
    fieldDCOTLP.setString(newvalue);
  }

  /**
  * Get value of field DCOTLP as a String.
  */
  public String getDCOTLP()
  {
    return fieldDCOTLP.getString();
  }

  /**
  * Set field DCOTIP using a String value.
  */
  public void setDCOTIP(String newvalue)
  {
    fieldDCOTIP.setString(newvalue);
  }

  /**
  * Get value of field DCOTIP as a String.
  */
  public String getDCOTIP()
  {
    return fieldDCOTIP.getString();
  }

  /**
  * Set field DCOCOP using a String value.
  */
  public void setDCOCOP(String newvalue)
  {
    fieldDCOCOP.setString(newvalue);
  }

  /**
  * Get value of field DCOCOP as a String.
  */
  public String getDCOCOP()
  {
    return fieldDCOCOP.getString();
  }

  /**
  * Set field EDCOPE using a String value.
  */
  public void setEDCOPE(String newvalue)
  {
    fieldEDCOPE.setString(newvalue);
  }

  /**
  * Get value of field EDCOPE as a String.
  */
  public String getEDCOPE()
  {
    return fieldEDCOPE.getString();
  }

  /**
  * Set field DCOMND using a String value.
  */
  public void setDCOMND(String newvalue)
  {
    fieldDCOMND.setString(newvalue);
  }

  /**
  * Get value of field DCOMND as a String.
  */
  public String getDCOMND()
  {
    return fieldDCOMND.getString();
  }

  /**
  * Set field DCOCLA using a String value.
  */
  public void setDCOCLA(String newvalue)
  {
    fieldDCOCLA.setString(newvalue);
  }

  /**
  * Get value of field DCOCLA as a String.
  */
  public String getDCOCLA()
  {
    return fieldDCOCLA.getString();
  }

  /**
  * Set field DCOEST using a String value.
  */
  public void setDCOEST(String newvalue)
  {
    fieldDCOEST.setString(newvalue);
  }

  /**
  * Get value of field DCOEST as a String.
  */
  public String getDCOEST()
  {
    return fieldDCOEST.getString();
  }

  /**
  * Set numeric field DCOEST using a BigDecimal value.
  */
  public void setDCOEST(BigDecimal newvalue)
  {
    fieldDCOEST.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DCOEST as a BigDecimal.
  */
  public BigDecimal getBigDecimalDCOEST()
  {
    return fieldDCOEST.getBigDecimal();
  }

  /**
  * Set field EDCMVI using a String value.
  */
  public void setEDCMVI(String newvalue)
  {
    fieldEDCMVI.setString(newvalue);
  }

  /**
  * Get value of field EDCMVI as a String.
  */
  public String getEDCMVI()
  {
    return fieldEDCMVI.getString();
  }

  /**
  * Set numeric field EDCMVI using a BigDecimal value.
  */
  public void setEDCMVI(BigDecimal newvalue)
  {
    fieldEDCMVI.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EDCMVI as a BigDecimal.
  */
  public BigDecimal getBigDecimalEDCMVI()
  {
    return fieldEDCMVI.getBigDecimal();
  }

  /**
  * Set field EDCMIM using a String value.
  */
  public void setEDCMIM(String newvalue)
  {
    fieldEDCMIM.setString(newvalue);
  }

  /**
  * Get value of field EDCMIM as a String.
  */
  public String getEDCMIM()
  {
    return fieldEDCMIM.getString();
  }

  /**
  * Set numeric field EDCMIM using a BigDecimal value.
  */
  public void setEDCMIM(BigDecimal newvalue)
  {
    fieldEDCMIM.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EDCMIM as a BigDecimal.
  */
  public BigDecimal getBigDecimalEDCMIM()
  {
    return fieldEDCMIM.getBigDecimal();
  }

  /**
  * Set field DCOMTV using a String value.
  */
  public void setDCOMTV(String newvalue)
  {
    fieldDCOMTV.setString(newvalue);
  }

  /**
  * Get value of field DCOMTV as a String.
  */
  public String getDCOMTV()
  {
    return fieldDCOMTV.getString();
  }

  /**
  * Set numeric field DCOMTV using a BigDecimal value.
  */
  public void setDCOMTV(BigDecimal newvalue)
  {
    fieldDCOMTV.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DCOMTV as a BigDecimal.
  */
  public BigDecimal getBigDecimalDCOMTV()
  {
    return fieldDCOMTV.getBigDecimal();
  }

  /**
  * Set field DCOMTC using a String value.
  */
  public void setDCOMTC(String newvalue)
  {
    fieldDCOMTC.setString(newvalue);
  }

  /**
  * Get value of field DCOMTC as a String.
  */
  public String getDCOMTC()
  {
    return fieldDCOMTC.getString();
  }

  /**
  * Set numeric field DCOMTC using a BigDecimal value.
  */
  public void setDCOMTC(BigDecimal newvalue)
  {
    fieldDCOMTC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field DCOMTC as a BigDecimal.
  */
  public BigDecimal getBigDecimalDCOMTC()
  {
    return fieldDCOMTC.getBigDecimal();
  }

  /**
  * Set field EDCTOT using a String value.
  */
  public void setEDCTOT(String newvalue)
  {
    fieldEDCTOT.setString(newvalue);
  }

  /**
  * Get value of field EDCTOT as a String.
  */
  public String getEDCTOT()
  {
    return fieldEDCTOT.getString();
  }

  /**
  * Set numeric field EDCTOT using a BigDecimal value.
  */
  public void setEDCTOT(BigDecimal newvalue)
  {
    fieldEDCTOT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EDCTOT as a BigDecimal.
  */
  public BigDecimal getBigDecimalEDCTOT()
  {
    return fieldEDCTOT.getBigDecimal();
  }

  /**
  * Set field EDCXRT using a String value.
  */
  public void setEDCXRT(String newvalue)
  {
    fieldEDCXRT.setString(newvalue);
  }

  /**
  * Get value of field EDCXRT as a String.
  */
  public String getEDCXRT()
  {
    return fieldEDCXRT.getString();
  }

  /**
  * Set numeric field EDCXRT using a BigDecimal value.
  */
  public void setEDCXRT(BigDecimal newvalue)
  {
    fieldEDCXRT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field EDCXRT as a BigDecimal.
  */
  public BigDecimal getBigDecimalEDCXRT()
  {
    return fieldEDCXRT.getBigDecimal();
  }

}

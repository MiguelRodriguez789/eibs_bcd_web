package datapro.eibs.beans;

import datapro.eibs.sockets.*;
import java.io.*;
import java.math.*;

import java.util.*;

/**
* Class generated by AS/400 CRTCLASS command from ECL000117 physical file definition.
* 
* File level identifier is 1100706173538.
* Record format level identifier is 4893738259474.
*/

public class ECL000117Message extends MessageRecord
{
  final static String fldnames[] = {
                                     "H01USERID",
                                     "H01PROGRM",
                                     "H01TIMSYS",
                                     "H01SCRCOD",
                                     "H01OPECOD",
                                     "H01FLGMAS",
                                     "H01FLGWK1",
                                     "H01FLGWK2",
                                     "H01FLGWK3",
                                     "SDDACC",
                                     "SDDCUN",
                                     "SDDEXI",
                                     "SDDEST",
                                     "SDDXRT"
                                   };
  final static String tnames[] = {
                                   "H01USERID",
                                   "H01PROGRM",
                                   "H01TIMSYS",
                                   "H01SCRCOD",
                                   "H01OPECOD",
                                   "H01FLGMAS",
                                   "H01FLGWK1",
                                   "H01FLGWK2",
                                   "H01FLGWK3",
                                   "SDDACC",
                                   "SDDCUN",
                                   "SDDEXI",
                                   "SDDEST",
                                   "SDDXRT"
                                 };
  final static String fid = "1100706173538";
  final static String rid = "4893738259474";
  final static String fmtname = "ECL000117";
  final int FIELDCOUNT = 14;
  private static Hashtable tlookup = new Hashtable();
  private CharacterField fieldH01USERID = null;
  private CharacterField fieldH01PROGRM = null;
  private CharacterField fieldH01TIMSYS = null;
  private CharacterField fieldH01SCRCOD = null;
  private CharacterField fieldH01OPECOD = null;
  private CharacterField fieldH01FLGMAS = null;
  private CharacterField fieldH01FLGWK1 = null;
  private CharacterField fieldH01FLGWK2 = null;
  private CharacterField fieldH01FLGWK3 = null;
  private DecimalField fieldSDDACC = null;
  private DecimalField fieldSDDCUN = null;
  private CharacterField fieldSDDEXI = null;
  private CharacterField fieldSDDEST = null;
  private DecimalField fieldSDDXRT = null;

  /**
  * Constructor for ECL000117Message.
  */
  public ECL000117Message()
  {
    createFields();
    initialize();
  }

  /**
  * Create fields for this message.
  * This method implements the abstract method in the MessageRecord superclass.
  */
  protected void createFields()
  {
    recordsize = 69;
    fileid = fid;
    recordid = rid;
    message = new byte[getByteLength()];
    formatname = fmtname;
    fieldnames = fldnames;
    tagnames = tnames;
    fields = new MessageField[FIELDCOUNT];

    fields[0] = fieldH01USERID =
    new CharacterField(message, HEADERSIZE + 0, 10, "H01USERID");
    fields[1] = fieldH01PROGRM =
    new CharacterField(message, HEADERSIZE + 10, 10, "H01PROGRM");
    fields[2] = fieldH01TIMSYS =
    new CharacterField(message, HEADERSIZE + 20, 12, "H01TIMSYS");
    fields[3] = fieldH01SCRCOD =
    new CharacterField(message, HEADERSIZE + 32, 2, "H01SCRCOD");
    fields[4] = fieldH01OPECOD =
    new CharacterField(message, HEADERSIZE + 34, 4, "H01OPECOD");
    fields[5] = fieldH01FLGMAS =
    new CharacterField(message, HEADERSIZE + 38, 1, "H01FLGMAS");
    fields[6] = fieldH01FLGWK1 =
    new CharacterField(message, HEADERSIZE + 39, 1, "H01FLGWK1");
    fields[7] = fieldH01FLGWK2 =
    new CharacterField(message, HEADERSIZE + 40, 1, "H01FLGWK2");
    fields[8] = fieldH01FLGWK3 =
    new CharacterField(message, HEADERSIZE + 41, 1, "H01FLGWK3");
    fields[9] = fieldSDDACC =
    new DecimalField(message, HEADERSIZE + 42, 13, 0, "SDDACC");
    fields[10] = fieldSDDCUN =
    new DecimalField(message, HEADERSIZE + 55, 10, 0, "SDDCUN");
    fields[11] = fieldSDDEXI =
    new CharacterField(message, HEADERSIZE + 65, 1, "SDDEXI");
    fields[12] = fieldSDDEST =
    new CharacterField(message, HEADERSIZE + 66, 1, "SDDEST");
    fields[13] = fieldSDDXRT =
    new DecimalField(message, HEADERSIZE + 67, 2, 0, "SDDXRT");

    synchronized (tlookup)
    {
      if (tlookup.isEmpty())
      {
        for (int i = 0; i < tnames.length; i++)
          tlookup.put(tnames[i], new Integer(i));
      }
    }

    taglookup = tlookup;
  }

  /**
  * Set field H01USERID using a String value.
  */
  public void setH01USERID(String newvalue)
  {
    fieldH01USERID.setString(newvalue);
  }

  /**
  * Get value of field H01USERID as a String.
  */
  public String getH01USERID()
  {
    return fieldH01USERID.getString();
  }

  /**
  * Set field H01PROGRM using a String value.
  */
  public void setH01PROGRM(String newvalue)
  {
    fieldH01PROGRM.setString(newvalue);
  }

  /**
  * Get value of field H01PROGRM as a String.
  */
  public String getH01PROGRM()
  {
    return fieldH01PROGRM.getString();
  }

  /**
  * Set field H01TIMSYS using a String value.
  */
  public void setH01TIMSYS(String newvalue)
  {
    fieldH01TIMSYS.setString(newvalue);
  }

  /**
  * Get value of field H01TIMSYS as a String.
  */
  public String getH01TIMSYS()
  {
    return fieldH01TIMSYS.getString();
  }

  /**
  * Set field H01SCRCOD using a String value.
  */
  public void setH01SCRCOD(String newvalue)
  {
    fieldH01SCRCOD.setString(newvalue);
  }

  /**
  * Get value of field H01SCRCOD as a String.
  */
  public String getH01SCRCOD()
  {
    return fieldH01SCRCOD.getString();
  }

  /**
  * Set field H01OPECOD using a String value.
  */
  public void setH01OPECOD(String newvalue)
  {
    fieldH01OPECOD.setString(newvalue);
  }

  /**
  * Get value of field H01OPECOD as a String.
  */
  public String getH01OPECOD()
  {
    return fieldH01OPECOD.getString();
  }

  /**
  * Set field H01FLGMAS using a String value.
  */
  public void setH01FLGMAS(String newvalue)
  {
    fieldH01FLGMAS.setString(newvalue);
  }

  /**
  * Get value of field H01FLGMAS as a String.
  */
  public String getH01FLGMAS()
  {
    return fieldH01FLGMAS.getString();
  }

  /**
  * Set field H01FLGWK1 using a String value.
  */
  public void setH01FLGWK1(String newvalue)
  {
    fieldH01FLGWK1.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK1 as a String.
  */
  public String getH01FLGWK1()
  {
    return fieldH01FLGWK1.getString();
  }

  /**
  * Set field H01FLGWK2 using a String value.
  */
  public void setH01FLGWK2(String newvalue)
  {
    fieldH01FLGWK2.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK2 as a String.
  */
  public String getH01FLGWK2()
  {
    return fieldH01FLGWK2.getString();
  }

  /**
  * Set field H01FLGWK3 using a String value.
  */
  public void setH01FLGWK3(String newvalue)
  {
    fieldH01FLGWK3.setString(newvalue);
  }

  /**
  * Get value of field H01FLGWK3 as a String.
  */
  public String getH01FLGWK3()
  {
    return fieldH01FLGWK3.getString();
  }

  /**
  * Set field SDDACC using a String value.
  */
  public void setSDDACC(String newvalue)
  {
    fieldSDDACC.setString(newvalue);
  }

  /**
  * Get value of field SDDACC as a String.
  */
  public String getSDDACC()
  {
    return fieldSDDACC.getString();
  }

  /**
  * Set numeric field SDDACC using a BigDecimal value.
  */
  public void setSDDACC(BigDecimal newvalue)
  {
    fieldSDDACC.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SDDACC as a BigDecimal.
  */
  public BigDecimal getBigDecimalSDDACC()
  {
    return fieldSDDACC.getBigDecimal();
  }

  /**
  * Set field SDDCUN using a String value.
  */
  public void setSDDCUN(String newvalue)
  {
    fieldSDDCUN.setString(newvalue);
  }

  /**
  * Get value of field SDDCUN as a String.
  */
  public String getSDDCUN()
  {
    return fieldSDDCUN.getString();
  }

  /**
  * Set numeric field SDDCUN using a BigDecimal value.
  */
  public void setSDDCUN(BigDecimal newvalue)
  {
    fieldSDDCUN.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SDDCUN as a BigDecimal.
  */
  public BigDecimal getBigDecimalSDDCUN()
  {
    return fieldSDDCUN.getBigDecimal();
  }

  /**
  * Set field SDDEXI using a String value.
  */
  public void setSDDEXI(String newvalue)
  {
    fieldSDDEXI.setString(newvalue);
  }

  /**
  * Get value of field SDDEXI as a String.
  */
  public String getSDDEXI()
  {
    return fieldSDDEXI.getString();
  }

  /**
  * Set field SDDEST using a String value.
  */
  public void setSDDEST(String newvalue)
  {
    fieldSDDEST.setString(newvalue);
  }

  /**
  * Get value of field SDDEST as a String.
  */
  public String getSDDEST()
  {
    return fieldSDDEST.getString();
  }

  /**
  * Set field SDDXRT using a String value.
  */
  public void setSDDXRT(String newvalue)
  {
    fieldSDDXRT.setString(newvalue);
  }

  /**
  * Get value of field SDDXRT as a String.
  */
  public String getSDDXRT()
  {
    return fieldSDDXRT.getString();
  }

  /**
  * Set numeric field SDDXRT using a BigDecimal value.
  */
  public void setSDDXRT(BigDecimal newvalue)
  {
    fieldSDDXRT.setBigDecimal(newvalue);
  }

  /**
  * Return value of numeric field SDDXRT as a BigDecimal.
  */
  public BigDecimal getBigDecimalSDDXRT()
  {
    return fieldSDDXRT.getBigDecimal();
  }

}
